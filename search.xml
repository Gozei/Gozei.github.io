<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OpenAI API 介绍与使用</title>
      <link href="/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>前不久非常牛逼的Chatgpt语言模型的开发公司OpenAI开放了他们的chatgpt接口，让个人或者企业开发者可以把chatgpt集成到自己的应用中，这是<a href="https://platform.openai.com/docs/introduction">OpenAI</a>官方文档地址想了解更详细的内容可以自己去看看。（需要魔法上网）</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305192615370.png" alt="image-20230305192615370"></p><p>可以看到有非常多的功能可以给大家体验。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="APIKey"><a href="#APIKey" class="headerlink" title="APIKey"></a>APIKey</h2><p>首先你得有openAI的账号然后去<a href="https://platform.openai.com/account/api-keys">这里</a>复制你的APIKey，至于你有没有账号和能不能进去官网就不是我这篇博客的重点了😎。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305193247741.png" alt="image-20230305193247741"></p><p>然后还要<a href="https://platform.openai.com/account/org-settings">组织标识</a>，后面也有用</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305200248300.png" alt="image-20230305200248300"></p><p>每个账号有18美元的免费额度，会根据你请求的token个数来计费。1000个token，0.002刀，一张图片0.02刀。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方提供两种api，一个是Python，一个是Node.js库。如果你想去用java或者Kotlin等等其他语言就去<a href="https://platform.openai.com/docs/libraries/community-libraries">git社区</a>。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305194643999.png" alt="image-20230305194643999"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openai</span><br><span class="line">npm install openai</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>安装完成之后就可以通过任何语言的HTTP请求来与API交互，这个时候你的APIKey就得用上了，你提交的每一个请求都必须带上key才能成功。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195227479.png" alt="image-20230305195227479"></p><p>展示一个官方给的<a href="https://platform.openai.com/docs/api-reference/chat">聊天请求</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai.com/v1/completions \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">-H &quot;Authorization: Bearer YOUR_API_KEY&quot; \</span><br><span class="line">-d &#x27;&#123;&quot;model&quot;: &quot;text-davinci-003&quot;, &quot;prompt&quot;: &quot;Say this is a test&quot;, &quot;temperature&quot;: 0, &quot;max_tokens&quot;: 7&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195437766.png" alt="image-20230305195437766"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305201034817.png" alt="image-20230305201034817"></p><p>之后的代码我会用py来演示(毕竟官方就给的py不抄白不抄😎)</p><h2 id="获取模型列表"><a href="#获取模型列表" class="headerlink" title="获取模型列表"></a>获取模型列表</h2><p>列出当前可用的模型，并提供有关每个模型的基本信息，例如所有者和可用性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_key = <span class="string">&quot;YOUR APIKEY&quot;</span></span><br><span class="line">model = openai.Model.<span class="built_in">list</span>()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Create-completion"><a href="#Create-completion" class="headerlink" title="Create completion"></a>Create completion</h2><p>这才是重头戏，直译过来叫创建完成，感觉有点不好听所以就直接用英文了😎。来个<a href="https://platform.openai.com/docs/guides/chat/chat-completions-beta">跳转链接</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230306001026228.png" alt="image-20230306001026228"></p><p>因为官方在这个地方个个参数功能介绍得非常详细，所以我就直接上代码先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">message_log</span>):</span><br><span class="line">    <span class="comment"># 调用openai提供的ChatCompletion API获取chatgpt的应答</span></span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,  <span class="comment"># 必要，模型名字</span></span><br><span class="line">        messages=message_log,   <span class="comment"># 必要，消息内容</span></span><br><span class="line">        <span class="comment"># temperature=1.2,        # 可选，默认为1，0~2，数值越高创造性越强</span></span><br><span class="line">        <span class="comment"># top_p = 0.5,           # 可选，默认为1，0~1，效果类似temperature，不建议都用</span></span><br><span class="line">        <span class="comment"># n = 3,                  # 可选，默认为1，chatgpt对一个提问生成多少个回答</span></span><br><span class="line">        <span class="comment"># stream = True,         # 可选，默认False，设置为True和网页效果类似，需监听事件来解析</span></span><br><span class="line">        <span class="comment"># stop = &#x27;花&#x27;,              # 可选，chatgpt遇到stop里的字符串时停止生成内容（且不返回应答？）</span></span><br><span class="line">        <span class="comment"># max_tokens=4048,        # 可选，默认无穷大，回复的最大长度，如果设置了，需要满足max_tokens+message_tokens&lt;=4096</span></span><br><span class="line">        <span class="comment"># presence_penalty = 2,   # 可选，默认为0，-2~2，越大越允许跑题</span></span><br><span class="line">        <span class="comment"># frequency_penalty = 1.8,  # 可选，默认为0，-2~2，越大越不允许复读机</span></span><br><span class="line">        <span class="comment"># logit_bias = None,      # 可选，默认无，影响特定词汇的生成概率？</span></span><br><span class="line">        <span class="comment"># user = &#x27;xy123&#x27;,              # 可选，默认无，用户名       </span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content) <span class="comment">#这里的response是一个对象，真正要看的内容在choices字典message.content这里</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;you:&quot;</span>)</span><br><span class="line">    send_message(message)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>每个请求参数的后面都有具体功能解释。这里面非常有用的参数是temperature和top_p，可以调整ai回复的创造性。而messages就是你说的话。</p><p>看一下设置1和1.2的对比</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305203111507.png" alt="image-20230305203111507"></p><p>这是1.2，甚至开始偏题</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305204116424.png" alt="image-20230305204116424"></p><h2 id="指令编辑"><a href="#指令编辑" class="headerlink" title="指令编辑"></a>指令编辑</h2><p>为提供的输入、指令和参数创建新的编辑。比如修改错算数错误，修改拼写错误，按需求编辑等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要求改错算术问题1+1=3</span></span><br><span class="line">response = openai.Edit.create(</span><br><span class="line">        model=<span class="string">&quot;text-davinci-edit-001&quot;</span>,</span><br><span class="line">        <span class="built_in">input</span>= <span class="string">&quot;1+1=3&quot;</span>, <span class="comment">#需要编辑的内容</span></span><br><span class="line">        instruction= <span class="string">&quot;Modify calculation error&quot;</span>, <span class="comment">#需求指令</span></span><br><span class="line">    <span class="comment"># n = 1 默认值为 1,要为输入和指令生成的编辑次数。</span></span><br><span class="line">        <span class="comment"># temperature = 1-2 使用什么采样温度，介于 0 和 2 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使其更加集中和确定。</span></span><br><span class="line">    <span class="comment">#更多参数就不阐述了，文档里面写的很详细， 只介绍三个个必须的</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response) <span class="comment">#这里的response是一个对象，真正要看的内容在choices的text里面</span></span><br></pre></td></tr></table></figure><p>修改之后</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305210624754.png"></p><h2 id="生成图像"><a href="#生成图像" class="headerlink" title="生成图像"></a>生成图像</h2><p>给定提示和/或输入图像，模型将生成一个新图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = openai.Image.create(</span><br><span class="line">        prompt = <span class="string">&quot;A cute baby sea otter&quot;</span>, <span class="comment">#图像描述</span></span><br><span class="line">        n = <span class="number">2</span>, <span class="comment">#生成图像个数</span></span><br><span class="line">        size= <span class="string">&quot;1024x1024&quot;</span> <span class="comment">#尺寸</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.data[<span class="number">0</span>].url) <span class="comment">#取第一个</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1678023645</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-Mu2nKUx4IQbrWViTiBomLnBD.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=rTUUzKFFWC3nYwK9L64ix%2BpPpfQ4ZhmmsV2Gl/yl808%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-bbTBG1Jx7jYbMb7XF0QXvs8t.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=TcnlGyhAiO%2B7sSImHVocRku6j5S0M%2BUQWZ%2BkulEjRCI%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>预览一下，得到sea otter一个</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305214824099.png"></p><h2 id="音频-语音转文本"><a href="#音频-语音转文本" class="headerlink" title="音频[语音转文本]"></a>音频[语音转文本]</h2><p>语音到文本API提供了两个端点，基于我们最先进的开源大v2 Whisper模型。</p><p>它们可用于：</p><ul><li><p>将音频翻译并转录为英语。(目前仅支持英文)</p></li><li><p>将音频转录为音频使用的任何语言。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">audio_file= <span class="built_in">open</span>(<span class="string">&quot;1.mp3&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">transcript = openai.Audio.translate(<span class="string">&quot;whisper-1&quot;</span>, audio_file) <span class="comment">#音频翻译并转录</span></span><br><span class="line"><span class="comment"># transcript = openai.Audio.transcribe(&quot;whisper-1&quot;, audio_file) #音频转录</span></span><br><span class="line"><span class="built_in">print</span>(transcript)</span><br></pre></td></tr></table></figure><p>这里转录了一段我室友梦话😎，没有在代码里面解析unicode编码，去网上随便解析了一手</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235327714.png" alt="image-20230305235327714"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235546293.png" alt="image-20230305235546293"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>官方文档里还有部分api就不做演示了，有些功能我自己也没玩明白。如果有兴趣就自己去研究研究文档。体验chatgpt的强大，不得不说这真能打！！人类要大面积失业了！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> ChatGpt </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明日方舟MAA脚本使用</title>
      <link href="/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h1><h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h2><p><a href="https://maa.plus/">MaaAssistantArknights</a></p><p>前面是下载链接，后面是使用文档，可以查看模拟器支持。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133112717.png" alt="image-20230211133112717"></p><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h1><p>解压下载文件后点击启动</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133433485.png" alt="image-20230211133433485"></p><p>可以看到最初页面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133517036.png" alt="image-20230211133517036"></p><p>先去<strong>设置里面设置</strong>连接设置，就是你的模拟器名。还有游戏设置里面的客户端类型设置，b服就选择b服，管服就是管服。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133858837.png" alt="image-20230211133858837"></p><p>模拟器建议先看看官方文档里面的<a href="https://maa.plus/docs/1.3-%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%94%AF%E6%8C%81.html">模拟器型号支持</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134225656.png" alt="image-20230211134225656"></p><p>我最开始用的雷电模拟器发现确实有很多问题，最后用的官方推荐的蓝叠。如果里面没有任何一款你用的模拟器你就选择通用模式或者兼容模式</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133931325.png" alt="image-20230211133931325"></p><h2 id="1-一键长草"><a href="#1-一键长草" class="headerlink" title="1.一键长草"></a>1.一键长草</h2><p>这是最主要也用得最多的功能。点击全选会帮你把除肉鸽和生息演算之外的勾上，毕竟这两个人为要求高。右边可以根据你的需要设置理智药的量或者碎石次数等等。比如最常见的刷土就在关卡指定上面选择1-7。不过这都是些常用的如果打活动需要用到后面的自动战斗。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134848657.png"></p><p>最后点下面的link star等待脚本运行</p><h2 id="2-自动肉鸽"><a href="#2-自动肉鸽" class="headerlink" title="2.自动肉鸽"></a>2.自动肉鸽</h2><p>自动肉鸽需要先去设置-&gt;肉鸽设置选择你的肉鸽类型，水月或者愧影。<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135145864.png" alt="image-20230211135145864"></p><p>等等一些需求根据自己设置上。然后依旧点击link star开始脚本</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135523891.png" alt="image-20230211135523891"></p><h2 id="3-生息演算"><a href="#3-生息演算" class="headerlink" title="3.生息演算"></a>3.生息演算</h2><p>生息演算需要在游戏内操作几步。<a href="https://www.bilibili.com/video/BV1py4y1R7bH">图文看不懂的点这里（转载b站）</a></p><p>首先进入生息演算并且开始演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135954870.png" alt="image-20230211135954870"></p><p>随便选择一个干员（没有练度要求），补充体力后推出</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140030276.png" alt="image-20230211140030276"></p><p>放弃演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140137459.png" alt="image-20230211140137459"></p><p>最后勾上生息演算点击开始就行<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140230394.png" alt="image-20230211140230394"></p><h2 id="4-自动战斗"><a href="#4-自动战斗" class="headerlink" title="4.自动战斗"></a>4.自动战斗</h2><p>自动战斗是打具体关卡，活动用的。</p><p>首先你得先去找到<a href="https://prts.plus/">作业代码</a>，以这里以刷土关的例子</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140705729.png" alt="image-20230211140705729"></p><p>打开然后复制右上角的神秘代码</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140746210.png" alt="image-20230211140746210"></p><p>或者下载原json</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140840118.png" alt="image-20230211140840118"></p><p>如果你使用神秘代码显示请求网络错误那么建议你下载json文件，然后选择作业文件地址到上面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211141317927.png" alt="image-20230211141317927"></p><p><strong>注意一下，没有助战就勾上自动编队</strong></p><p>不过用了几个作业发现还是有很多问题，比如干员没有部署，或者没有带上。如果一步没有完成脚本可能会卡住，关于这点我不知道是谁的问题。</p><h2 id="5-其他功能"><a href="#5-其他功能" class="headerlink" title="5.其他功能"></a>5.其他功能</h2><p>这里就不太多介绍了，摸索一下都是一眼就能看明白这么用的。本教程本身就很傻瓜，甚至看完下载就不用接着往后面看，看完还说那你能帮帮我吗，这里我建议找我去帮你去医院挂个号。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 明日方舟 </tag>
            
            <tag> MAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven从0到1</title>
      <link href="/year/02/11/Maven%E4%BB%8E0%E5%88%B01/"/>
      <url>/year/02/11/Maven%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Maven简介（废话）"><a href="#一-Maven简介（废话）" class="headerlink" title="一.Maven简介（废话）"></a>一.Maven简介（废话）</h1><p><a href="https://maven.apache.org/what-is-maven.html">官方链接丢这</a>，也是下载地址</p><h2 id="1-一个依赖管理工具"><a href="#1-一个依赖管理工具" class="headerlink" title="1.一个依赖管理工具"></a>1.一个依赖管理工具</h2><p>①jar 包的规模</p><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。而如果使用 Maven 来引入这些 jar 包只需要配置相对来说极少『<strong>依赖</strong>』。</p><p>②jar包的来源问题</p><p>使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范，避免出现名称，版本等一系列问题。</p><p>③jar包的导入问题</p><p>不用maven构建的javaweb工程懂的都懂，一堆jar包要放在webinf的lib目录下麻烦得要死。在使用Maven之后，通过配置依赖(jar包)的坐标，查找本地仓库中相应jar包，若本地仓库没有，则统一从镜像网站或中央仓库中下载</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021102831531.png" alt="image-20231021102831531"></p><p>④jar包之间的依赖</p><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h2 id="2-一个构建工具"><a href="#2-一个构建工具" class="headerlink" title="2.一个构建工具"></a>2.一个构建工具</h2><p>你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。如果在linux服务器上没有ide环境那么怎么办，所以需要maven这种专门的构建工具。</p><h1 id="二-Maven安装和配置"><a href="#二-Maven安装和配置" class="headerlink" title="二. Maven安装和配置"></a>二. Maven安装和配置</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://maven.apache.org/docs/history.html">装之前先看看与你的java版本是否支持</a>，当然前提是电脑内必须包含java_home环境变量</p><p>本机使用：</p><table><thead><tr><th>工具</th><th>版本</th></tr></thead><tbody><tr><td>Maven</td><td>3.8.8</td></tr><tr><td>JDK</td><td>19</td></tr><tr><td>IDEA</td><td>2022.3</td></tr></tbody></table><p>下载完解压存放到非中文路径，打开根目录可以看到一下</p><p>软件结构：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240304222454975.png" alt="image-20240304222454975"></p><ol><li><p><strong>bin</strong>：含有Maven的运行脚本</p></li><li><p>boot：含有plexus-classworlds类加载器框架</p></li><li><p><strong>conf</strong>：含有Maven的核心配置文件</p></li><li><p>lib：含有Maven运行时所需要的Java类库</p></li><li><p>LICENSE、NOTICE、README.txt：针对Maven版本，第三方软件等简要介绍</p></li></ol><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p>1.配置MAVEN_HOME</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021110938230.png" alt="image-20231021110938230"></p><p>2.配置Path</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_xNL5Fg_ucf.png" alt="image_xNL5Fg_ucf"></p><p>3.命令测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn -v </span><br><span class="line"><span class="comment"># 输出版本信息即可，如果错误，请仔细检查环境变量即可！</span></span><br></pre></td></tr></table></figure><h2 id="3-功能配置"><a href="#3-功能配置" class="headerlink" title="3.功能配置"></a>3.功能配置</h2><p>我们需要需改<strong>maven/conf/settings.xml</strong>配置文件，来修改maven的一些默认配置。我们主要休要修改的有三个配置：</p><p>1.配置本地仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">  | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conf/settings.xml 55行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>此处写你自己选择的本地仓库地址路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置国内阿里镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.配置jdk版本项目构建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-IDEA配置本地Maven软件"><a href="#4-IDEA配置本地Maven软件" class="headerlink" title="4. IDEA配置本地Maven软件"></a>4. IDEA配置本地Maven软件</h2><p><strong>注意：idea工具默认自带maven配置软件</strong>,你可以选择自带也可以选择自己的。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021112046512.png" alt="image-20231021112046512"></p><h1 id="三-基于IDEA创建Maven工程"><a href="#三-基于IDEA创建Maven工程" class="headerlink" title="三. 基于IDEA创建Maven工程"></a>三. 基于IDEA创建Maven工程</h1><h2 id="1-Maven工程的GAVP"><a href="#1-Maven工程的GAVP" class="headerlink" title="1.Maven工程的GAVP"></a>1.Maven工程的GAVP</h2><p>Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。</p><p>GAV遵循一下规则：</p><p>​    1） <strong>GroupID 格式</strong>：com.{公司/BU }.业务线.[子业务线]，最多 4 级。</p><p>​        说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。</p><p>​        正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang</p><p>​    2） <strong>ArtifactID 格式</strong>：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。</p><p>​        正例：tc-client / uic-api / tair-tool / bookstore</p><p>​    3） <strong>Version版本号格式推荐</strong>：主版本号.次版本号.修订号</p><p>​        1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。</p><p>​        2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。</p><p>​        3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。</p><p>​        例如： 初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1等</p><p><strong>Packaging定义规则：</strong></p><p>​    指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！</p><p>​    packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。</p><p>​    packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。</p><p>​    packaging 属性为 pom，代表不会打包，用来做继承的父工程。</p><h2 id="2-构建maven-javase工程"><a href="#2-构建maven-javase工程" class="headerlink" title="2.构建maven javase工程"></a>2.构建maven javase工程</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1709646000950.png" alt="1709646000950"></p><p>验证maven工程是否创建成功，当创建完毕maven工程之后，idea中会自动打开Maven视图，如下图：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305214139033.png" alt="image-20240305214139033"></p><h2 id="3-构建javaweb工程"><a href="#3-构建javaweb工程" class="headerlink" title="3.构建javaweb工程"></a>3.构建javaweb工程</h2><h3 id="3-1手动创建"><a href="#3-1手动创建" class="headerlink" title="3.1手动创建"></a>3.1手动创建</h3><p>手动创建一个javase工程然后在pom文件下添加打包方式（觉得麻烦直接看下一个）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后设置<strong>web资源路径</strong>和<strong>web.xml路径</strong>（懒不做演示）</p><p>校验一下</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305214752774.png" alt="image-20240305214752774"></p><h3 id="3-2插件创建"><a href="#3-2插件创建" class="headerlink" title="3.2插件创建"></a>3.2插件创建</h3><p>1.安装插件JBLJavaToWeb</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_cHUU_rABB6.png" alt="image_cHUU_rABB6"></p><p>2.右键、使用插件快速补全web项目</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305215218413.png" alt="image-20240305215218413"></p><h3 id="3-3-模板创建"><a href="#3-3-模板创建" class="headerlink" title="3.3.模板创建"></a>3.3.模板创建</h3><p><strong>这种方式生成的web.xml版本很低</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305215737601.png" alt="image-20240305215737601"></p><h2 id="4-Maven工程项目结构说明"><a href="#4-Maven工程项目结构说明" class="headerlink" title="4.Maven工程项目结构说明"></a>4.Maven工程项目结构说明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|-- pom.xml                               # Maven 项目管理文件 </span><br><span class="line">|-- src</span><br><span class="line">    |-- main                              # 项目主要代码</span><br><span class="line">    |   |-- java                          # Java 源代码目录</span><br><span class="line">    |   |   `-- com/example/myapp         # 开发者代码主目录</span><br><span class="line">    |   |       |-- controller            # 存放 Controller 层代码的目录</span><br><span class="line">    |   |       |-- service               # 存放 Service 层代码的目录</span><br><span class="line">    |   |       |-- dao                   # 存放 DAO 层代码的目录</span><br><span class="line">    |   |       `-- model                 # 存放数据模型的目录</span><br><span class="line">    |   |-- resources                     # 资源目录，存放配置文件、静态资源等</span><br><span class="line">    |   |   |-- log4j.properties          # 日志配置文件</span><br><span class="line">    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件</span><br><span class="line">    |   |   `-- static                    # 存放静态资源的目录</span><br><span class="line">    |   |       |-- css                   # 存放 CSS 文件的目录</span><br><span class="line">    |   |       |-- js                    # 存放 JavaScript 文件的目录</span><br><span class="line">    |   |       `-- images                # 存放图片资源的目录</span><br><span class="line">    |   `-- webapp                        # 存放 WEB 相关配置和资源</span><br><span class="line">    |       |-- WEB-INF                   # 存放 WEB 应用配置文件</span><br><span class="line">    |       |   |-- web.xml               # Web 应用的部署描述文件</span><br><span class="line">    |       |   `-- classes               # 存放编译后的 class 文件</span><br><span class="line">    |       `-- index.html                # Web 应用入口页面</span><br><span class="line">    `-- test                              # 项目测试代码</span><br><span class="line">        |-- java                          # 单元测试目录</span><br><span class="line">        `-- resources                     # 测试资源目录</span><br></pre></td></tr></table></figure><ul><li>  pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。</li><li>  src/main/java：存放项目的 Java 源代码。</li><li>  src/main/resources：存放项目的资源文件，如配置文件、静态资源等。</li><li>  src/main/webapp/WEB-INF：存放 Web 应用的配置文件。</li><li>  src/main/webapp/index.jsp：Web 应用的入口页面。</li><li>  src/test/java：存放项目的测试代码。</li><li>  src/test/resources：存放测试相关的资源文件，如测试配置文件等。</li></ul><h1 id="四-基于IDEA进行Maven工程构建"><a href="#四-基于IDEA进行Maven工程构建" class="headerlink" title="四.基于IDEA进行Maven工程构建"></a>四.基于IDEA进行Maven工程构建</h1><p>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。常见的构建工具包括 Maven、Gradle、Ant 等。</p><h2 id="1-命令方式项目构建"><a href="#1-命令方式项目构建" class="headerlink" title="1.命令方式项目构建"></a>1.命令方式项目构建</h2><p><strong>在需要构建模块的pom.xml文件的目录使用cmd</strong></p><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>mvn compile</td><td align="left">编译项目，生成target文件</td></tr><tr><td>mvn package</td><td align="left">打包项目，生成jar或war文件</td></tr><tr><td>mvn clean</td><td align="left">清理编译或打包后的项目结构</td></tr><tr><td>mvn install</td><td align="left">打包后上传到maven本地仓库</td></tr><tr><td>mvn deploy</td><td align="left">只打包，上传到maven私服仓库</td></tr><tr><td>mvn site</td><td align="left">生成站点</td></tr><tr><td>mvn test</td><td align="left">执行测试源码</td></tr></tbody></table><p>war包打包插件和jdk版本不匹配：pom.xml 添加以下代码即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-可视化方式项目构建"><a href="#2-可视化方式项目构建" class="headerlink" title="2.可视化方式项目构建"></a>2.可视化方式项目构建</h2><p>idea里面直接点右侧maven，然后选择你需要的构建操作</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240306213541330.png" alt="image-20240306213541330"></p><p>注意：打包（package）和安装（install）的区别是什么</p><p>打包是将工程打成jar或war文件，保存在target目录下</p><p>安装是将当前工程所生成的jar或war文件，安装到本地仓库，会按照坐标保存到指定位置</p><h2 id="3-构建生命周期"><a href="#3-构建生命周期" class="headerlink" title="3.构建生命周期"></a>3.构建生命周期</h2><p>当我们执行package命令也会自动执行compile命令。这种行为就是因为构建生命周期产生的！构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！！！<strong>会简化构建过程</strong>。</p><ul><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><pre><code>包含命令：compile -  test - package - install - deploy</code></pre></li></ul><h1 id="五-基于IDEA进行Maven依赖管理"><a href="#五-基于IDEA进行Maven依赖管理" class="headerlink" title="五.基于IDEA进行Maven依赖管理"></a>五.基于IDEA进行Maven依赖管理</h1><p>Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven <strong>仓库自动</strong>下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><h2 id="1-Maven工程核心信息配置"><a href="#1-Maven工程核心信息配置" class="headerlink" title="1.Maven工程核心信息配置"></a>1.Maven工程核心信息配置</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--打包方式</span></span><br><span class="line"><span class="comment">    默认：jar</span></span><br><span class="line"><span class="comment">    jar指的是普通的java项目打包方式！ 项目打成jar包！</span></span><br><span class="line"><span class="comment">    war指的是web项目打包方式！项目打成war包！</span></span><br><span class="line"><span class="comment">    pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar/pom/war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖管理和依赖添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖！</span></span><br><span class="line"><span class="comment">   scope属性是可选的，可以指定依赖生效范围！</span></span><br><span class="line"><span class="comment">   依赖信息查询方式：</span></span><br><span class="line"><span class="comment">      1. maven仓库信息官网 https://mvnrepository.com/</span></span><br><span class="line"><span class="comment">      2. mavensearch插件搜索</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入具体的依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖版本统一提取和维护</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--命名随便,内部制定版本号即可！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用properties声明版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-依赖范围"><a href="#2-依赖范围" class="headerlink" title="2.依赖范围"></a>2.依赖范围</h2><p>通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境</p><table><thead><tr><th>依赖范围</th><th>描述</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>编译依赖范围，scope 元素的缺省值。使用此依赖范围的 Maven 依赖，对于三种 classpath 均有效，即该 Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。</td></tr><tr><td><strong>test</strong></td><td>测试依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath 有效。例如，Junit 依赖只有在测试阶段才需要。</td></tr><tr><td><strong>provided</strong></td><td>已提供依赖范围。使用此依赖范围的 Maven 依赖，只对编译 classpath 和测试 classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，故不需要 Maven 重复引入该依赖。</td></tr><tr><td>runtime</td><td>运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，只有测试、运行阶段才需要实现了 JDBC 接口的驱动。</td></tr><tr><td>system</td><td>系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用。</td></tr><tr><td>import</td><td>导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。</td></tr></tbody></table><h2 id="3-Maven仓库产生LastUpdated文件解决"><a href="#3-Maven仓库产生LastUpdated文件解决" class="headerlink" title="3.Maven仓库产生LastUpdated文件解决"></a>3.Maven仓库产生LastUpdated文件解决</h2><p>Maven在下载仓库中找不到相应资源时（断网或者丢包），会生成一个.lastUpdated为后缀的文件。如果这个.lastUpdated文件存在，那么即使换一个有资源的仓库后，Maven依然不会去下载新资源。</p><p>此时我们需要删除此文件。以下为批量脚本删除，如果仅出现单个文件可以根据坐标手动删除。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cls</span> </span><br><span class="line">@<span class="built_in">ECHO</span> OFF </span><br><span class="line"><span class="built_in">SET</span> CLEAR_PATH=D: </span><br><span class="line"><span class="built_in">SET</span> CLEAR_DIR=D:\maven-repository(本地仓库路径)</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>a </span><br><span class="line"><span class="built_in">TITLE</span> ClearLastUpdated <span class="keyword">For</span> Windows </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:MENU </span><br><span class="line"><span class="built_in">CLS</span></span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>. * * * *  ClearLastUpdated <span class="keyword">For</span> Windows  * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">1</span> 清理*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">2</span> 查看*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">3</span> 退 出 * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>.请输入选择项目的序号： </span><br><span class="line"><span class="built_in">set</span> /p ID= </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">1</span>&quot; <span class="keyword">GOTO</span> cmd1 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">2</span>&quot; <span class="keyword">GOTO</span> cmd2 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">3</span>&quot; <span class="keyword">EXIT</span> </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line">:cmd1 </span><br><span class="line"><span class="built_in">ECHO</span>. 开始清理</span><br><span class="line"><span class="variable">%CLEAR_PATH%</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">del</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:cmd2 </span><br><span class="line"><span class="built_in">ECHO</span>. 查看*.lastUpdated文件</span><br><span class="line"><span class="variable">%CLEAR_PATH%</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br></pre></td></tr></table></figure><p><strong>但是为什么删除后会再次生成</strong></p><p>每次在更新maven项目的时候，每一个jar包路径下的_remote.repositories文件都会同setting.xml中设置的仓库地址id进行判断，如果没有匹配，会自动更新该jar包的相关文件。如果未联网则会出现jar无法发现的错误，此时就又会生成一个.lastUpdated为后缀的文件。导致即使jar存在，maven项目也无法使用该jar的情况。</p><p><strong>所以建议添加一个并且统一一个稳定的国内镜像</strong>，如果之前使用的没有更改过的远程仓库再换成国内镜像，那么建议先把本地仓库里的依赖包全清空，然后让项目重新下载所有依赖。</p><h2 id="4-Maven工程Build构建配置"><a href="#4-Maven工程Build构建配置" class="headerlink" title="4.Maven工程Build构建配置"></a>4.Maven工程Build构建配置</h2><p>默认情况下，构建不需要额外配置，都有对应的缺省配置。当然了，我们也可以在pom.xml定制一些配置，来修改默认构建的行为和产物！</p><p>1.<strong>指定打包命名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认的打包名称：artifactid+verson.打包方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>定义打包名称<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.<strong>指定打包文件</strong></p><p>如果在java文件夹中添加java类，会自动打包编译到classes文件夹下！</p><p>但是在java文件夹中添加xml文件，默认不会被打包！</p><p>默认情况下，按照maven工程结构放置的文件会默认被编译和打包！</p><p>我们可以使用resources标签，指定要打包资源的文件夹要把哪些静态资源打包到 classes根目录下！</p><p>应用场景：mybatis中有时会将用于编写SQL语句的映射文件和mapper接口都写在src/main/java下的某个包中，此时映射文件就不会被打包，如何解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置要打包的资源位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置资源所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置包含的资源类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong>配置依赖插件</strong></p><p>dependencies标签下引入开发需要的jar包！我们可以在build/plugins/plugin标签引入插件！</p><p>常用的插件：修改jdk版本、tomcat插件、mybatis分页插件、mybatis逆向工程插件等等！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- java编译插件，配jdk的编译版本 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六-Maven依赖传递和依赖冲突"><a href="#六-Maven依赖传递和依赖冲突" class="headerlink" title="六.Maven依赖传递和依赖冲突"></a>六.Maven依赖传递和依赖冲突</h1><h2 id="1-Maven依赖传递特性"><a href="#1-Maven依赖传递特性" class="headerlink" title="1. Maven依赖传递特性"></a>1. Maven依赖传递特性</h2><p>假如有Maven项目A，项目B依赖A，项目C依赖B。那么我们可以说 C依赖A。也就是说，依赖的关系为：C—&gt;B—&gt;A， 那么我们执行项目C时，会自动把B、A都下载导入到C项目的jar包文件夹中，这就是依赖的传递性。</p><p><strong>传递的原则</strong></p><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围以及配置</p><ul><li><p>B 依赖 C 时使用 compile 范围：可以传递</p></li><li><p>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</p></li><li><p>B 依赖 C 时，若配置了optional标签，则不能传递</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>依赖冲突（传递的依赖已经存在），依赖不会传递</li></ul><h2 id="2-Maven依赖冲突特性"><a href="#2-Maven依赖冲突特性" class="headerlink" title="2. Maven依赖冲突特性"></a>2. Maven依赖冲突特性</h2><p>当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_km7_szBRUw.png" alt="image_km7_szBRUw"></p><p>maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐！</p><p><strong>解决依赖冲突（如何选择重复依赖）方式：</strong></p><ol><li><p>自动选择原则</p><ul><li><p>短路优先原则（第一原则）</p><p>A—&gt;B—&gt;C—&gt;D—&gt;E—&gt;X(version 0.0.1)</p><p>A—&gt;F—&gt;X(version 0.0.2)</p><p>则A依赖于X(version 0.0.2)。</p></li><li><p>依赖路径长度相同情况下，则“先声明优先”（第二原则）</p><p>A—&gt;E—&gt;X(version 0.0.1)</p><p>A—&gt;F—&gt;X(version 0.0.2)</p><p>在&lt;depencies&gt;&lt;/depencies&gt;中，先声明的，路径相同，会优先选择！</p></li></ul></li><li><p>手动排除</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用excludes标签配置依赖的排除  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="七-Maven工程继承和聚合关系"><a href="#七-Maven工程继承和聚合关系" class="headerlink" title="七.Maven工程继承和聚合关系"></a>七.Maven工程继承和聚合关系</h1><h2 id="1-Maven工程继承关系"><a href="#1-Maven工程继承关系" class="headerlink" title="1. Maven工程继承关系"></a>1. Maven工程继承关系</h2><p>Maven 继承是指在 Maven 的项目中，让一个项目从另一个项目中继承配置信息的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。能够在父工程中统一管理项目中的依赖信息。</p><ul><li>父工程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gozei.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子工程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父工程的坐标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用父工程依赖统一管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后子工程引用版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Maven工程聚合关系"><a href="#2-Maven工程聚合关系" class="headerlink" title="2. Maven工程聚合关系"></a>2. Maven工程聚合关系</h2><p>Maven 聚合是指将多个项目组织到一个父级项目中，以便一起构建和管理的机制。聚合可以帮助我们更好地管理一组相关的子项目，同时简化它们的构建和部署过程。</p><p>父项目中包含的子项目列表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且通过触发父工程构建命令、引发所有子模块构建！产生反应堆！</p><h1 id="八-Maven私服搭建"><a href="#八-Maven私服搭建" class="headerlink" title="八.Maven私服搭建"></a>八.Maven私服搭建</h1><p>Maven 私服是一种特殊的Maven远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。当然也并不是说私服只能建立在局域网，也有很多公司会直接把私服部署到公网，具体还是得看公司业务的性质是否是保密的等等，因为局域网的话只能在公司用，部署到公网的话员工在家里也可以办公使用。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021164631791.png" alt="image-20231021164631791"></p><p>私服产品有很多，此处选择最流行的Nexus</p><h2 id="1-Nexus下载安装"><a href="#1-Nexus下载安装" class="headerlink" title="1.Nexus下载安装"></a>1.Nexus下载安装</h2><p>下载地址：<a href="https://help.sonatype.com/repomanager3/product-information/download">https://help.sonatype.com/repomanager3/product-information/download</a></p><p>解压，以管理员身份打开CMD，进入bin目录下，执行./nexus /run命令启动</p><p>访问 Nexus 首页</p><p>首页地址：<a href="http://localhost:8081/%EF%BC%8C8081%E4%B8%BA%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7">http://localhost:8081/，8081为默认端口号</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309230001315.png" alt="image-20240309230001315"></p><h2 id="2-初始设置"><a href="#2-初始设置" class="headerlink" title="2.初始设置"></a>2.初始设置</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img002.e1ac8197.png" alt="img002.e1ac8197"></p><ul><li>用户名：admin</li><li>密码：查看你这里所显示的路径下的文件</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031171116756.png" alt="image-20231031171116756"></p><p>然后初始化：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img005.4b81e5ab.png" alt="img005.4b81e5ab"></p><p>匿名登录，启用还是禁用？由于启用匿名登录后，后续操作比较简单，这里我们演示禁用匿名登录的操作：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031171607378.png" alt="image-20231031171607378"></p><p>最后初始化完成。</p><h2 id="3-Nexus上的各种仓库"><a href="#3-Nexus上的各种仓库" class="headerlink" title="3.Nexus上的各种仓库"></a>3.Nexus上的各种仓库</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img009.7f737ed7.png" alt="img009.7f737ed7"></p><table><thead><tr><th>仓库类型</th><th>说明</th></tr></thead><tbody><tr><td>proxy</td><td>某个远程仓库的代理</td></tr><tr><td>group</td><td>存放：通过 Nexus 获取的第三方 jar 包</td></tr><tr><td>hosted</td><td>存放：本团队其他开发人员部署到 Nexus 的 jar 包</td></tr></tbody></table><table><thead><tr><th>仓库名称</th><th>说明</th></tr></thead><tbody><tr><td>maven-central</td><td>Nexus 对 Maven 中央仓库的代理</td></tr><tr><td>maven-public</td><td>Nexus 默认创建，供开发人员下载使用的组仓库</td></tr><tr><td>maven-releases</td><td>Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 releases 版本</td></tr><tr><td>maven-snapshots</td><td>Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 snapshots 版本</td></tr></tbody></table><h2 id="4-通过-Nexus-下载-jar-包"><a href="#4-通过-Nexus-下载-jar-包" class="headerlink" title="4.通过 Nexus 下载 jar 包"></a>4.通过 Nexus 下载 jar 包</h2><p>修改本地maven的核心配置文件settings.xml，把我们原来配置阿里云仓库地址的 mirror 标签改成下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p> url 标签</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309230743361.png" alt="image-20240309230743361"></p><p>把上图中看到的地址复制出来即可。如果我们在前面允许了匿名访问，到这里就够了。但如果我们禁用了匿名访问，那么接下来我们还要继续配置 settings.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>你设置的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要<strong>格外注意</strong>：server 标签内的 id 标签值必须和 mirror 标签中的 id 值一样。</p><p>然后在你的工程使用compile命令就会下载所需jar包在nexus。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img014.cc0e87c3.png" alt="img014.cc0e87c3"></p><p>若下载速度太慢，可以设置私服中中央仓库的地址为阿里云仓库地址</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309232428158.png" alt="image-20240309232428158"></p><p>修改为：<a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031175134745.png" alt="image-20231031175134745"></p><h2 id="5-将-jar-包部署到-Nexus"><a href="#5-将-jar-包部署到-Nexus" class="headerlink" title="5.将 jar 包部署到 Nexus"></a>5.将 jar 包部署到 Nexus</h2><p>maven工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这里 snapshotRepository 的 id 标签必须和 settings.xml 中指定的 mirror 标签的 id 属性一致。</p><p>执行部署命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h2 id="6-引用别人部署的-jar-包"><a href="#6-引用别人部署的-jar-包" class="headerlink" title="6.引用别人部署的 jar 包"></a>6.引用别人部署的 jar 包</h2><p>你们公司内部人员写的jar包部署在私服上面，如果你想用就可以这样配置</p><p>maven工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 从0到1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
