<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OpenAI API 介绍与使用</title>
      <link href="/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>前不久非常牛逼的Chatgpt语言模型的开发公司OpenAI开放了他们的chatgpt接口，让个人或者企业开发者可以把chatgpt集成到自己的应用中，这是<a href="https://platform.openai.com/docs/introduction">OpenAI</a>官方文档地址想了解更详细的内容可以自己去看看。（需要魔法上网）</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305192615370.png" alt="image-20230305192615370"></p><p>可以看到有非常多的功能可以给大家体验。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="APIKey"><a href="#APIKey" class="headerlink" title="APIKey"></a>APIKey</h2><p>首先你得有openAI的账号然后去<a href="https://platform.openai.com/account/api-keys">这里</a>复制你的APIKey，至于你有没有账号和能不能进去官网就不是我这篇博客的重点了😎。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305193247741.png" alt="image-20230305193247741"></p><p>然后还要<a href="https://platform.openai.com/account/org-settings">组织标识</a>，后面也有用</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305200248300.png" alt="image-20230305200248300"></p><p>每个账号有18美元的免费额度，会根据你请求的token个数来计费。1000个token，0.002刀，一张图片0.02刀。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方提供两种api，一个是Python，一个是Node.js库。如果你想去用java或者Kotlin等等其他语言就去<a href="https://platform.openai.com/docs/libraries/community-libraries">git社区</a>。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305194643999.png" alt="image-20230305194643999"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openai</span><br><span class="line">npm install openai</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>安装完成之后就可以通过任何语言的HTTP请求来与API交互，这个时候你的APIKey就得用上了，你提交的每一个请求都必须带上key才能成功。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195227479.png" alt="image-20230305195227479"></p><p>展示一个官方给的<a href="https://platform.openai.com/docs/api-reference/chat">聊天请求</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai.com/v1/completions \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">-H &quot;Authorization: Bearer YOUR_API_KEY&quot; \</span><br><span class="line">-d &#x27;&#123;&quot;model&quot;: &quot;text-davinci-003&quot;, &quot;prompt&quot;: &quot;Say this is a test&quot;, &quot;temperature&quot;: 0, &quot;max_tokens&quot;: 7&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195437766.png" alt="image-20230305195437766"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305201034817.png" alt="image-20230305201034817"></p><p>之后的代码我会用py来演示(毕竟官方就给的py不抄白不抄😎)</p><h2 id="获取模型列表"><a href="#获取模型列表" class="headerlink" title="获取模型列表"></a>获取模型列表</h2><p>列出当前可用的模型，并提供有关每个模型的基本信息，例如所有者和可用性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_key = <span class="string">&quot;YOUR APIKEY&quot;</span></span><br><span class="line">model = openai.Model.<span class="built_in">list</span>()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Create-completion"><a href="#Create-completion" class="headerlink" title="Create completion"></a>Create completion</h2><p>这才是重头戏，直译过来叫创建完成，感觉有点不好听所以就直接用英文了😎。来个<a href="https://platform.openai.com/docs/guides/chat/chat-completions-beta">跳转链接</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230306001026228.png" alt="image-20230306001026228"></p><p>因为官方在这个地方个个参数功能介绍得非常详细，所以我就直接上代码先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">message_log</span>):</span><br><span class="line">    <span class="comment"># 调用openai提供的ChatCompletion API获取chatgpt的应答</span></span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,  <span class="comment"># 必要，模型名字</span></span><br><span class="line">        messages=message_log,   <span class="comment"># 必要，消息内容</span></span><br><span class="line">        <span class="comment"># temperature=1.2,        # 可选，默认为1，0~2，数值越高创造性越强</span></span><br><span class="line">        <span class="comment"># top_p = 0.5,           # 可选，默认为1，0~1，效果类似temperature，不建议都用</span></span><br><span class="line">        <span class="comment"># n = 3,                  # 可选，默认为1，chatgpt对一个提问生成多少个回答</span></span><br><span class="line">        <span class="comment"># stream = True,         # 可选，默认False，设置为True和网页效果类似，需监听事件来解析</span></span><br><span class="line">        <span class="comment"># stop = &#x27;花&#x27;,              # 可选，chatgpt遇到stop里的字符串时停止生成内容（且不返回应答？）</span></span><br><span class="line">        <span class="comment"># max_tokens=4048,        # 可选，默认无穷大，回复的最大长度，如果设置了，需要满足max_tokens+message_tokens&lt;=4096</span></span><br><span class="line">        <span class="comment"># presence_penalty = 2,   # 可选，默认为0，-2~2，越大越允许跑题</span></span><br><span class="line">        <span class="comment"># frequency_penalty = 1.8,  # 可选，默认为0，-2~2，越大越不允许复读机</span></span><br><span class="line">        <span class="comment"># logit_bias = None,      # 可选，默认无，影响特定词汇的生成概率？</span></span><br><span class="line">        <span class="comment"># user = &#x27;xy123&#x27;,              # 可选，默认无，用户名       </span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content) <span class="comment">#这里的response是一个对象，真正要看的内容在choices字典message.content这里</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;you:&quot;</span>)</span><br><span class="line">    send_message(message)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>每个请求参数的后面都有具体功能解释。这里面非常有用的参数是temperature和top_p，可以调整ai回复的创造性。而messages就是你说的话。</p><p>看一下设置1和1.2的对比</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305203111507.png" alt="image-20230305203111507"></p><p>这是1.2，甚至开始偏题</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305204116424.png" alt="image-20230305204116424"></p><h2 id="指令编辑"><a href="#指令编辑" class="headerlink" title="指令编辑"></a>指令编辑</h2><p>为提供的输入、指令和参数创建新的编辑。比如修改错算数错误，修改拼写错误，按需求编辑等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要求改错算术问题1+1=3</span></span><br><span class="line">response = openai.Edit.create(</span><br><span class="line">        model=<span class="string">&quot;text-davinci-edit-001&quot;</span>,</span><br><span class="line">        <span class="built_in">input</span>= <span class="string">&quot;1+1=3&quot;</span>, <span class="comment">#需要编辑的内容</span></span><br><span class="line">        instruction= <span class="string">&quot;Modify calculation error&quot;</span>, <span class="comment">#需求指令</span></span><br><span class="line">    <span class="comment"># n = 1 默认值为 1,要为输入和指令生成的编辑次数。</span></span><br><span class="line">        <span class="comment"># temperature = 1-2 使用什么采样温度，介于 0 和 2 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使其更加集中和确定。</span></span><br><span class="line">    <span class="comment">#更多参数就不阐述了，文档里面写的很详细， 只介绍三个个必须的</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response) <span class="comment">#这里的response是一个对象，真正要看的内容在choices的text里面</span></span><br></pre></td></tr></table></figure><p>修改之后</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305210624754.png"></p><h2 id="生成图像"><a href="#生成图像" class="headerlink" title="生成图像"></a>生成图像</h2><p>给定提示和/或输入图像，模型将生成一个新图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = openai.Image.create(</span><br><span class="line">        prompt = <span class="string">&quot;A cute baby sea otter&quot;</span>, <span class="comment">#图像描述</span></span><br><span class="line">        n = <span class="number">2</span>, <span class="comment">#生成图像个数</span></span><br><span class="line">        size= <span class="string">&quot;1024x1024&quot;</span> <span class="comment">#尺寸</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.data[<span class="number">0</span>].url) <span class="comment">#取第一个</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1678023645</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-Mu2nKUx4IQbrWViTiBomLnBD.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=rTUUzKFFWC3nYwK9L64ix%2BpPpfQ4ZhmmsV2Gl/yl808%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-bbTBG1Jx7jYbMb7XF0QXvs8t.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=TcnlGyhAiO%2B7sSImHVocRku6j5S0M%2BUQWZ%2BkulEjRCI%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>预览一下，得到sea otter一个</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305214824099.png"></p><h2 id="音频-语音转文本"><a href="#音频-语音转文本" class="headerlink" title="音频[语音转文本]"></a>音频[语音转文本]</h2><p>语音到文本API提供了两个端点，基于我们最先进的开源大v2 Whisper模型。</p><p>它们可用于：</p><ul><li><p>将音频翻译并转录为英语。(目前仅支持英文)</p></li><li><p>将音频转录为音频使用的任何语言。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">audio_file= <span class="built_in">open</span>(<span class="string">&quot;1.mp3&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">transcript = openai.Audio.translate(<span class="string">&quot;whisper-1&quot;</span>, audio_file) <span class="comment">#音频翻译并转录</span></span><br><span class="line"><span class="comment"># transcript = openai.Audio.transcribe(&quot;whisper-1&quot;, audio_file) #音频转录</span></span><br><span class="line"><span class="built_in">print</span>(transcript)</span><br></pre></td></tr></table></figure><p>这里转录了一段我室友梦话😎，没有在代码里面解析unicode编码，去网上随便解析了一手</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235327714.png" alt="image-20230305235327714"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235546293.png" alt="image-20230305235546293"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>官方文档里还有部分api就不做演示了，有些功能我自己也没玩明白。如果有兴趣就自己去研究研究文档。体验chatgpt的强大，不得不说这真能打！！人类要大面积失业了！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> ChatGpt </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明日方舟MAA脚本使用</title>
      <link href="/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h1><h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h2><p><a href="https://maa.plus/">MaaAssistantArknights</a></p><p>前面是下载链接，后面是使用文档，可以查看模拟器支持。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133112717.png" alt="image-20230211133112717"></p><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h1><p>解压下载文件后点击启动</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133433485.png" alt="image-20230211133433485"></p><p>可以看到最初页面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133517036.png" alt="image-20230211133517036"></p><p>先去<strong>设置里面设置</strong>连接设置，就是你的模拟器名。还有游戏设置里面的客户端类型设置，b服就选择b服，管服就是管服。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133858837.png" alt="image-20230211133858837"></p><p>模拟器建议先看看官方文档里面的<a href="https://maa.plus/docs/1.3-%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%94%AF%E6%8C%81.html">模拟器型号支持</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134225656.png" alt="image-20230211134225656"></p><p>我最开始用的雷电模拟器发现确实有很多问题，最后用的官方推荐的蓝叠。如果里面没有任何一款你用的模拟器你就选择通用模式或者兼容模式</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133931325.png" alt="image-20230211133931325"></p><h2 id="1-一键长草"><a href="#1-一键长草" class="headerlink" title="1.一键长草"></a>1.一键长草</h2><p>这是最主要也用得最多的功能。点击全选会帮你把除肉鸽和生息演算之外的勾上，毕竟这两个人为要求高。右边可以根据你的需要设置理智药的量或者碎石次数等等。比如最常见的刷土就在关卡指定上面选择1-7。不过这都是些常用的如果打活动需要用到后面的自动战斗。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134848657.png"></p><p>最后点下面的link star等待脚本运行</p><h2 id="2-自动肉鸽"><a href="#2-自动肉鸽" class="headerlink" title="2.自动肉鸽"></a>2.自动肉鸽</h2><p>自动肉鸽需要先去设置-&gt;肉鸽设置选择你的肉鸽类型，水月或者愧影。<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135145864.png" alt="image-20230211135145864"></p><p>等等一些需求根据自己设置上。然后依旧点击link star开始脚本</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135523891.png" alt="image-20230211135523891"></p><h2 id="3-生息演算"><a href="#3-生息演算" class="headerlink" title="3.生息演算"></a>3.生息演算</h2><p>生息演算需要在游戏内操作几步。<a href="https://www.bilibili.com/video/BV1py4y1R7bH">图文看不懂的点这里（转载b站）</a></p><p>首先进入生息演算并且开始演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135954870.png" alt="image-20230211135954870"></p><p>随便选择一个干员（没有练度要求），补充体力后推出</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140030276.png" alt="image-20230211140030276"></p><p>放弃演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140137459.png" alt="image-20230211140137459"></p><p>最后勾上生息演算点击开始就行<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140230394.png" alt="image-20230211140230394"></p><h2 id="4-自动战斗"><a href="#4-自动战斗" class="headerlink" title="4.自动战斗"></a>4.自动战斗</h2><p>自动战斗是打具体关卡，活动用的。</p><p>首先你得先去找到<a href="https://prts.plus/">作业代码</a>，以这里以刷土关的例子</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140705729.png" alt="image-20230211140705729"></p><p>打开然后复制右上角的神秘代码</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140746210.png" alt="image-20230211140746210"></p><p>或者下载原json</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140840118.png" alt="image-20230211140840118"></p><p>如果你使用神秘代码显示请求网络错误那么建议你下载json文件，然后选择作业文件地址到上面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211141317927.png" alt="image-20230211141317927"></p><p><strong>注意一下，没有助战就勾上自动编队</strong></p><p>不过用了几个作业发现还是有很多问题，比如干员没有部署，或者没有带上。如果一步没有完成脚本可能会卡住，关于这点我不知道是谁的问题。</p><h2 id="5-其他功能"><a href="#5-其他功能" class="headerlink" title="5.其他功能"></a>5.其他功能</h2><p>这里就不太多介绍了，摸索一下都是一眼就能看明白这么用的。本教程本身就很傻瓜，甚至看完下载就不用接着往后面看，看完还说那你能帮帮我吗，这里我建议找我去帮你去医院挂个号。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 明日方舟 </tag>
            
            <tag> MAA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
