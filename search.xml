<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PYTHON装饰器如何用</title>
      <link href="/year/06/13/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/year/06/13/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-高阶函数"><a href="#1-高阶函数" class="headerlink" title="1. 高阶函数"></a>1. 高阶函数</h1><p>​    py是一个具有面向对象编程特性的语言，所以在py里面一切都可以当成对象来看，包括int这种整形，即使是函数也是对象也是object。</p><blockquote><p>熟知道的java其实不是纯面向对象，因为在java里面int类型并不是一个类能实例出来的，所以java有了integer这种包装类来去封装int，来让int具有面向对象的属性。</p></blockquote><p>首先来看一个最简单函数-两数求和编译后的字节码</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612212607522.png" alt="image-20240612212607522"></p><p>函数体保存的代码的运行逻辑。再看上面的</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612213051112.png" alt="image-20240612213051112"></p><p>简单来说，我们定义函数其实也就是定义变量，变量的值就是一个function object。如上图，我们最后会将最后的function object给到一个add的变量里。所以打印函数名出来的结果就是他的类名+地址</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612213440179.png" alt="image-20240612213440179"></p><p>在py里面任何对象都可以调用，但是这个对象不是callable的话它能编译成功，但是会运行时报错。就比如<code>1()</code>，调用数字1。</p><blockquote><p>用callable函数可以判断一个对象能否被调用</p></blockquote><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612220441725.png" alt="image-20240612220441725"></p><p>​        明白在py里面任何东西皆为对象，任何对象皆可以被赋值给变量。就可以很清楚明白即使是函数也可以当作参数被传递，当作值被返回。这也是py有函数式编程语言特性的原因，而上面这个特性叫做<strong>高阶函数</strong>。</p><h1 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h1><p>​    闭包指的是：<strong>在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数。</strong></p><p>此时，把这个使用外部函数变量的内部函数，就称为闭包。</p><p>​    我们发现：当调用完函数后，函数内定义的变量就销毁了。但是闭包可以保存函数内的变量，而不会随着调用完函数而被销毁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包的使用</span></span><br><span class="line"><span class="comment"># 格式:函数嵌套</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="comment"># 外部函数的业务,此处业务代码不会对外开发，最后返回的是一个函数对象给外部。做过后端的都明白这里是什么意思。</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(): <span class="comment"># 闭包函数  可以对外部函数的变量进行操作，并且可以保留外部变量值</span></span><br><span class="line">        <span class="comment"># 内部函数业务</span></span><br><span class="line">        res = a+<span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">return</span> func2   <span class="comment"># 返回值是一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># func1() 执行完成后 返回一个函数被f接收，现在f就相当于是func2函数</span></span><br><span class="line">f = func1()</span><br><span class="line">f()  <span class="comment"># 执行闭包函数  闭包函数中对a变量进行处理，此时，func1中的变量a在func1执行后不会被销毁</span></span><br></pre></td></tr></table></figure><p>​    闭包是函数式编程中一个非常重要的工具，它使得函数可以捕获和维护状态，同时保持函数的纯度和无副作用的特性。闭包的存在极大地增强了函数式编程语言的表达能力和灵活性。</p><h1 id="3-装饰器"><a href="#3-装饰器" class="headerlink" title="3. 装饰器"></a>3. 装饰器</h1><p>​    为什么前面说了那么多，到这才开始谈装饰器。因为装饰器的实现离不开上面两个特性。先从一个极简的py装饰器代码开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果会打印hello</span></span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612224415380.png" alt="image-20240612224415380"></p><p>被装饰器<code>@deco</code>所修饰代码完全等价于以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func_test = deco(func_test) <span class="comment">#调用deco，传入fun_test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_test)</span><br></pre></td></tr></table></figure><p>​    所以装饰器本质就是一个<strong>传入参数可以是函数返回结果也可以是或不是函数的函数</strong>，而此处的<code>@deco</code>无非是py里面的一个语法糖而已，可以被<code>func_test = deco(func_test)</code>完全等价。逻辑就是func_test这个函数作为值传入deco，最后deco函数返回一个hello，func_test接收hello。</p><blockquote><p>在说一个小知识点</p></blockquote><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240612225244995.png" alt="image-20240612225244995"></p><p>为什么这里会打印hello，明明没有写任何调用语句</p><p>@deco 语法糖装饰 func_test 函数时，deco 函数会被立即调用，传入 func_test 作为参数。在 deco 函数体内，第一行就是打印语句 print(“hello”)，所以这段文字会被输出到控制台。</p><h2 id="3-1-开始进阶"><a href="#3-1-开始进阶" class="headerlink" title="3.1 开始进阶"></a>3.1 开始进阶</h2><p>下面写一个逻辑，要求在不改变原函数的情况下，能通过原函数输出出原函数的执行时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始执行函数&#x27;</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        fun()</span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束执行函数&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;函数执行时间<span class="subst">&#123;stop-start&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;被修饰的函数业务代码。。。。。&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">func_test() <span class="comment">#调用</span></span><br></pre></td></tr></table></figure><p>一样，被语法糖<code>@deco</code>修饰的代码可以完全等价于<code>func_test = deco(func_test)</code>。但是此时deco函数返回的是他内部的inner函数，即func_test最后被接收的是被deco函数返回的inner函数，即func_test这个变量引用了内存地址上一个新function object对象。这里的inner函数就是所谓的<strong>闭包</strong>函数。</p><p>打印地址可以看到，他在内存地址上的名是deco.inner</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613085932355.png" alt="image-20240613085932355"></p><p>既然是函数，那么我也可以直接用（）进行匿名调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deco(func_test)()</span><br><span class="line"><span class="comment">#结果是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">但是没有特定需求，就不要即用语法糖又用了这种deco(func_test)，如果你的代码里面同时有这两种写法，那么相当于以下这种情况</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@deco </span><span class="comment">#被修饰两次，因为语法糖的使用，deco 函数会被立即调用一次</span></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;被修饰的函数业务代码。。。。。&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-通用装饰器"><a href="#3-2-通用装饰器" class="headerlink" title="3.2 通用装饰器"></a>3.2 通用装饰器</h2><p>有了以上知识，我们可以设置一个通用装饰器，来处理大部分业务逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">装饰器函数的内部函数通过不定长参数进行传参 *args **kwargs</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 定义装饰器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;新增加的业务功能代码--before&quot;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;新增加的业务功能代码--after&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>有一种spring aop的既视感，功能可能有点相似，但两种的设计模式不一样，一个是代理模式，一个是装饰者模式。</p><p>实例：为相加运算函数增加打印运行时间功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始执行函数&#x27;</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束执行函数&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;函数执行时间<span class="subst">&#123;stop-start&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_sum</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        arg += arg</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line">func_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613113628618.png" alt="image-20240613113628618"></p><h2 id="3-3-带有参数的装饰器-语法糖等价规则"><a href="#3-3-带有参数的装饰器-语法糖等价规则" class="headerlink" title="3.3 带有参数的装饰器-语法糖等价规则"></a>3.3 带有参数的装饰器-语法糖等价规则</h2><p>​    说到这里，大家都很了解怎么用了，但是有个迷点可能被忽略了。我上文说装饰器本质就是一个<strong>传入参数可以是函数返回结果也可以是或不是函数的函数</strong>，那如果我这个函数没有传入参数也没有返回参数呢？如下面这种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;装饰器业务代码&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f_t</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行肯定会报错</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613160810031.png" alt="image-20240613160810031"></p><p>但报错原因是明明不需要获取参数但我传了一个，根据语法糖等价，我们可以把<code>@f</code>等价成这个段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;装饰器业务代码&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f_t</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f_t = f(f_t)</span><br></pre></td></tr></table></figure><p>很显然，我的装饰器函数没有形参，但我依旧传了一个进去。如何不进行传参？可以这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;装饰器业务代码&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@f() </span><span class="comment">#加一个括号说明装饰器不传参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f_t</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>此时装饰器里面的代码可以进行输出了，但又会报一个错，为什么？</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613161556497.png" alt="image-20240613161556497"></p><p>还是老套路，语法糖等价回去，一眼顶真。但此时可就有点变化了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;装饰器业务代码&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f_t</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#@f 等于</span></span><br><span class="line">f_t = f()(f_t)</span><br></pre></td></tr></table></figure><p>那么报错原因就很明显，我<code>f()</code>没有返回值，那么继续调用肯定会报上面的错误。那么根据这些归纳，我们可以得出语法糖的规则就是：</p><ol><li>如果没有括号，那么默认将被修饰函数当作参数传入装饰器</li><li>如果有括号，那就就将括号里面的值逐层（函数嵌套的层数）进行值的传入，直到括号的个数和层数相同，再将被修饰函数当作参数传入下一层，之后返回这一层的结果覆盖被装饰函数。</li></ol><p>实施一下，定义一个嵌套4层的装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco_l1</span>(<span class="params">a_1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一层装饰器业务代码&#x27;</span>,a_1)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deco_l2</span>(<span class="params">a_2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第二层装饰器业务代码&#x27;</span>,a_2)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">deco_l3</span>(<span class="params">fun_test</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第三层装饰器业务代码&#x27;</span>)</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">deco_l4</span>(): <span class="comment">#此层函数就相当于最后需要返回给被装饰函数的接收对象了</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;最终装饰业务&#x27;</span>)</span><br><span class="line">                fun_test()</span><br><span class="line">            <span class="keyword">return</span> deco_l4</span><br><span class="line">        <span class="keyword">return</span> deco_l3</span><br><span class="line">    <span class="keyword">return</span> deco_l2</span><br></pre></td></tr></table></figure><p>然后对一个函数进行装饰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法糖</span></span><br><span class="line"><span class="comment"># @deco_l1(&#x27;第一层参数&#x27;)(&#x27;第二层参数&#x27;) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试被装饰函数&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#语法糖等价</span></span><br><span class="line">fun_test = deco_l1(<span class="string">&#x27;第一层参数&#x27;</span>)(<span class="string">&#x27;第二层参数&#x27;</span>)(fun_test)</span><br><span class="line"></span><br><span class="line">fun_test()</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613171358307.png" alt="image-20240613171358307"></p><p>内存上的函数名</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613172230263.png" alt="image-20240613172230263"></p><p>如果有三层只传到第二层</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240613203816237.png" alt="image-20240613203816237"></p><p>理解原理，依此类推，语法糖的规则就很简单。</p><h1 id="4-内置装饰器"><a href="#4-内置装饰器" class="headerlink" title="4. 内置装饰器"></a>4. 内置装饰器</h1><p>除了我们可以自定义装饰器以外，py当然也有自己自带的装饰器。下面随便举几个例子，不一一概述。</p><ol><li><p>**<code>functools.lru_cache</code>**，记忆化装饰器，用于缓存函数的最近使用的结果，避免重复计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"><span class="comment"># 计算斐波那契数列的第 n 项</span></span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="literal">None</span></span>)  </span><span class="comment"># maxsize=None 表示缓存大小没有限制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">10</span>))  <span class="comment"># 直接计算</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">10</span>))  <span class="comment"># 从缓存中获取结果</span></span><br></pre></td></tr></table></figure></li><li><p><code>@functools.wraps</code>,用于保留被装饰函数的元数据，如函数名、文档字符串、注解和模块名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco_l1</span>(<span class="params">a_1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一层装饰器业务代码&#x27;</span>,a_1)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deco_l2</span>(<span class="params">a_2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第二层装饰器业务代码&#x27;</span>,a_2)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">deco_l3</span>(<span class="params">fun_test1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第三层装饰器业务代码&#x27;</span>)</span><br><span class="line"><span class="meta">            @functools.wraps(<span class="params">fun_test1</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">deco_l4</span>(): <span class="comment">#此层函数就相当于最后需要返回给被装饰函数的接收对象了</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;最终装饰业务&#x27;</span>)</span><br><span class="line">                fun_test()</span><br><span class="line">            <span class="keyword">return</span> deco_l4</span><br><span class="line">        <span class="keyword">return</span> deco_l3</span><br><span class="line">    <span class="keyword">return</span> deco_l2</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法糖</span></span><br><span class="line"><span class="meta">@deco_l1(<span class="params"><span class="string">&#x27;第一层参数&#x27;</span></span>)(<span class="params"><span class="string">&#x27;第二层参数&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试被装饰函数&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 会打印fun_test不如不加则会打印deco_l4</span></span><br><span class="line">fun_test.__name__</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-有什么用"><a href="#5-有什么用" class="headerlink" title="5. 有什么用"></a>5. 有什么用</h1><ol><li>提高代码复用，避免冗余。如果有多个代码需要计算执行时间，只需要用装饰器修饰而不用一一再去添加。</li><li>保证主业务代码和装饰代理的逻辑清晰，避免模糊，方便维护</li><li>通过装饰器可以扩展别人的函数，避免对源代码的修改。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive从0到1</title>
      <link href="/year/04/21/Hive%E4%BB%8E0%E5%88%B01/"/>
      <url>/year/04/21/Hive%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive入门"><a href="#Hive入门" class="headerlink" title="Hive入门"></a>Hive入门</h1><p>官方wiki<a href="https://cwiki.apache.org/confluence/display/Hive/">Home - Apache Hive - Apache Software Foundation</a></p><h2 id="SQL、Hive和MapReduce的关系"><a href="#SQL、Hive和MapReduce的关系" class="headerlink" title="SQL、Hive和MapReduce的关系"></a>SQL、Hive和MapReduce的关系</h2><p>MapReduce：分布式计算框架。</p><p>Hive：MapReduce的客户端。这种客户端可以运行用户直接编写SQL语句（而不是写MapReduce代码），Hive可以把这种SQL转换为MapReduce代码来执行，从而提升了开发效率。</p><p>也就是说，如果没有Hive，用户只能写MapReduce代码来开发了。这样开发效率就会大大降低。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412201614101.png" alt="image-20240412201614101"></p><p>结论：用户在Hive上编写SQL语句，Hive把SQL语句转为MapReduce程序去执行。</p><h2 id="Hive架构映射流程"><a href="#Hive架构映射流程" class="headerlink" title="Hive架构映射流程"></a>Hive架构映射流程</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412201651352.png" alt="image-20240412201651352"></p><ol><li>用户接口</li></ol><p>包括 CLI、JDBC/ODBC、WebGUI。其中，CLI(command line interface)为shell命令行；<br>Hive中的Thrift服务器允许外部客户端通过网络与Hive进行交互，类似于JDBC或ODBC协议。WebGUI是通过浏览器访问Hive。<br>Hive提供了 Hive Shell、 ThriftServer等服务进程向用户提供操作接口</p><ol start="2"><li>Driver</li></ol><p>Driver包括语法解析器、计划编译器、优化器、执行器<br>作用：完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。<br>生成的查询计划存储在HDFS中，并在随后有MapReduce调用执行。<br>注意：这部分内容不是具体的服务进程，而是封装在Hive所依赖的Jar包中Java代码中。</p><ol start="3"><li>元数据</li></ol><p>元数据包含：用Hive创建的database、table、表的字段等元信息。<br>元数据存储：存在关系型数据库中。如：hive内置的Derby数据库或者第三方MySQL数据库等，一般使用MySQL数据库。</p><ol start="4"><li>metastore</li></ol><p>Metastore：即元数据存储服务，<br>作用：客户端连接metastore服务，metastore再去连接MySQL等数据库来存取元数据。<br>特点：有了metastore服务，就可以有多个客户端同时连接，而且这些客户端不需要知道MySQL等数据库的用户名和密码，只需要连接metastore 服务即可。</p><h2 id="MetaStore元数据管理三种模式"><a href="#MetaStore元数据管理三种模式" class="headerlink" title="MetaStore元数据管理三种模式"></a>MetaStore元数据管理三种模式</h2><p>metastore服务配置有3种模式: <strong>内嵌模式、本地模式、远程模式</strong></p><p><strong>推荐使用: 远程模式</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412201920942.png" alt="image-20240412201920942"></p><ol><li><p>内嵌模式<br>优点: 配置简单 hive命令直接可以使用<br>缺点: 不适用于生产环境,derby和Metastore服务都嵌入在主Hive Server进程中,一个服务只能被一个客户端连接(如果用两个客户端以上就非常浪费资源),且元数据不能共享</p></li><li><p>本地模式<br>优点：可以单独使用外部的数据库(mysql),元数据共享<br>缺点：相对浪费资源,metastore嵌入到了hive进程中,每启动一次hive服务，都内置启动了一个metastore。</p></li><li><p>远程模式<br>优点：可以单独使用外部库(mysql),可以共享元数据,本地可以连接metastore服务也可以连接hiveserver2服务,增加了扩展性(其他依赖hive的软件都可以通过Metastore访问hive)<br>缺点：需要注意的是如果想要启动hiveserver2服务需要先启动metastore服务</p></li></ol><h2 id="Hive服务操作"><a href="#Hive服务操作" class="headerlink" title="Hive服务操作"></a>Hive服务操作</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412202613088.png" alt="image-20240412202613088"></p><h3 id="启动Hive服务"><a href="#启动Hive服务" class="headerlink" title="启动Hive服务"></a>启动Hive服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0.切换路径</span></span><br><span class="line"><span class="built_in">cd</span> /export/server/hive</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.启动metastore服务</span></span><br><span class="line"><span class="built_in">nohup</span> bin/hive --service metastore &amp;</span><br><span class="line"><span class="built_in">nohup</span> bin/hive --service metastore &gt; /tmp/hive-metastore.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.启动Hiveserver2服务</span></span><br><span class="line"><span class="built_in">nohup</span> bin/hive --service hiveserver2 &amp;</span><br><span class="line"><span class="built_in">nohup</span> bin/hive --service hiveserver2 &gt; /tmp/hive-hiveserver2.<span class="built_in">log</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.校验Hive是否启动</span></span><br><span class="line">jps</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">Hiveserver2服务的启动需要等待一段时间，也就是说，虽然上述jps命令校验能看到进程，但是不代表Hiveserver2就启动成功了。</span><br><span class="line">要想确保Hiveserver2已经启动OK，最稳妥的办法就是查看端口是否占用。</span><br><span class="line">metastore服务，如果正常运行，会占用9083端口，而Hiveserver2服务，如果正常运行，会占用10000端口。</span><br><span class="line">因此，也可以通过命令来校验这2个端口是否被占用，来进一步判断Hive是否启动OK。</span><br><span class="line">netstat -naltp | grep 9083</span><br><span class="line">netstat -naltp | grep 10000</span><br></pre></td></tr></table></figure><p>端口校验metastore服务：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412202635326.png" alt="image-20240412202635326"></p><p>端口校验Hiveserver2服务：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412202643979.png" alt="image-20240412202643979"></p><h3 id="关闭Hive服务"><a href="#关闭Hive服务" class="headerlink" title="关闭Hive服务"></a>关闭Hive服务</h3><p>Hive的关闭，没有提供优雅关闭命令，只能通过<code>kill -9</code>的方式杀死进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.找到Hive进程，进程名为RunJar</span></span><br><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.杀死Hive进程</span></span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>编辑<code>/etc/profile</code>文件，添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HIVE_HOME</span></span><br><span class="line">export HIVE_HOME=/export/server/apache-hive-3.1.2-bin #你的hive/bin路径</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin:$HIVE_HOME/sbin</span><br></pre></td></tr></table></figure><p>保存退出，然后source /etc/profile一下即可在任何地方访问Hive。</p><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><h3 id="第一代客户端连接Hive"><a href="#第一代客户端连接Hive" class="headerlink" title="第一代客户端连接Hive"></a>第一代客户端连接Hive</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.切换路径</span></span><br><span class="line"><span class="built_in">cd</span> /export/server/hive</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.连接Hive</span></span><br><span class="line">bin/hive</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.输入Hive命令（和MySQL类似）</span></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.退出Hive</span></span><br><span class="line"><span class="built_in">exit</span>; 或者 quit;</span><br></pre></td></tr></table></figure><p><strong>注意：第一代客户端连接Hive，只需要保证metastore服务启动即可</strong>。</p><h3 id="第二代客户端连接Hive"><a href="#第二代客户端连接Hive" class="headerlink" title="第二代客户端连接Hive"></a>第二代客户端连接Hive</h3><p><a href="https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients">HiveServer2 Clients - Apache Hive - Apache Software Foundation</a>,通过beeline连接HiveServer2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.切换路径</span></span><br><span class="line"><span class="built_in">cd</span> /export/server/hive</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.连接Hive</span></span><br><span class="line">bin/beeline</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.输入连接串</span></span><br><span class="line">!connect jdbc:hive2://node1:10000</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.输入用户名和密码</span></span><br><span class="line">用户名：root</span><br><span class="line">密码：无</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.输入Hive命令（和MySQL类似）</span></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.退出Hive</span></span><br><span class="line">:quit 或 :<span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><strong>注意：第二代客户端连接Hive，需要保证metastore服务和hiveserver2服务都启动才行。</strong></p><h3 id="第三方SQL客户端工具连接Hive服务"><a href="#第三方SQL客户端工具连接Hive服务" class="headerlink" title="第三方SQL客户端工具连接Hive服务"></a>第三方SQL客户端工具连接Hive服务</h3><p>第三方SQL客户端工具非常多，比如DataGrip，DBeaver等。在这里，我们可以使用业绩非常流行的DataGrip工具来连接Hive。</p><p>创建连接Hive</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412202925579.png" alt="image-20240412202925579"></p><p>填写连接信息</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412202940433.png" alt="image-20240412202940433"></p><p>配置驱动jar包</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412203009960.png" alt="image-20240412203009960"></p><p>删除默认的Jar，点击<code>+</code>号配置驱动Jar，如下图：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412203029135.png" alt="image-20240412203029135"></p><p>配置完后，如下图所示：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412203311750.png" alt="image-20240412203311750"></p><p>测试连接</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240412203326761.png" alt="image-20240412203326761"></p><p>点击<code>Apply</code>，点击<code>OK</code>，到此，DataGrip连接Hive完成。</p><h2 id="简单操作一下"><a href="#简单操作一下" class="headerlink" title="简单操作一下"></a>简单操作一下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--创建表</span><br><span class="line">create table test(id int, name string, gender string);</span><br><span class="line"></span><br><span class="line">--插入数据,官方不建议这样插入数据所以会有一个小报错不要管，后面会用load来插入大量数据</span><br><span class="line">insert into test values(1, ‘王力红’, ‘男’), (2, ‘周杰轮’, ‘男’), (3, ‘林志灵’, ‘女’);</span><br><span class="line"></span><br><span class="line">--查询数据</span><br><span class="line">select gender, count(*) as cnt from test group by gender;</span><br><span class="line"></span><br><span class="line">---验证Hive的数据存储位置,数据存储在HDFS上，默认路径是：/user/hive/warehouse</span><br><span class="line"></span><br><span class="line">--验证SQL启动的MapReduce任务,打开YARN的WebUI，http://node1:8088，即可查看任务的运行情况</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Hive表操作"><a href="#Hive表操作" class="headerlink" title="Hive表操作"></a>Hive表操作</h1><h2 id="Hive的内-外表创建"><a href="#Hive的内-外表创建" class="headerlink" title="Hive的内,外表创建"></a>Hive的内,外表创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(字段名 字段类型 , 字段名 字段类型 , ... ) #默认下是内部部，不加<span class="keyword">external</span>关键字</span><br><span class="line">[partitioned <span class="keyword">by</span> (分区字段名 分区字段类型)] #分区表固定格式</span><br><span class="line">[clustered <span class="keyword">by</span> (分桶字段名)  <span class="keyword">into</span> 桶个数 buckets]  #分桶表固定格式 注意: 可以排序[sorted <span class="keyword">by</span> (排序字段名 <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>)]</span><br><span class="line">[<span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;字段分隔符&#x27;</span>] #自定义字段分隔符固定格式</span><br><span class="line">[stored <span class="keyword">as</span> textfile]  #默认即可</span><br><span class="line">[location <span class="string">&#x27;hdfs://域名:8020/user/hive/warehouse/库名.db/表名&#x27;</span>] #默认即可</span><br><span class="line">; #注意: 最后一定加分号结尾</span><br><span class="line"></span><br><span class="line">#注意: 关键字顺序是从上到下从左到右，否则报错</span><br><span class="line">#<span class="keyword">default</span>默认库存储路径:  <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse   </span><br><span class="line">#自定义库在HDFS的默认存储路径:<span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>库名.db</span><br><span class="line">#自定义表在HDFS的默认存储路径:<span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>库名.db<span class="operator">/</span>表名</span><br><span class="line">#业务数据文件在HDFS的默认存储路径:<span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>库名.db<span class="operator">/</span>表名<span class="operator">/</span>数据文件</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p><strong>基本数据类型</strong><br>整数：int<br>小数：float double<br>字符串：string varchar(长度)<br>日期：date timestamp</p></li><li><p><strong>复杂数据类型（很少使用）</strong><br>集合：array<br>映射：map<br>结构体：struct<br>联合体：union（不成熟，基本不用）</p></li></ol><h2 id="表分类"><a href="#表分类" class="headerlink" title="表分类"></a>表分类</h2><p>Hive中的表，可以分为两类：内部表和外部表。</p><ol><li><p><strong>内部表(管理表)</strong><br>又称为MANAGED_TABLE（管理表），它可以创建分区表或者分桶表。</p></li><li><p><strong>外部表</strong><br>也可以称为非管理表：EXTERNAL_TABLE，它同样可以创建分区表或者分桶表。</p></li><li><p><strong>区别</strong></p><p>内部表：未被external关键字修饰的即是内部表， 即普通表。 内部表又称管理表,还可以叫托管表<br>删除内部表:直接删除元数据（metadata）和存储数据本身外部表：被external关键字修饰的即是外部表， 即关联表。 还可以叫非管理表或非托管表<br>删除外部表:仅仅是删除元数据（metadata），不会删除存储数据本身</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 内部表(又叫管理表或者托管表)</span><br><span class="line">create table stu1(</span><br><span class="line">    id int,</span><br><span class="line">    name string</span><br><span class="line">);</span><br><span class="line">-- 外部表(又叫非管理表,非托管表)</span><br><span class="line">create external table stu2(</span><br><span class="line">    id int,</span><br><span class="line">    name string</span><br><span class="line">);</span><br><span class="line">-- 查看表结构</span><br><span class="line">desc stu1;</span><br><span class="line">desc stu2;</span><br><span class="line">-- 查看表格式化信息</span><br><span class="line">desc formatted stu1; -- 内部表类型: managed_table</span><br><span class="line">desc formatted stu2; -- 外部表类型: external_table</span><br><span class="line"></span><br><span class="line">-- 演示内外部表的重点区别</span><br><span class="line">-- 删除内部表(管理表/托管表),会删除表相关的所有数据</span><br><span class="line">insert into stu1 values(1,&#x27;张三&#x27;);</span><br><span class="line">drop table stu1;</span><br><span class="line">-- 删除外部表,只删除了元数据,hdfs中业务数据保留</span><br><span class="line">insert into stu2 values(1,&#x27;张三&#x27;);</span><br><span class="line">drop table stu2;</span><br><span class="line">-- 再次建表后,可以使用location重新关联原来hdfs保留的业务数据</span><br><span class="line">create external table stu22(</span><br><span class="line">    id int,</span><br><span class="line">    name string</span><br><span class="line">)location &#x27;/user/hive/warehouse/hive1.db/stu2&#x27;;</span><br><span class="line">-- 验证数据</span><br><span class="line">select * from stu22 limit 10;</span><br></pre></td></tr></table></figure><h2 id="查看-修改表"><a href="#查看-修改表" class="headerlink" title="查看/修改表"></a>查看/修改表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#查看所有表</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line">#查看建表语句</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line">#查看表结构信息</span><br><span class="line"><span class="keyword">desc</span> 表名; </span><br><span class="line"></span><br><span class="line">#查看表格式化信息</span><br><span class="line"><span class="keyword">desc</span> formatted 表名;</span><br><span class="line">formatted能够展示详细信息</span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename <span class="keyword">to</span> 新表名</span><br><span class="line"></span><br><span class="line">#字段的添加</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> columns (字段名 字段类型);</span><br><span class="line"></span><br><span class="line">#字段的替换</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 replace columns (字段名 字段类型 , ...);</span><br><span class="line"></span><br><span class="line">#字段名和字段类型同时修改</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 新字段类型;</span><br><span class="line">字符串类型不能直接改数值类型</span><br><span class="line"></span><br><span class="line">#修改表路径</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">set</span> location <span class="string">&#x27;hdfs中存储路径&#x27;</span>;</span><br><span class="line">建议使用默认路径。</span><br><span class="line">location有默认路径<span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>库名.db<span class="operator">/</span>表名。当然建表的时候也可以直接指定路径</span><br><span class="line"></span><br><span class="line">#修改表属性</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">set</span> tblproperties (<span class="string">&#x27;属性名&#x27;</span><span class="operator">=</span><span class="string">&#x27;属性值&#x27;</span>);     注意: 经常用于内外部表切换</span><br><span class="line"></span><br><span class="line">#内外部表类型切换</span><br><span class="line">外部表属性：<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;TRUE&#x27;</span></span><br><span class="line">内部表属性：<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;FALSE&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>创建表的时候，如果不指定分隔符，以后表只能识别默认的分隔符，键盘不好打印，展示形式一般为:\0001,SOH,^A,□</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认分隔符: 创建表的时候不指定就代表使用默认分隔符</span></span><br><span class="line"><span class="comment">-- 1.创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- insert方式插入数据,会自动使用默认分隔符把数据连接起来</span></span><br><span class="line"><span class="comment">-- 2.插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="comment">-- 3.验证数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu limit <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 当然也可以通过在hdfs中查看,默认分隔符是\0001,其他工具中也会展示为SOH,^A,口</span></span><br></pre></td></tr></table></figure><h3 id="快速映射表"><a href="#快速映射表" class="headerlink" title="快速映射表"></a>快速映射表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">创建表的时候指定分隔符: <span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> 表名(字段名 字段类型)<span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> 符号;</span><br><span class="line"></span><br><span class="line">加载数据: load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;结构化数据文件&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> products(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    price <span class="keyword">double</span>,</span><br><span class="line">    cid string</span><br><span class="line">)<span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 加载数据</span></span><br><span class="line"><span class="comment">-- 注意: 如果从hdfs中加载文件,本质就是移动文件到对应表路径下</span></span><br><span class="line">load data inpath <span class="string">&#x27;/source/products.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> products;</span><br><span class="line"><span class="comment">-- 验证数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> products limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="hvie的SerDe机制"><a href="#hvie的SerDe机制" class="headerlink" title="hvie的SerDe机制"></a>hvie的SerDe机制</h3><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416194628161.png" alt="image-20240416194628161"></p><p>其中ROW FORMAT是语法关键字，DELIMITED和SERDE二选其一。</p><p>如果使用delimited: 表示底层默认使用的Serde类:LazySimpleSerDe类来处理数据。<br>如果使用serde:表示指定其他的Serde类来处理数据,支持用户自定义SerDe类。</p><h4 id="Delimited"><a href="#Delimited" class="headerlink" title="Delimited"></a>Delimited</h4><p>Hive默认的序列化类: LazySimpleSerDe<br>包含4种子语法，分别用于指定字段之间、集合元素之间、map映射 kv之间、换行的分隔符号。<br>在建表的时候可以根据数据的类型特点灵活搭配使用。<br>COLLECTION ITEMS TERMINATED BY ‘分隔符’ : 指定集合类型（array）/结构类型(struct)元素的分隔符<br>MAP KEYS TERMINATED BY ‘分隔符’ : 表示映射类型(map)键值对之间用的分隔</p><h4 id="SERDE"><a href="#SERDE" class="headerlink" title="SERDE"></a>SERDE</h4><p>serde给用户提供了自定义分隔符的功能，具体细节给出官网。<a href="https://cwiki.apache.org/confluence/display/Hive/SerDe">SerDe - Apache Hive - Apache Software Foundation</a></p><p>这里仅仅介绍正则序列化</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416195342147.png" alt="image-20240416195342147"></p><p>load数据</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/5089c4ac8fe08d7ca614042d366c16c.png" alt="5089c4ac8fe08d7ca614042d366c16c"></p><p>可以看出如果这里用”-“分割，那么后面的时间字段就会被分割成三个。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 采用正则解决</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table</span><br><span class="line">(</span><br><span class="line">    id          STRING,</span><br><span class="line">    code        STRING,</span><br><span class="line">    BORROW_DATE STRING</span><br><span class="line">)</span><br><span class="line">    <span class="type">ROW</span> FORMAT SERDE <span class="string">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class="line">        <span class="keyword">WITH</span> SERDEPROPERTIES (</span><br><span class="line">        &quot;input.regex&quot; <span class="operator">=</span> &quot;(\\d+)-(\\d+)-(\\d+-\\d+-\\d+)&quot; # 每个括号代表一个取值字段</span><br><span class="line">        )</span><br><span class="line">    STORED <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/home/lk_1/borrow_log.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> my_table;</span><br></pre></td></tr></table></figure><p>在如果你想以多字符来当分割符，那么也可以采用正则。又或者使用多分隔符序列化类来</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416200415215.png" alt="image-20240416200415215"></p><p>‘org.apache.hadoop.hive.contrib.serde2.MultiDelimitSerDe’</p><h2 id="文件数据导入"><a href="#文件数据导入" class="headerlink" title="文件数据导入"></a>文件数据导入</h2><h3 id="load导入数据到hive表"><a href="#load导入数据到hive表" class="headerlink" title="load导入数据到hive表"></a>load导入数据到hive表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>从HDFS上传文件到对应路径</span><br><span class="line">load data inpath <span class="string">&#x27;HDFS文件路径&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>从linux本地上传到表对应存储路径</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;Linux文件路径&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="insert插入数据"><a href="#insert插入数据" class="headerlink" title="insert插入数据"></a>insert插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#从其他表查询数据<span class="string">&#x27;追加&#x27;</span>插入到当前表中: </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> [<span class="keyword">table</span>] 表名 <span class="keyword">select</span> 语句;</span><br><span class="line"></span><br><span class="line">#从其他表查询数据<span class="string">&#x27;覆盖&#x27;</span>插入到当前表中: </span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> 表名 <span class="keyword">select</span> 语句;</span><br></pre></td></tr></table></figure><h2 id="文件数据导出"><a href="#文件数据导出" class="headerlink" title="文件数据导出"></a>文件数据导出</h2><h3 id="直接下载文件"><a href="#直接下载文件" class="headerlink" title="直接下载文件"></a>直接下载文件</h3><p>web页面下载</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416191418070.png" alt="image-20240416191418070"></p><h3 id="get命令下载文件"><a href="#get命令下载文件" class="headerlink" title="get命令下载文件"></a>get命令下载文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 binzi]# hdfs dfs -get /user/hive/warehouse/hive02.db/search_log/search_log.txt /localpath</span><br></pre></td></tr></table></figure><h3 id="insert导出数据"><a href="#insert导出数据" class="headerlink" title="insert导出数据"></a>insert导出数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#查询数据导出到hdfs其他路径: </span><br><span class="line"><span class="keyword">insert</span> overwrite directory <span class="string">&#x27;hfds存储该数据路径&#x27;</span> <span class="keyword">select</span>语句;</span><br><span class="line"></span><br><span class="line">#查询数据导出到linux本地中: </span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;linux存储该数据路径&#x27;</span> <span class="keyword">select</span>语句;</span><br><span class="line"></span><br><span class="line">#注意:  overwrite默认是覆盖重写,所以在指定存储该数据路径的时候尽量指定一个空的目录</span><br><span class="line"></span><br><span class="line">#注意: 导出数据的时候不指定分隔符采用默认分隔符SOH,<span class="number">0001</span>,?...</span><br><span class="line"></span><br><span class="line">#导出数据指定分隔符添加: </span><br><span class="line"></span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;分隔符&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定分隔符</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;/output&#x27;</span></span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> search_log1;</span><br></pre></td></tr></table></figure><h3 id="hive-shell命令导出"><a href="#hive-shell命令导出" class="headerlink" title="hive shell命令导出"></a>hive shell命令导出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive命令执行sql语句:  hive -e &quot;sql语句&quot; &gt; 存储该结果数据的文件路径</span><br><span class="line"></span><br><span class="line">hive命令执行sql脚本:  hive -f sql脚本文件 &gt; 存储该结果数据的文件路径</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下命令都是在linux的shell命令行执行</span></span><br><span class="line"><span class="comment"># 3.1使用hive -e sql语句方式导出数据</span></span><br><span class="line">[root@node1 ~]<span class="comment"># hive -e &#x27;select * from hive02.search_log;&#x27; &gt; /home/hs1.txt</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cat hs1.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.2使用hive -f 脚本文件方式导出数据</span></span><br><span class="line">[root@node1 ~]<span class="comment"># echo &#x27;select * from hive02.search_log;&#x27; &gt; /home/export.sql</span></span><br><span class="line">[root@node1 ~]<span class="comment"># hive -f export.sql &gt; /home/hs2.txt</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cat hs2.txt</span></span><br></pre></td></tr></table></figure><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416192110780.png" alt="image-20240416192110780"></p><p><strong>分区表特点/好处：</strong>需要产生分区目录，查询的时候使用分区字段筛选数据，避免全表扫描从而提升查询效率。</p><p><strong>效率上注意</strong>：如果分区表，在查询数据的时候，如果没有使用分区字段去筛选数据，效率不会提升。</p><p><strong>分区字段名注意</strong>：分区字段名不能和原有字段名重复，因为分区字段名要作为字段拼接到表后。</p><h3 id="一级分区"><a href="#一级分区" class="headerlink" title="一级分区"></a>一级分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>创建分区表</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(字段名 字段类型 , 字段名 字段类型 , ... )partitioned <span class="keyword">by</span> (分区字段名 分区字段类型)... ; </span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>自动生成分区目录并插入数据</span><br><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;文件路径&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> 分区表名 <span class="keyword">partition</span> (分区字段名<span class="operator">=</span><span class="string">&#x27;值&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#注意: 如果加<span class="keyword">local</span>后面文件路径应该是linux本地路径,如果没有加那么就是hdfs文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示分区表</span></span><br><span class="line"><span class="comment">-- 1.一级分区表</span></span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> one_part_order(</span><br><span class="line">    oid string,</span><br><span class="line">    name string,</span><br><span class="line">    price <span class="keyword">double</span>,</span><br><span class="line">    num <span class="type">int</span></span><br><span class="line">)partitioned <span class="keyword">by</span> (<span class="keyword">year</span> string)</span><br><span class="line">    <span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">-- 加载数据</span></span><br><span class="line"><span class="comment">-- 先在hdfs的source目录下准备好订单相关数据文件</span></span><br><span class="line"><span class="comment">-- 使用load加载数据到分区表中</span></span><br><span class="line">load data inpath <span class="string">&#x27;/input/order202251.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> one_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2022</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/input/order2023415.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> one_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/input/order202351.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> one_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/input/order202352.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> one_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416193041609.png" alt="image-20240416193041609"></p><h3 id="多级分区"><a href="#多级分区" class="headerlink" title="多级分区"></a>多级分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建分区表: </span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(字段名 字段类型 , 字段名 字段类型 , ... )partitioned <span class="keyword">by</span> (一级分区字段名 分区字段类型, 二级分区字段名 分区字段类型 , ...) ; </span><br><span class="line"></span><br><span class="line">#自动生成分区目录并插入数据: </span><br><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;文件路径&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> 分区表名 <span class="keyword">partition</span> (一级分区字段名<span class="operator">=</span><span class="string">&#x27;值&#x27;</span>,二级分区字段名<span class="operator">=</span><span class="string">&#x27;值&#x27;</span> , ...);</span><br><span class="line"></span><br><span class="line">#注意: 如果加<span class="keyword">local</span>后面文件路径应该是linux本地路径,如果没有加那么就是hdfs文件路径</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2.多级分区表</span></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> multi_part_order(</span><br><span class="line">    oid string,</span><br><span class="line">    name string,</span><br><span class="line">    price <span class="type">float</span>,</span><br><span class="line">    num <span class="type">int</span></span><br><span class="line">)partitioned <span class="keyword">by</span> (<span class="keyword">year</span> string,<span class="keyword">month</span> string,<span class="keyword">day</span> string)</span><br><span class="line">    <span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">-- 加载数据</span></span><br><span class="line"><span class="comment">-- 思考数据文件在哪里?如果想从hdfs加载,怎么操作?上传到hdfs指定位置</span></span><br><span class="line">load data inpath <span class="string">&#x27;/source/order202251.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> multi_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2022</span>,<span class="keyword">month</span><span class="operator">=</span><span class="number">05</span>,<span class="keyword">day</span><span class="operator">=</span><span class="number">01</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/source/order202351.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> multi_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span>,<span class="keyword">month</span><span class="operator">=</span><span class="number">05</span>,<span class="keyword">day</span><span class="operator">=</span><span class="number">01</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/source/order202352.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> multi_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span>,<span class="keyword">month</span><span class="operator">=</span><span class="number">05</span>,<span class="keyword">day</span><span class="operator">=</span><span class="number">02</span>);</span><br><span class="line">load data inpath <span class="string">&#x27;/source/order2023415.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> multi_part_order <span class="keyword">partition</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span>,<span class="keyword">month</span><span class="operator">=</span><span class="number">04</span>,<span class="keyword">day</span><span class="operator">=</span><span class="number">15</span>);</span><br></pre></td></tr></table></figure><p>并不建议分区字段太多，太多反而更麻烦，可以直接用一个字段代替多个分区形式，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">year</span> string,<span class="keyword">month</span> string,<span class="keyword">day</span> string)</span><br><span class="line">#替换成</span><br><span class="line">partitioned <span class="keyword">by</span> (year_month_day string)</span><br></pre></td></tr></table></figure><h3 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>添加分区</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 分区表名 <span class="keyword">add</span> <span class="keyword">partition</span> (分区字段名<span class="operator">=</span><span class="string">&#x27;值&#x27;</span> , ...);</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>删除分区</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 分区表名 <span class="keyword">drop</span> <span class="keyword">partition</span> (分区字段名<span class="operator">=</span><span class="string">&#x27;值&#x27;</span> , ...);</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>修改分区名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 分区表名 <span class="keyword">partition</span> (分区字段名<span class="operator">=</span><span class="string">&#x27;旧值&#x27;</span> , ...) rename <span class="keyword">to</span> <span class="keyword">partition</span> (分区字段名<span class="operator">=</span><span class="string">&#x27;新值&#x27;</span> , ...);</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>查看所有分区</span><br><span class="line"><span class="keyword">show</span> partitons 分区表名;</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>同步<span class="operator">/</span>修复分区</span><br><span class="line">msck repair <span class="keyword">table</span> 分区表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果在hdfs上创建符合分区目录格式的文件夹,可以使用msck repair修复</span></span><br><span class="line"><span class="comment">-- 举例:手动创建一个year=2033目录</span></span><br><span class="line">msck repair <span class="keyword">table</span> one_part_order;</span><br></pre></td></tr></table></figure><h2 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240416193339909.png" alt="image-20240416193339909"></p><p><strong>分桶表特点/好处：</strong>需要产生分桶文件，查询的时候特定操作上提升效率(过滤、join分组以及抽样)</p><p><strong>效率上注意：如果分桶表，在查询数据的时候，如果没有使用分桶字段去筛选数据，效率不变提升。</strong></p><p><strong>分桶字段名注意：</strong>分桶字段名必须是原有字段名，因为分桶需要根据对应字段值取余数把余数相同的数据放到同一个分桶文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 创建基础分桶表</span><br><span class="line">create [external] table [if not exists] 表名(</span><br><span class="line">字段名 字段类型 </span><br><span class="line">)</span><br><span class="line">clustered by (分桶字段名) </span><br><span class="line">into 桶数量 buckets ;</span><br><span class="line"></span><br><span class="line">-- 1.创建基础分桶表,要求分3个桶</span><br><span class="line">create table course_base (</span><br><span class="line">    cid int,</span><br><span class="line">    cname string,</span><br><span class="line">    sname string</span><br><span class="line">)</span><br><span class="line">clustered by(cid) into 3 buckets</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line"></span><br><span class="line">-- 2.load方式加载数据</span><br><span class="line">-- 前提: 已经上传course.txt文件到hdfs的/source目录下</span><br><span class="line">load data inpath &#x27;/source/course.txt&#x27; into table course_base;</span><br></pre></td></tr></table></figure><h3 id="分桶表排序"><a href="#分桶表排序" class="headerlink" title="分桶表排序"></a>分桶表排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--创建基础分桶表,然后桶内排序:   </span><br><span class="line">create [external] table [if not exists] 表名(</span><br><span class="line">字段名 字段类型 </span><br><span class="line">)</span><br><span class="line">clustered by (分桶字段名) </span><br><span class="line">sorted by(排序字段名 asc|desc) #注意:asc升序(默认) desc降序</span><br><span class="line">into 桶数量 buckets ;</span><br><span class="line"></span><br><span class="line">create table course_sort (</span><br><span class="line">    cid int,</span><br><span class="line">    cname string,</span><br><span class="line">    sname string</span><br><span class="line">)</span><br><span class="line">clustered by(cid) sorted by (cid desc) into 3 buckets</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line"></span><br><span class="line">-- 2.加载数据</span><br><span class="line">-- 还是使用/source/course.txt数据文件</span><br><span class="line">load data inpath &#x27;/source/course.txt&#x27; into table course_sort;</span><br></pre></td></tr></table></figure><blockquote><p><strong>数据倾斜问题:</strong> 分桶字段值如果大量重复,相同的会分到同一个桶内,导致数据倾斜</p></blockquote><h3 id="分桶原理"><a href="#分桶原理" class="headerlink" title="分桶原理"></a>分桶原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果是数值类型分桶字段: 直接使用数值对桶数量取模   </span><br><span class="line">如果是字符串类型分桶字段: 底层会使用hash算法计算出一个数字然后再对桶数量取模</span><br><span class="line"></span><br><span class="line">Hash: Hash是一种数据加密算法，其原理我们不去详细讨论，我们只需要知道其主要特征：同样的值被Hash加密后的结果是一致的</span><br><span class="line"></span><br><span class="line">举例: 字符串“binzi”被Hash后的结果是93742710（仅作为示意），那么无论计算多少次，字符串“binzi”的结果都会是93742710。</span><br><span class="line">计算余数: hash(&#x27;binzi&#x27;)%3==0</span><br><span class="line"></span><br><span class="line">注意: 同样的数据得到的结果一致，如’binzi’ hash取模结果是0，无论计算多少次，它的取模结果都是0</span><br></pre></td></tr></table></figure><h3 id="分区表和分桶表区别"><a href="#分区表和分桶表区别" class="headerlink" title="分区表和分桶表区别"></a>分区表和分桶表区别</h3><ol><li><p><strong>分区表</strong><br>创建表的时候使用关键字: partition by (分区字段名 分区字段类型)<br>分区字段名注意事项: 是一个新的字段,需要指定类型,且不能和其他字段重名<br>分区表好处: 使用分区字段作为条件的时候,底层直接找到对应的分区目录,能够避免全表扫描,提升查询效率<br>分区表最直接的效果: 在hfds表目录下,分成多个分区目录(year=xxxx,month=xx,day=xx)<br>不建议直接上传文件在hdfs表根路径下: 分区表直接不能识别对应文件中数据,因为分区表会找分区目录下的数据文件<br>使用load方式加载hdfs中文件: 本质是移动文件到对应分区目录下</p></li><li><p><strong>分桶表</strong><br>创建表的时候使用关键字: clustered by (分桶字段名) into 桶数量 buckets<br>分桶字段名注意事项: 是指定一个已存在的字段,不需要指定类型<br>分桶表好处: 使用分桶字段做抽样等特定操作的时候,也能提升性能效率<br>分桶表最直接的效果: 在hdfs表目录或者分区目录下,分成多个分桶文件(000000_0,000001_0,000002_0…)<br>不建议直接上传文件在hdfs表根路径下: 分桶表可以识别对应文件中数据,但是并没有分桶效果,也是不建议的<br>使用load方式加载hdfs中文件: 本质是复制数据到各个分桶文件中</p></li></ol><h2 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h2><p>实际开发并不常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#1.复杂类型建表格式</span><br><span class="line">...</span><br><span class="line">[row format delimited] # hive的serde机制</span><br><span class="line">    [fields terminated by &#x27;字段分隔符&#x27;] # 自定义字段分隔符固定格式</span><br><span class="line">    [collection ITEMS terminated by &#x27;集合分隔符&#x27;] # 自定义array同类型集合和struct不同类型集合</span><br><span class="line">    [map KEYS terminated by &#x27;键值对分隔符&#x27;] # 自定义map映射kv类型</span><br><span class="line">    [lines terminated by &#x27;\n&#x27;] # # 默认即可</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line">#2.hive复杂类型</span><br><span class="line">array、struct、map</span><br><span class="line"></span><br><span class="line">#3.array类型</span><br><span class="line">又叫数组类型，存储同类型的单数据的集合</span><br><span class="line">建表指定类型：array&lt;数据类型&gt;</span><br><span class="line">取值：字段名[索引]，索引从0开始</span><br><span class="line">获取长度：size(字段名)</span><br><span class="line">判断是否包含某个数据：array_contains(字段名,某数据)</span><br><span class="line"></span><br><span class="line">#4.struct类型</span><br><span class="line">又叫结构类型，可以存储不同类型单数据的集合</span><br><span class="line">建表指定类型：struct&lt;子字段名1:数据类型1, 子字段名2:数据类型2 , ...&gt;</span><br><span class="line">取值：字段名.子字段名n</span><br><span class="line"></span><br><span class="line">#5.map类型</span><br><span class="line">又叫映射类型，存储键值对数据的映射(根据key找value)</span><br><span class="line">建表指定类型：map&lt;key类型,value类型&gt;</span><br><span class="line">取值：字段名[key]</span><br><span class="line">获取长度：size(字段名)</span><br><span class="line">获取所有key：map_keys()</span><br><span class="line">获取所有value：map_values()</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示使用array类型映射数据</span></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_array2(</span><br><span class="line">    name string,</span><br><span class="line">    location <span class="keyword">array</span><span class="operator">&lt;</span>string<span class="operator">&gt;</span></span><br><span class="line">)<span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示struct类型映射数据</span></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_struct2(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    info struct<span class="operator">&lt;</span>name:string,age:<span class="type">int</span><span class="operator">&gt;</span></span><br><span class="line">)<span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示map类型的应用</span></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_map2(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    info map<span class="operator">&lt;</span>string,string<span class="operator">&gt;</span>,</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">)<span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="Hive查询"><a href="#Hive查询" class="headerlink" title="Hive查询"></a>Hive查询</h1><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT] 字段名, 字段名, ...</span><br><span class="line">FROM 表名 [inner | left outer | right outer | full outer | left semi JOIN 表名 ON 关联条件 ]</span><br><span class="line">[WHERE 非聚合条件]</span><br><span class="line">[GROUP BY 分组字段名]</span><br><span class="line">[HAVING 聚合条件]</span><br><span class="line">[ORDER BY 排序字段名 asc | desc]</span><br><span class="line">[CLUSTER  BY 字段名 | [DISTRIBUTE BY 字段名 SORT BY 字段名]]</span><br><span class="line">[LIMIT x,y]</span><br></pre></td></tr></table></figure><h2 id="类SQL基本查询"><a href="#类SQL基本查询" class="headerlink" title="类SQL基本查询"></a>类SQL基本查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>基础查询格式</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;      </span><br><span class="line"><span class="operator">*</span>代表所有字段  <span class="keyword">distinct</span>去重  <span class="keyword">as</span>给表或者字段起别名</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>条件查询格式</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line">比较运算符: <span class="operator">&gt;</span> <span class="operator">&lt;</span> <span class="operator">&gt;=</span> <span class="operator">&lt;=</span> <span class="operator">!=</span> <span class="operator">&lt;&gt;</span></span><br><span class="line">逻辑运算符: <span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line">模糊查询: <span class="operator">%</span>代表任意<span class="number">0</span>个或者多个字符   _代表任意<span class="number">1</span>个字符</span><br><span class="line">空判断: 为空<span class="keyword">is</span> <span class="keyword">null</span>   不为空<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">范围查询: x到y的连续范围:<span class="keyword">between</span> x <span class="keyword">and</span> y    x或者y或者z类的非连续范围: <span class="keyword">in</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>排序查询格式</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">order</span> <span class="keyword">by</span> 排序字段名 <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span> ;</span><br><span class="line"><span class="keyword">asc</span> : 升序 默认升序</span><br><span class="line"><span class="keyword">desc</span>: 降序</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>聚合查询格式</span><br><span class="line"><span class="keyword">select</span> 聚合函数(字段名) <span class="keyword">from</span> 表名;</span><br><span class="line">聚合函数: 又叫分组函数或者统计函数</span><br><span class="line">聚合函数: <span class="built_in">count</span>()  <span class="built_in">sum</span>()  <span class="built_in">avg</span>()  <span class="built_in">max</span>()  <span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>分组查询格式</span><br><span class="line"><span class="keyword">select</span> 分组字段名,聚合函数(字段名) <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 非聚合条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 聚合条件];</span><br><span class="line">注意: 当分组查询的时候,<span class="keyword">select</span>后的字段名要么在groupby后出现过,要么放在聚合函数内,否则报错</span><br><span class="line"><span class="keyword">where</span>和<span class="keyword">having</span>区别? </span><br><span class="line">区别<span class="number">1</span>: 书写顺序不同,<span class="keyword">where</span>在<span class="keyword">group</span> <span class="keyword">by</span>关键字前,<span class="keyword">having</span>在<span class="keyword">group</span> <span class="keyword">by</span>关键字后</span><br><span class="line">区别<span class="number">2</span>: 执行顺序不同,<span class="keyword">where</span>在分组之前过滤数据,<span class="keyword">having</span>在分组之后过滤数据</span><br><span class="line">区别<span class="number">3</span>: 筛选数据不同,<span class="keyword">where</span>只能在分组之前过滤非聚合数据,<span class="keyword">having</span>在分组之后主要过滤聚合数据</span><br><span class="line">区别<span class="number">4</span>: 操作对象不同,<span class="keyword">where</span>底层操作伪表,<span class="keyword">having</span>底层操作运算区</span><br><span class="line"></span><br><span class="line">#<span class="number">6.</span>分页查询格式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 [ <span class="keyword">order</span> <span class="keyword">by</span> 排序字段名 <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>] limit x,y;</span><br><span class="line">x: 起始索引 默认从<span class="number">0</span>开始,如果x为<span class="number">0</span>可以省略    计算格式: x<span class="operator">=</span>(页数<span class="number">-1</span>)<span class="operator">*</span>y</span><br><span class="line">y: 本次查询记录数</span><br></pre></td></tr></table></figure><h2 id="类SQL多表查询"><a href="#类SQL多表查询" class="headerlink" title="类SQL多表查询"></a>类SQL多表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>交叉连接格式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">cross</span> <span class="keyword">join</span> 右表;</span><br><span class="line">注意: 交叉连接产生的结果叫笛卡尔积,此种方式慎用<span class="operator">!</span><span class="operator">!</span><span class="operator">!</span></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>内连接格式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">inner</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左右表关联条件;</span><br><span class="line">特点: 相当于只取两个表的交集</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>左外连接格式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左右表关联条件;</span><br><span class="line">特点: 以左表为主,左表数据全部保留,右表只保留和左表有交集的部分</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>右外连接格式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 右表 <span class="keyword">on</span> 左右表关联条件;</span><br><span class="line">特点: 以右表为主,右表数据全部保留,左表只保留和右表有交集的部分</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>自连接</span><br><span class="line">本质是一个特殊的内外连接,最大特点就是左右表是同一个表</span><br><span class="line">应用场景: 比较局限,场景<span class="number">1</span>: 存储省市县三级数据的区域表   场景<span class="number">2</span>: 存储上下级信息的员工表</span><br><span class="line"></span><br><span class="line">#<span class="number">6.</span>子查询</span><br><span class="line">本质是一个<span class="keyword">select</span>语句作为另外一个<span class="keyword">select</span>语句的一部分(表或者条件)</span><br><span class="line">注意: 子查询作为表使用的话必须取别名</span><br></pre></td></tr></table></figure><h2 id="Hive其他join操作"><a href="#Hive其他join操作" class="headerlink" title="Hive其他join操作"></a>Hive其他join操作</h2><p>在Hive中除了支持cross join（交叉连接，也叫做笛卡尔积）,inner join（内连接）、left outer join（左外连接）、</p><p>right outer  join（右外连接）<strong>还支持full outer join（全外连接）、left semi join（左半开连接）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>全外连接</span><br><span class="line">左表 <span class="keyword">full</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>左半开连接</span><br><span class="line">左表 <span class="keyword">left</span> semi <span class="keyword">join</span> 右表 <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- hive不同于mysql的join操作</span></span><br><span class="line"><span class="comment">-- 全外连接(左表 full outer join 右表 on 条件) 大白话就是左外和右外结果合并同时去重</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users u <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> u.userId <span class="operator">=</span> o.userId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左半开连接(左表 left semi join 右表 on 条件) 大白话就是内连接的一半</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users u <span class="keyword">left</span> semi <span class="keyword">join</span> orders o <span class="keyword">on</span> u.userId <span class="operator">=</span> o.userId;</span><br></pre></td></tr></table></figure><h2 id="Hive其他排序操作"><a href="#Hive其他排序操作" class="headerlink" title="Hive其他排序操作"></a>Hive其他排序操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> mapreduce.job.reduces:  查看当前设置的reduce数量 默认结果是<span class="number">-1</span>,代表自动匹配reduce数量和桶数量一致</span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces <span class="operator">=</span> 数量 : <span class="comment">-- 修改reduces数量</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>cluster <span class="keyword">by</span> 字段名</span><br><span class="line">分桶且正序排序。</span><br><span class="line">弊端：分和排序是同一个字段，相对不灵活</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>distribute <span class="keyword">by</span> 字段名 sort <span class="keyword">by</span> 字段名</span><br><span class="line">distribute <span class="keyword">by</span>负责分</span><br><span class="line">sort <span class="keyword">by</span>负责排序，相对比较灵活</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span><span class="keyword">order</span> <span class="keyword">by</span> 字段名 永远都是全局排序,不受reduces数量影响,每次只用<span class="number">1</span>个reduces</span><br><span class="line">全局排序</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>注意事项</span><br><span class="line">cluster <span class="keyword">by</span>和distribute <span class="keyword">by</span>字段名sort <span class="keyword">by</span>字段名：受当前设置的reduces数量影响,但是设置的reduces数量对<span class="keyword">order</span> <span class="keyword">by</span>无影响,因为orderby就是全局排序,就是一个reduce</span><br><span class="line"></span><br><span class="line">建表的时候指定分桶字段和排序字段：clustered <span class="keyword">by</span> (字段名) sorted <span class="keyword">by</span> (字段名) <span class="keyword">into</span> 桶数量 buckets</span><br><span class="line">注意: 如果建表的时候设置了桶数量,那么reduces建议设置值<span class="number">-1</span>或者值大于桶数量</span><br></pre></td></tr></table></figure><h2 id="抽样查询"><a href="#抽样查询" class="headerlink" title="抽样查询"></a>抽样查询</h2><p>TABLESAMPLE抽样好处：当表数据特别大的时候，就算只是select * limit 语句也会非常慢，因此，如何从表中获取少量数据校验进行数据的准确性校验时就显得非常重要。tablesample就可以满足这个需求。</p><p>tablesample会尽可能实现随机抽样，并且不走MR，查询效率相对较快。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>基于随机分桶抽样格式</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> tbl <span class="keyword">TABLESAMPLE</span>(BUCKET x <span class="keyword">OUT</span> <span class="keyword">OF</span> y <span class="keyword">ON</span>(字段名 <span class="operator">|</span> rand()))</span><br><span class="line">y：表示将表数据随机划分成y份（y个桶）</span><br><span class="line">x：表示从y里面随机抽取第x份数据作为取样</span><br><span class="line"><span class="operator">|</span>：或者</span><br><span class="line">字段名：表示随机的依据基于某个列的值，每次按相关规则取样结果都是一致。</span><br><span class="line">rand()：表示随机的依据基于整行，每次取样结果不同。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 随机抽样函数 tablesample</span></span><br><span class="line"><span class="comment">-- 参考字段分桶抽样,快且随机</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">10</span> <span class="keyword">on</span> orderid);</span><br><span class="line"><span class="comment">-- 参考rand()随机数,快且真正达到随机</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">10</span> <span class="keyword">on</span> rand());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 快速取前面部分数据 : 快但没有随机</span></span><br><span class="line"><span class="comment">-- 前100条</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( <span class="number">100</span> <span class="keyword">rows</span> );</span><br><span class="line"><span class="comment">-- 前10%数据</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( <span class="number">10</span> <span class="keyword">percent</span> );</span><br><span class="line"><span class="comment">-- 取1k或者1m的数据</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( <span class="number">16</span>k );</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( <span class="number">167</span>k );</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">tablesample</span> ( <span class="number">1</span>m );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 随机取100条: 随机但是不快</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders distribute <span class="keyword">by</span> rand() sort <span class="keyword">by</span> rand() limit <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="正则模糊查询"><a href="#正则模糊查询" class="headerlink" title="正则模糊查询"></a>正则模糊查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span><span class="keyword">sql</span>模糊查询关键字：<span class="keyword">like</span></span><br><span class="line">任意<span class="number">0</span>个或者多个：<span class="operator">%</span></span><br><span class="line">任意<span class="number">1</span>个：_    </span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>正则模糊查询关键字rlike</span><br><span class="line">任意<span class="number">0</span>个或者多个：.<span class="operator">*</span></span><br><span class="line">任意<span class="number">1</span>个：.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正则表达式查询</span></span><br><span class="line"><span class="comment">-- 1.查询广东省数据</span></span><br><span class="line"><span class="comment">-- sql模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userAddress <span class="keyword">like</span> <span class="string">&#x27;广东省%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 正则模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userAddress rlike <span class="string">&#x27;广东省.*&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询满足&#x27;xx省 xx市 xx区&#x27;格式的信息</span></span><br><span class="line"><span class="comment">-- sql模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userAddress <span class="keyword">like</span> <span class="string">&#x27;__省 __市 __区&#x27;</span>;</span><br><span class="line"><span class="comment">-- 正则模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userAddress rlike <span class="string">&#x27;..省 ..市 ..区&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.查询所有姓张王邓的用户信息</span></span><br><span class="line"><span class="comment">-- sql模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">or</span> username <span class="keyword">like</span> <span class="string">&#x27;王%&#x27;</span> <span class="keyword">or</span> username <span class="keyword">like</span> <span class="string">&#x27;邓%&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 正则模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> username rlike <span class="string">&#x27;[张王邓].*&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> username rlike &quot;[张王邓].+&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.查找所有188开头的手机号</span></span><br><span class="line"><span class="comment">-- sql模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userPhone <span class="keyword">like</span> <span class="string">&#x27;188________&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 正则模糊查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userPhone rlike <span class="string">&#x27;188........&#x27;</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userPhone rlike <span class="string">&#x27;188.&#123;8&#125;&#x27;</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userPhone rlike <span class="string">&#x27;188\\*&#123;4&#125;[0-9]&#123;4&#125;&#x27;</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> userPhone rlike <span class="string">&#x27;188\\*&#123;4&#125;\\d&#123;4&#125;&#x27;</span> ;</span><br><span class="line"># 正则语法还有很多。不细说</span><br></pre></td></tr></table></figure><h2 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h2><p>union联合查询：就是把两个select语句结果合并成一个临时结果集，整体可以用于其他SQL操作。</p><p>union可以根据是否去重，有两种写法，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.union [distinct]</span></span><br><span class="line">去重，只是省略了distinct</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.union all</span></span><br><span class="line">不去重</span><br></pre></td></tr></table></figure><h2 id="CTE表达式"><a href="#CTE表达式" class="headerlink" title="CTE表达式"></a>CTE表达式</h2><p>公用表表达式，原名为Common Table Expression，简称CTE语句，是一种复杂SQL的优化写法，本质上就是子查询。</p><p>其语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> 临时表名称<span class="number">1</span> <span class="keyword">as</span> (</span><br><span class="line">子查询语句<span class="number">1</span></span><br><span class="line">),临时表名称<span class="number">2</span> <span class="keyword">as</span> (</span><br><span class="line">子查询语句<span class="number">2</span></span><br><span class="line">),临时表名称<span class="number">3</span> <span class="keyword">as</span> (</span><br><span class="line">子查询语句<span class="number">3</span></span><br><span class="line">)...</span><br><span class="line"> <span class="keyword">select</span> 字段名 <span class="keyword">from</span> 临时表名称N;</span><br></pre></td></tr></table></figure><h2 id="内置虚拟列"><a href="#内置虚拟列" class="headerlink" title="内置虚拟列"></a>内置虚拟列</h2><p>虚拟列是Hive内置的可以在查询语句中使用的特殊标记，可以查询数据本身的详细参数。</p><p>Hive目前可用3个虚拟列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.INPUT__FILE__NAME</span></span><br><span class="line">显示数据行所在的具体文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.BLOCK__OFFSET__INSIDE__FILE</span></span><br><span class="line">显示数据行所在文件的偏移量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.ROW__OFFSET__INSIDE__BLOCK</span></span><br><span class="line">显示数据所在HDFS块的偏移量。</span><br><span class="line">注意: 此虚拟列需要设置：SET hive.exec.rowoffset=true 才可使用</span><br></pre></td></tr></table></figure><h1 id="Hive函数"><a href="#Hive函数" class="headerlink" title="Hive函数"></a>Hive函数</h1><p>Hive的函数分为两大类：<strong>内置函数</strong>（Built-in Functions）、<strong>用户定义函数</strong>（User-Defined Functions）</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417194205171.png" alt="image-20240417194205171"></p><p>本来，UDF 、UDAF、UDTF3个标准是针对用户自定义函数分类的；但是，现在可以将这个分类标准扩大到hive中所有的函数，包括内置函数和自定义函数;</p><p>1、<strong>UDF</strong>（User-Defined-Function）<strong>普通函数: 一进一出 输入一行数据输出一行数据</strong>    </p><p>举例: split</p><p>2、<strong>UDAF</strong>（User-Defined Aggregation Function）<strong>聚合函数: 多进一出 输入多行输出一行</strong>   </p><p>举例: count sum max min avg</p><p>3、<strong>UDTF</strong>（User-Defined Table-Generating Functions）<strong>表生成函数: 一进多出 输入一行输出多行</strong> </p><p>举例: explode</p><p>详细的函数使用可以参阅：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-MathematicalFunctions">LanguageManual UDF - Apache Hive - Apache Software Foundation</a></p><p>大部分函数都和标准sql，了解过mysql的绝大部分操作都可以直接照搬。并且hive和mysql一样可以通过命令查看用法手册</p><p>1.使用<strong>show functions</strong>查看当下可用的所有函数；</p><p>2.通过<strong>describe function extended</strong> <strong>函数名</strong>来查看函数的使用方式。</p><p>所以仅仅介绍常用函数</p><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--concat</span><br><span class="line">select concat(&#x27;a&#x27;,&#x27;b&#x27;);</span><br><span class="line">--concat_ws</span><br><span class="line">select concat_ws(&#x27;-&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;);--a,b,c</span><br><span class="line">select concat_ws(&#x27;,&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;);--a,b,c</span><br><span class="line">select length(&#x27;facebook&#x27;);--8</span><br><span class="line">select lower(&#x27;AbCdEfg&#x27;);--abcdefg</span><br><span class="line">select upper(&#x27;AbCdEfg&#x27;);--ABCDEFG</span><br><span class="line">select trim(&#x27;   abc &#x27;);--&#x27;abc&#x27;</span><br><span class="line">select split(&#x27;a,b,c&#x27;,&#x27;,&#x27;);--&#x27;a,b,c&#x27; -&gt; [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]，把一个字符串切换后的结果是：array（数组）</span><br><span class="line">select array(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;);--[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">--substr：字符串切割函数</span><br><span class="line">--参数一：字符串</span><br><span class="line">--参数二：起始位置</span><br><span class="line">--参数三：可省略，默认切割到最后</span><br><span class="line">select substr(&#x27;facebook&#x27;,3);</span><br><span class="line">select substr(&#x27;facebook&#x27;,3,1);</span><br><span class="line"></span><br><span class="line">-- 正则替换</span><br><span class="line">SELECT regexp_replace(&#x27;100-200&#x27;, &#x27;(\\d+)&#x27;, &#x27;xxxx&#x27;);</span><br><span class="line">-- 正则提取</span><br><span class="line">SELECT regexp_extract(&#x27;100-200&#x27;, &#x27;(\\d+)-(\\d+)&#x27;, 1);</span><br><span class="line"></span><br><span class="line">--URL解析函数：parse_url 注意要想一次解析出多个 可以使用parse_url_tuple这个UDTF函数</span><br><span class="line">SELECT parse_url(&#x27;http://facebook.com/path/p1.php?query=1&#x27;, &#x27;HOST&#x27;);</span><br><span class="line">SELECT parse_url(&#x27;http://facebook.com/path/p1.php?query=1&#x27;, &#x27;PROTOCOL&#x27;);</span><br></pre></td></tr></table></figure><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--日期函数</span><br><span class="line">select unix_timestamp(); --获取当前时间戳：1713325366</span><br><span class="line">select unix_timestamp(&#x27;2024-03-17 03:28:54&#x27;); --获取当前时间戳,可以传入时间</span><br><span class="line">select from_unixtime(1713324534); -- 把时间戳转换为时间格式</span><br><span class="line">select from_unixtime(1713324534,&#x27;yyyy-MM-dd&#x27;); -- 把时间戳转换为时间格式，可以指定格式</span><br><span class="line">select `current_timestamp`();--查看当前时间戳：2024-04-17 11:42:30.125000000</span><br><span class="line">select current_user();--查看当前用户</span><br><span class="line">select to_date(&#x27;2024-03-17 03:28:54&#x27;);--把时间戳转换为日期（不带时分秒）</span><br><span class="line">select year(&#x27;2024-03-17 03:28:54&#x27;);--2024</span><br><span class="line">SELECT date_add(&#x27;2009-07-30&#x27;, 1);--日期操作函数，可以在日期上进行相加操作</span><br><span class="line">SELECT date_sub(&#x27;2009-07-30&#x27;, 1);--日期操作函数，可以在日期上进行相减操作</span><br><span class="line">SELECT datediff(&#x27;2024-04-20&#x27;, &#x27;2024-04-17&#x27;);--日期操作函数，判断两个日期之间相隔的天数</span><br><span class="line">SELECT abs(datediff(&#x27;2009-07-30&#x27;, &#x27;2024-04-17&#x27;));--日期操作函数，判断两个日期之间相隔的天数</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--数学函数</span><br><span class="line">select round(3.141592653);--默认取整</span><br><span class="line">select round(3.141592653,2);--保留2位小数，3.14，小数后就是四舍五入</span><br><span class="line">select round(3.141592653,3);--保留2位小数，3.142，小数后就是四舍五入</span><br><span class="line">select floor(3.141592653);--3</span><br><span class="line">select floor(-3.141592653);-- -4</span><br><span class="line">select ceil(-3.141592653);-- -3</span><br><span class="line">select rand();--随机</span><br><span class="line">select rand(10);--给一个随机种子后，这个值就固定了</span><br></pre></td></tr></table></figure><h3 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">--条件函数</span><br><span class="line">--if(条件，返回值1，返回值2)</span><br><span class="line">--当条件成立，则返回 返回值1，否则返回 返回值2</span><br><span class="line">select if(1=1,&#x27;@&#x27;,&#x27;#&#x27;);--@</span><br><span class="line">select if(1=2,3,4);--4</span><br><span class="line">select case when 1=1 then &#x27;@&#x27; else &#x27;#&#x27; end;</span><br><span class="line">select isnull(&#x27;a&#x27;);--false</span><br><span class="line">select isnull(&#x27;b&#x27;);--false</span><br><span class="line">select isnull(&#x27;&#x27;);--false</span><br><span class="line">select isnull(null);--true</span><br><span class="line">--nvl(值，默认值)：如果值为空，则返回默认值，否则返回值本身</span><br><span class="line">select nvl(true,false);--true</span><br><span class="line">select nvl(&#x27;abc&#x27;,null);--abc</span><br><span class="line">select nvl(null,&#x27;abc&#x27;);--abc</span><br><span class="line">select nvl(null,&#x27;null&#x27;);--&#x27;null&#x27;</span><br><span class="line">select nvl(null,null);--&lt;null&gt;</span><br><span class="line">--coalesce(a1,a2...)，返回第一个不为空的值</span><br><span class="line">select coalesce(1,null);--1</span><br><span class="line">select coalesce(1,2,null);--1</span><br><span class="line">select coalesce(null,1,2);--1</span><br><span class="line">select coalesce(null,null,2);--2</span><br><span class="line">select coalesce(null,null,2,null);--2</span><br><span class="line">select coalesce(null, null, null, 3);--3</span><br><span class="line">select coalesce(null,null,null,null);--&lt;null&gt;</span><br></pre></td></tr></table></figure><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--类型转换函数</span><br><span class="line">--cast(value as type)</span><br><span class="line">select cast(1 as string);--&quot;1&quot;</span><br><span class="line">select cast(&quot;1&quot; as int);--1</span><br><span class="line">select cast(&#x27;abc&#x27; as int);--无法识别，&lt;null&gt;</span><br></pre></td></tr></table></figure><h3 id="脱敏函数"><a href="#脱敏函数" class="headerlink" title="脱敏函数"></a>脱敏函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--脱敏函数</span><br><span class="line">select mask(&#x27;ABCdef123&#x27;);--XXXxxxnnn</span><br><span class="line">select mask_hash(&#x27;ABCdef123&#x27;);</span><br><span class="line">select mask_first_n(&#x27;ABCdef123&#x27;,4);--对前4个进行脱敏：XXXxef123</span><br><span class="line">select mask_last_n(&#x27;ABCdef123&#x27;,4);--对后4个进行脱敏：ABCdexnnn</span><br><span class="line">select mask_show_first_n(&#x27;ABCdef123&#x27;,4);--z展示前4个，其余的脱敏：ABCdxxnnn</span><br><span class="line">select mask_show_last_n(&#x27;ABCdef123&#x27;,4);--z展示后4个，其余的脱敏：XXXxxf123</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--其他函数</span><br><span class="line">select hash(1234);--1234</span><br><span class="line">select hash(&#x27;1234&#x27;);--1509442</span><br><span class="line">select current_user();--root</span><br><span class="line">select current_database();--hive04</span><br><span class="line">select version();--3.1.2 r8190d2be7b7165effa62bd21b7d60ef81fb0e4af</span><br><span class="line">select md5(&#x27;abc&#x27;);--900150983cd24fb0d6963f7d28e17f72</span><br><span class="line">select &#x27;zhangsan&#x27;,&#x27;123456&#x27;;</span><br><span class="line">select &#x27;zhangsan&#x27;,md5(&#x27;123456&#x27;);</span><br><span class="line">select size(array(&#x27;1234&#x27;,&#x27;abc&#x27;,&#x27;123&#x27;));--3</span><br></pre></td></tr></table></figure><h2 id="用户定义函数"><a href="#用户定义函数" class="headerlink" title="用户定义函数"></a>用户定义函数</h2><h3 id="explode-爆炸函数"><a href="#explode-爆炸函数" class="headerlink" title="explode-爆炸函数"></a>explode-爆炸函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--explode：参数必须是map或者array，一般是array类型，它的结果是一张表，所以它叫表生成函数</span><br><span class="line">select explode(array(1,2,3,4,5));</span><br><span class="line">--string:&quot;hadoop,hive,zookeeper,HDFS&quot;</span><br><span class="line">select split(&quot;hadoop,hive,zookeeper,HDFS&quot;,&quot;,&quot;);</span><br><span class="line">select explode(split(&#x27;hadoop,hive,zookeeper,HDFS&#x27;,&#x27;,&#x27;));</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417202000149.png" alt="image-20240417202000149" style="zoom:50%;" /><p>可以看出讲一条array数据转成了一列</p><p>现在给出需求和数据来详细谈谈用法，将NBA总冠军球队数据使用explode进行拆分，并且根据夺冠年份进行倒序排序。使用explode函数对champion_year进行拆分 俗称炸开</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417202533646.png" alt="image-20240417202533646" style="zoom:67%;" /><p>查询sql如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with champion_year_tb as (select explode(champion_year) champion_year from the_nba_championship)</span><br><span class="line">select *</span><br><span class="line">from the_nba_championship</span><br><span class="line">         join champion_year_tb on array_contains(the_nba_championship.champion_year, champion_year_tb.champion_year)</span><br><span class="line">order by champion_year_tb.champion_year desc;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417202844127.png" alt="image-20240417202844127" style="zoom:67%;" /><blockquote><p><strong>错误写法 ：select team_name,explode(champion_year) from the_nba_championship;</strong></p></blockquote><p>UDTF函数生成的结果可以当成一张虚拟的表，但是无法和原始表进行组合查询，所以hive专门推出了lateral view侧视图的语句，可以直接将上面的join查询替换成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from the_nba_championship;</span><br><span class="line">select team_name, years</span><br><span class="line">from the_nba_championship lateral view explode(champion_year) t1 as years</span><br><span class="line">order by years desc;</span><br><span class="line"></span><br><span class="line">--lateral view侧视图基本语法如下</span><br><span class="line">select …… from tabelA lateral view UDTF(xxx) 别名 as col1,col2,col3……;</span><br></pre></td></tr></table></figure><p><strong>所以用此函数也相当于列转行</strong></p><h3 id="collect-数据收集函数"><a href="#collect-数据收集函数" class="headerlink" title="collect-数据收集函数"></a>collect-数据收集函数</h3><p>collect_set –把多行数据收集为一行 返回set集合 去重无序</p><p>collect_list –把多行数据收集为一行 返回list集合 不去重有序</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417203634222.png" alt="image-20240417203634222"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> collect_list(col3) <span class="keyword">from</span> row2col2 <span class="keyword">group</span> <span class="keyword">by</span> col2,col1;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417210621784.png" alt="image-20240417210621784"></p><h3 id="json-处理"><a href="#json-处理" class="headerlink" title="json-处理"></a>json-处理</h3><p>在hive中，没有json类的存在，一般使用string类型来修饰，叫做json字符串，简称json串。并且使用JsonSerDe 类解析，在加载json数据到表中的时候完成解析动作</p><p>在hive中，处理json数据的两种方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_json_test2 (</span><br><span class="line">                               device string,</span><br><span class="line">                               deviceType string,</span><br><span class="line">                               signal <span class="keyword">double</span>,</span><br><span class="line">                               `<span class="type">time</span>` string</span><br><span class="line">)<span class="type">ROW</span> FORMAT SERDE <span class="string">&#x27;org.apache.hive.hcatalog.data.JsonSerDe&#x27;</span> STORED <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"><span class="comment">-- 处理json数据,load自动分析赋值字段</span></span><br></pre></td></tr></table></figure><p><strong>json_tuple</strong></p><p>是UDTF 表生成函数 输入一行，输出多行 一次提取读个值 可以单独使用 也可以配合lateral view侧视图使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> get_json_object(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;lk&quot;,&quot;address&quot;:&#123;&quot;city&quot;:[&quot;hubei&quot;,&quot;wuhan&quot;]&#125;&#125;&#x27;</span>, <span class="string">&#x27;$.address.city[0]&#x27;</span>); <span class="comment">--hubei</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe function extended get_json_object; --查看取值符号$等等</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240417221706942.png" alt="image-20240417221706942" style="zoom:67%;" /><p><strong>get_json_object</strong></p><p>是UDF普通函数，输入一行 输出一行 一次只能提取一个值 多次提取多次使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> json_tuple(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;lk&quot;,&quot;address&quot;:&#123;&quot;city&quot;:[&quot;hubei&quot;,&quot;wuhan&quot;]&#125;&#125;&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;address&#x27;</span>) <span class="keyword">as</span> (name,address); <span class="comment">-- lk  &#123;&quot;city&quot;:[&quot;hubei&quot;,&quot;wuhan&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 搭配侧视图使用</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    json,device,deviceType,signal,stime</span><br><span class="line"><span class="keyword">from</span> tb_json_test1</span><br><span class="line">         <span class="keyword">lateral</span> <span class="keyword">view</span> json_tuple(json,&quot;device&quot;,&quot;deviceType&quot;,&quot;signal&quot;,&quot;time&quot;) b</span><br><span class="line">         <span class="keyword">as</span> device,deviceType,signal,stime;</span><br></pre></td></tr></table></figure><h3 id="开窗函数"><a href="#开窗函数" class="headerlink" title="开窗函数"></a>开窗函数</h3><p>Hive中的窗口函数可以分为几类，主要用于执行各种复杂的数据分析任务。以下是Hive窗口函数的分类及其简要说明：</p><ol><li><strong>排名函数（Ranking Functions）</strong>：<ul><li><code>RANK()</code>：为每一行分配一个排名，相同值会得到相同的排名，排名之间会有间隔。</li><li><code>DENSE_RANK()</code>：与<code>RANK()</code>相似，但相同值会得到相同的排名，排名之间不会有间隔。</li><li><code>ROW_NUMBER()</code>：为每一行分配一个唯一的连续整数编号。</li></ul></li><li><strong>聚合函数（Aggregate Functions）</strong>：<ul><li><code>SUM()</code>, <code>AVG()</code>, <code>MIN()</code>, <code>MAX()</code>：在定义的窗口内计算数值的总和、平均、最小值和最大值。</li></ul></li><li><strong>偏移函数（Offset Functions）</strong>：<ul><li><code>LEAD()</code>：返回当前行后一行的值。</li><li><code>LAG()</code>：返回当前行前一行的值。</li></ul></li><li><strong>窗口聚合函数（Window Aggregate Functions）</strong>：<ul><li><code>FIRST_VALUE()</code>：返回窗口中的第一行值。</li><li><code>LAST_VALUE()</code>：返回窗口的最后一行值。</li></ul></li><li><strong>分布函数（Distribution Functions）</strong>：<ul><li><code>PERCENT_RANK()</code>：计算每一行在窗口中的百分比排名。</li><li><code>CUME_DIST()</code>：计算小于等于当前行的行数占窗口总行数的比例。</li></ul></li><li><strong>分桶函数（Bucketing Functions）</strong>：<ul><li><code>NTILE()</code>：将窗口中的行分发到指定数量的桶中。</li></ul></li><li><strong>其他特殊函数</strong>：<ul><li><code>GROUPING()</code>：与<code>GROUP BY</code>结合使用，标识分组集合的结果。</li></ul></li></ol><p>此篇不在过多概述，而且除1，2，3条外大多数函数即使有用也很难用到，常用函数具体用法可以查看<a href="https://gozei.github.io/year/04/02/Sql%E4%BB%8E0%E5%88%B01/#SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B">Sql 从 0 到 1 | Gozei’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 从0到1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bigdata </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop集群搭建</title>
      <link href="/year/04/09/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/year/04/09/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hadoop介绍"><a href="#1-Hadoop介绍" class="headerlink" title="1. Hadoop介绍"></a>1. Hadoop介绍</h1><p>Hadoop是开源的技术框架，提供分布式存储、计算、资源调度的解决方案。它分为广义和狭义之分：</p><p>广义上：整个Hadoop生态圈，包括采集，存储，计算，调度等多个大数据组件</p><p>狭义上：就是指Hadoop框架本身。它包含HDFS、MapReduce、YARN三大组件的技术栈</p><p><strong>三者关系：MapReduce计算需要的数据和产生的结果需要HDFS来进行存储</strong>，<strong>MapReduce的运行需要由Yarn集群来提供资源调度。</strong></p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240409225033700.png" alt="image-20240409225033700" style="zoom:50%;" /><p>HADOOP集群具体来说包含两个集群：HDFS集群和YARN集群，两者逻辑上分离，但物理上常在一起。</p><p><strong>HDFS</strong>集群</p><p>NameNode、DataNode、SecondaryNameNode</p><p><strong>YARN</strong>集群</p><p>ResourceManager、NodeManager</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240409224953616.png" alt="image-20240409224953616"></p><ol><li><p>HDFS:（分布式文件系统），解决海量数据存储<br>元数据：描述核心数据的数据<br>NameNode：集群当中的主节点，主要用于管理集群当中的各种数据<br>SecondaryNameNode：主要能用于辅助NameNode进行文件块元数据存储<br>DataNode：集群当中的从节点，主要用于存储真实的海量的业务数据</p></li><li><p>YARN:（作业调度和集群资源管理的框架）,解决资源任务调度<br>ResourceManager：接收用户的计算请求任务，并负责集群的资源管理和分配<br>NodeManager：负责执行主节点分配的任务(给MR的计算程序提供资源)</p></li><li><p>MapReduce:（分布式运算编程框架）,解决海量数据计算<br>如何计算：核心思想就是分而治之，Map负责分解，Reduce负责合并。<br>MR程序：使用java/python然后去编写MR程序,成本高。</p></li></ol><h1 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2. 搭建"></a>2. 搭建</h1><h2 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h2><p>本地本机环境如下，三台虚拟机。<strong>hadoop运行必须有java环境。</strong></p><table><thead><tr><th><strong>JDK</strong></th><th><strong>1.8</strong></th></tr></thead><tbody><tr><td><strong>CentOS*3</strong></td><td><strong>7</strong></td></tr><tr><td><strong>Hadoop</strong></td><td><strong>3.x</strong></td></tr><tr><td><strong>SSH客户端</strong></td><td><strong>XTreminal</strong></td></tr></tbody></table><p>建议先配置域名映射，否则配置文件里面要写你每个节点的ip地址比较麻烦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vim /etc/hosts</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文件内容如下:</span><br><span class="line">#你的ip 被映射的域名</span><br><span class="line">192.168.88.101 node1</span><br><span class="line">192.168.88.102 node2</span><br><span class="line">192.168.88.103 node3</span><br></pre></td></tr></table></figure><h2 id="2-2-hadoop配置文件"><a href="#2-2-hadoop配置文件" class="headerlink" title="2.2 hadoop配置文件"></a>2.2 hadoop配置文件</h2><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240409213827696.png" alt="image-20240409213827696" style="zoom:67%;" /><p>需要进入/export/server/hadoop-3.3.0/etc/hadoop目录下修改如下配置文件</p><ul><li><strong>hadoop-env.sh</strong> : 文件中设置的是Hadoop运行时需要的环境变量</li><li>**core-site.xml **: hadoop的核心配置文件,如果在core-site.xml里没有配置的属性,自动会获取core-default.xml 里的相同属性的值</li><li>**hdfs-site.xml **: HDFS的核心配置文件,如果在hdfs-site.xml里没有配置的属性,会自动会获取hdfs-default.xml里的相同属性的值</li><li>**mapred-site.xml **: MapReduce的核心配置文件,如果在mapred-site.xml里没有配置的属性,会自动会获取mapred-default.xml里的相同属性的值</li><li><strong>yarn-site.xml</strong> : YARN的核心配置文件,如果在yarn-site.xml里没有配置的属性,会自动会获取yarn-default.xml里的相同属性的值</li><li><strong>workers</strong> : 文件中记录集群的主机名。主要配合一键启动脚本如start-dfs.sh、stop-yarn.sh用来进行集群启动</li></ul><p>默认配置的属性和具体功能可以去官网查看：<a href="https://hadoop.apache.org/docs/stable/">Hadoop – Apache Hadoop 3.3.6</a>，还有集群搭建配置方法：<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html">Apache Hadoop 3.3.6 – Hadoop Cluster Setup</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240411115620097.png"></p><h3 id="①-hadoop-env-sh文件"><a href="#①-hadoop-env-sh文件" class="headerlink" title="① hadoop-env.sh文件"></a>① hadoop-env.sh文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在55行添加JAVA_HOME,因为Hadoop把当前的执行环境当成远程服务器,所以需要重新配置下</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/export/server/jdk1.8.0_65</span><br><span class="line"><span class="comment"># 在440行文件末尾添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_DATANODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=root </span><br></pre></td></tr></table></figure><h3 id="②-core-site-xml文件"><a href="#②-core-site-xml文件" class="headerlink" title="② core-site.xml文件"></a>② core-site.xml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在文件的&lt;configuration&gt;&lt;/configuration&gt;的标签中添加以下内容:  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置Hadoop本地保存数据路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/data/hadoop-3.3.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置HDFS web UI用户身份 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合hive 用户代理设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启垃圾桶机制[可选操作] 1440 表示1440分钟也就是24小时一天的时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="③-hdfs-site-xml文件"><a href="#③-hdfs-site-xml文件" class="headerlink" title="③ hdfs-site.xml文件"></a>③ hdfs-site.xml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在文件的&lt;configuration&gt;&lt;/configuration&gt;的标签中添加以下内容:  --&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 指定secondarynamenode运行位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="④-mapred-site-xml文件"><a href="#④-mapred-site-xml文件" class="headerlink" title="④ mapred-site.xml文件"></a>④ mapred-site.xml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在文件的&lt;configuration&gt;&lt;/configuration&gt;的标签中添加以下内容:  --&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 设置MR程序默认运行模式： yarn集群模式 local本地模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MR程序历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="⑤-yarn-site-xml文件"><a href="#⑤-yarn-site-xml文件" class="headerlink" title="⑤ yarn-site.xml文件"></a>⑤ yarn-site.xml文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在文件的&lt;configuration&gt;&lt;/configuration&gt;的标签中添加以下内容:  --&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 设置YARN集群主角色运行机器位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施物理内存限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施虚拟内存限制。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启日志聚集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置yarn历史服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存的时间7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="⑥-workers文件"><a href="#⑥-workers文件" class="headerlink" title="⑥ workers文件"></a>⑥ workers文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用以下内容把之前内容覆盖</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure><h1 id="3-hadoop集群启动"><a href="#3-hadoop集群启动" class="headerlink" title="3. hadoop集群启动"></a>3. hadoop集群启动</h1><p><strong>要启动Hadoop集群，其实就是启动HDFS和YARN两个集群</strong></p><h4 id="①-数据初始化"><a href="#①-数据初始化" class="headerlink" title="① 数据初始化"></a>① 数据初始化</h4><blockquote><p><strong>首次启动HDFS必须对其进行格式化操作</strong> : 本质是清理和准备工作,因为此时的HDFS在物理上还是不存在的</p><p><strong>注意： 初始化操作必须在node1中执行</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~] hdfs namenode -format</span><br></pre></td></tr></table></figure><h4 id="②单节点逐个启动"><a href="#②单节点逐个启动" class="headerlink" title="②单节点逐个启动"></a>②单节点逐个启动</h4><h5 id="启动HDFS集群"><a href="#启动HDFS集群" class="headerlink" title="启动HDFS集群"></a>启动HDFS集群</h5><ul><li><p>在主节点上使用以下命令启动HDFS NameNode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# hdfs --daemon start namenode</span><br></pre></td></tr></table></figure></li><li><p>在每个从节点上使用以下命令启动HDFS DataNode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># hdfs --daemon start datanode</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# hdfs --daemon start datanode</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node3 ~]# hdfs --daemon start datanode</span><br></pre></td></tr></table></figure></li><li><p>node2上使用以下命令启动HDFS SecondaryNameNode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# hdfs --daemon start secondarynamenode</span><br></pre></td></tr></table></figure></li></ul><h5 id="启动YARN集群"><a href="#启动YARN集群" class="headerlink" title="启动YARN集群"></a>启动YARN集群</h5><ul><li><p>在主节点上使用以下命令启动YARN ResourceManager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# yarn --daemon start resourcemanager</span><br></pre></td></tr></table></figure></li><li><p>在每个从节点上使用以下命令启动YARN nodemanager</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># yarn --daemon start nodemanager</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# yarn --daemon start nodemanager</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node3 ~]# yarn --daemon start nodemanager</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意:</strong> 如果想要停止某个节点上某个角色，只需要把命令中的<strong>start</strong>改为<strong>stop</strong>即可</p><h4 id="③单个集群启动和关闭"><a href="#③单个集群启动和关闭" class="headerlink" title="③单个集群启动和关闭"></a>③单个集群启动和关闭</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># stop-dfs.sh</span></span><br><span class="line">[root@node1 ~]<span class="comment"># stop-yarn.sh</span></span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># start-dfs.sh</span></span><br><span class="line">[root@node1 ~]<span class="comment"># start-yarn.sh</span></span><br></pre></td></tr></table></figure><h4 id="④一键启动和关闭"><a href="#④一键启动和关闭" class="headerlink" title="④一键启动和关闭"></a>④一键启动和关闭</h4><blockquote><p>如果配置了etc/hadoop/workers和ssh免密登录,则可使用脚本一键操作Hadoop两个集群的相关进程，在主节点所设定的机器上执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# stop-all.sh</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# start-all.sh</span><br></pre></td></tr></table></figure><h4 id="⑤启动jobHistory"><a href="#⑤启动jobHistory" class="headerlink" title="⑤启动jobHistory"></a>⑤启动jobHistory</h4><blockquote><p>JobHistory用来记录已经finished的mapreduce运行日志，日志信息存放于HDFS目录中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# mapred --daemon start historyserver</span><br></pre></td></tr></table></figure><h4 id="jps查看进程"><a href="#jps查看进程" class="headerlink" title="jps查看进程"></a>jps查看进程</h4><p>jps是jdk提供的一个查看当前java进程的小工具， 全称是JavaVirtual Machine Process Status Tool</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240409223125038.png" alt="image-20240409223125038" style="zoom:67%;" /><p>如上图，配置成功</p><h1 id="4-集群web-ui"><a href="#4-集群web-ui" class="headerlink" title="4. 集群web-ui"></a>4. 集群web-ui</h1><p>一旦Hadoop集群启动并运行，可以通过web-ui进行集群查看，如下所述：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240411194033696.png" alt="image-20240411194033696"></p><p>访问HDFS的NameNode主机 : <a href="http://ip:9870/">http://ip:9870/</a></p><p>访问YARN的ResourceManager主机 : <a href="http://ip:8088/">http://ip:8088/</a></p><p><strong>查看计算任务jobhistory</strong></p><p>jobhistory: <a href="http://ip:19888/jobhistory">http://ip:19888/jobhistory</a></p>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql从0到1</title>
      <link href="/year/04/02/Sql%E4%BB%8E0%E5%88%B01/"/>
      <url>/year/04/02/Sql%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库简介"><a href="#MySQL数据库简介" class="headerlink" title="MySQL数据库简介"></a>MySQL数据库简介</h1><ol><li><strong>什么是数据库</strong></li></ol><p>数据库(DataBase)就是<strong>存储和管理数据的仓库</strong>。</p><p>数据按照一定的格式进行存储，用户可以对数据库中的数据进行增加、修改、删除、查询等操作。</p><p>(CURD) → CREATE、UPDATE、READ、DELETE</p><ol start="2"><li><strong>数据库有哪些分类？</strong></li></ol><p>根据数据库存储数据形式的不同，数据库可以分为两类：</p><ul><li><p>关系型数据库(SQL数据库) → RDBMS</p><ul><li>数据库、数据表</li><li>数据存储形式：数据以行列表格的形式进行存储</li><li>常见产品：MySQL、Oracle、DB2、SQL Server等</li></ul></li><li><p>非关系型数据库(NoSQL数据库)</p><ul><li>数据存储形式：键值对存储、文档存储、列式存储、图式存储</li><li>常见产品：MongoDB、Redis、Hbase、Neo4j</li></ul></li></ul><ol start="3"><li><strong>MySQL数据库</strong></li></ol><p>安装教程：<a href="https://cloud.tencent.com/developer/article/2093568">MySQL安装配置教程（超级详细、保姆级）-腾讯云开发者社区-腾讯云 (tencent.com)</a> 。by：<a href="https://cloud.tencent.com/developer/user/8223537">全栈程序员站长</a>（不是我，我懒得写）</p><p>MySQL 是目前最流行的关系型数据库管理系统（RDBMS）之一。</p><p>它最早由瑞典MySQL AB公司开发，后被SUN公司收购，目前属于 Oracle 甲骨文公司旗下产品。Oracle</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325084737916.png" alt="image-20240325084737916" style="zoom:67%;" /><p>MySQL 数据库是 C/S 软件：客户端和服务器。</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325084841990.png" alt="image-20240325084841990" style="zoom:67%;" /><p><strong>特点：</strong></p><ol><li>免费开源，不需要支付额外的费用（MySQL5以上企业版开始收费，提供技术支持）。</li><li>支持大型的数据库，可以处理拥有上千万条数据。</li><li>使用标准的SQL数据语言形式（增、删、改、查）。</li><li>支持不同的操作系统，并提供多种编程语言的操作接口。包括C、C++、Python、Java等等。</li><li>支持多种存储引擎。</li></ol><h1 id="MySQL客户端连接服务端"><a href="#MySQL客户端连接服务端" class="headerlink" title="MySQL客户端连接服务端"></a>MySQL客户端连接服务端</h1><p>通过 MySQL 客户端连接到 MySQL 服务器，即可以对 MySQL 服务器上存储的数据进行操作。</p><ol><li>命令行连接</li></ol><p>命令格式：mysql -h数据库服务端IP -P数据库服务端端口 -u用户名 -p密码</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325101143754.png" alt="image-20240325101143754" style="zoom:67%;" /><ol start="2"><li>可视化界面客户端连接（DataGrip）</li></ol><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325101018320.png" alt="image-20240325101018320" style="zoom: 33%;" /><p>DataGrip是JetBrains公司推出的管理数据库的产品（数据库客户端软件），功能非常强大，可以兼容各种数据库，另外，JetBrains公司还有一款知名的IDE开发工具IDEA，用户体验非常不错。</p><p>它的设计符合数据库管理员、开发人员需要。</p><p><strong>新建一个数据库连接</strong></p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325104838996.png" alt="image-20240325104838996" style="zoom:50%;" /><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325105517223.png" alt="image-20240325105517223" style="zoom: 50%;" /><p>最后测试连接，成功后应用。</p><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="什么是sql语句"><a href="#什么是sql语句" class="headerlink" title="什么是sql语句"></a>什么是sql语句</h2><p>SQL全称是结构化查询语言(Structured Query Language)，是<strong>关系型数据库管理系统都需要遵循的规范</strong>，是操作关系型数据库的语言，只要是关系型数据库，都支持SQL。</p><p>虽然所有的关系型数据库都支持SQL，但是不同的关系型数据库都会有一些特殊的东西(特有的函数或语法)。</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325105857759.png" alt="image-20240325105857759" style="zoom:67%;" /><h2 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h2><ul><li>DDL(Data Definition Language)：数据定义语言，用来定义数据库对象：数据库，表，列等。</li><li>DML (Data Manipulation Language)：数据操作语言，用来对数据库中表的记录进行增、删、改。</li><li>**DQL (Data Query Language)**：数据查询语言，用来查询数据库中表的记录。</li><li>DCL (Data Control Language)：数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户。</li></ul><h3 id="DDL数据定义语言-数据库操作"><a href="#DDL数据定义语言-数据库操作" class="headerlink" title="DDL数据定义语言-数据库操作"></a>DDL数据定义语言-数据库操作</h3><ol><li>创建数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br><span class="line"></span><br><span class="line"># 当数据库不存在时，创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"># 创建数据库并指定utf8编码</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称 CHARSET<span class="operator">=</span><span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 显示已有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示已有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"></span><br><span class="line"># 使用指定数据库</span><br><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除指定数据库</span><br><span class="line"># 注意：实际工作不要删除数据库！！！</span><br><span class="line"># 注意：实际工作不要删除数据库！！！</span><br><span class="line"># 注意：实际工作不要删除数据库！！！</span><br><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><h3 id="DDL数据定义语言-数据表操作"><a href="#DDL数据定义语言-数据表操作" class="headerlink" title="DDL数据定义语言-数据表操作"></a>DDL数据定义语言-数据表操作</h3><ol><li>创建数据表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型(长度) 约束,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型(长度) 约束,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型(长度) 约束</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 创建表举例</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category(</span><br><span class="line">    # 字段<span class="number">1</span>名称为cid，数据类型为整型，添加主键约束及非空约束</span><br><span class="line">    cid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    # 字段<span class="number">2</span>名称为cname，数据类型为<span class="type">varchar</span>，最大长度为<span class="number">100</span></span><br><span class="line">    cname <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>字段名：数据表中每一列的名称（列头）</p></li><li><p>数据类型：数据的存储形式（结构）</p></li><li><p>约束：数据存储遵循的规则</p></li></ul><ol start="2"><li>查看数据表和表结构</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前数据库中已有的数据表</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"># 查看指定数据表的结构</span><br><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改表名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改指定表的名称</span><br><span class="line">RENAME <span class="keyword">TABLE</span> 表名 <span class="keyword">TO</span> 新表名;删除数据表</span><br></pre></td></tr></table></figure><ol start="4"><li>删除数据表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改指定表的名称</span><br><span class="line">RENAME <span class="keyword">TABLE</span> 表名 <span class="keyword">TO</span> 新表名;</span><br><span class="line"></span><br><span class="line"># 删除指定的数据表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="DDL数据定义语言-数据类型和约束"><a href="#DDL数据定义语言-数据类型和约束" class="headerlink" title="DDL数据定义语言-数据类型和约束"></a>DDL数据定义语言-数据类型和约束</h3><p>可以在创建表的时候，为表添加一些强制性的验证，比如：<strong>数据类型和约束</strong>。</p><p><strong>数据类型</strong>是指在创建表的时候为表中字段指定数据类型，只有数据符合类型要求才能存储起来，使用数据类型的原则是：够用就行，尽量使用取值范围小的，而不用大的，这样可以更多的节省存储空间。</p><p>常用数据类型如下：</p><ul><li><p>整数：int，bit(存0或1)</p></li><li><p>小数：decimal，double</p></li><li><p>字符串：varchar，char，text</p></li><li><p>日期时间：date， time， datetime</p></li><li><p>枚举类型(enum)：比如表中有一列存性别：男、女</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  gender ENUM(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>数据类型说明：</p><ul><li>decimal表示浮点数，如 decimal(5，2) 表示共存5位数，小数占 2 位。</li><li>char表示固定长度的字符串，如char(3)，如果填充’ab’时会补一个空格为’ab ‘，3表示字符数</li><li>varchar表示可变长度的字符串，如varchar(3)，填充’ab’时就会存储’ab’，3表示字符数</li><li><strong>对于图片、音频、视频等文件，不存储在数据库中，而是上传到某个服务器上，然后在表中存储这个文件的保存路径。</strong></li><li>字符串 text 表示存储大文本，当字符大于 4000 时推荐使用， 比如技术博客。</li></ul><p><strong>数据约束</strong>是指数据在数据类型限定的基础上额外增加的要求。</p><p>常见的约束如下：</p><ul><li><strong>主键 primary key</strong>：物理上存储的顺序。 MySQL 建议所有表的主键字段都叫 id， 类型为 int unsigned。</li><li><strong>非空 not null</strong>：此字段不允许填写空值。NULL表示空</li><li><strong>惟一 unique</strong>：此字段的值不允许重复。</li><li><strong>默认 default</strong>：当不填写字段对应的值会使用默认值，如果填写时以填写为准。</li><li><strong>外键 foreign key</strong>：对关系字段进行约束， 当为关系字段填写值时， 会到关联的表中查询此值是否存在， 如果存在则填写成功， 如果不存在则填写失败并抛出异常。</li></ul><h3 id="DDL数据定义语言-数据约束进阶"><a href="#DDL数据定义语言-数据约束进阶" class="headerlink" title="DDL数据定义语言-数据约束进阶"></a>DDL数据定义语言-数据约束进阶</h3><p><strong>主键约束</strong>：</p><p>什么是主键？</p><ul><li>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</li><li>主键必须包含唯一的值。</li><li>主键列不能包含 NULL 值。</li><li>每个表都应该有一个主键，并且每个表只能有一个主键。</li></ul><p>主键约束操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 添加主键</span><br><span class="line"># 在创建数据表时添加</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="comment">-- 将 id 设置为表的主键</span></span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 在创建后添加约束(了解)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person1(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 创建表后，使用<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>关键字添加主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person1 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line"></span><br><span class="line"># 删除主键约束</span><br><span class="line"># 格式：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person1 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在创建表时添加主键自动增长</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person2(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 在创建表之后添加自动增长(了解)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person2 CHANGE id id <span class="type">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1）主键的值必须是唯一的。</p><p>2）在没设置主键自增之前，insert数据时，主键不能为NULL；在设置主键自增之后，insert数据时，主键位置可以为NULL，数据库会自动维护主键的值。</p></blockquote><p><strong>非空约束</strong>：</p><p>NOT NULL，非空约束，即对应列不接受空NULL值。</p><p>非空约束操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 非空约束 <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"># 创建表时添加非空约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person3(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>唯一约束</strong>：</p><p>UNIQUE，唯一约束，即对应列的值必须唯一。</p><p>唯一约束操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 唯一约束</span><br><span class="line"># 在创建表时添加唯一约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person4 (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>默认值</strong>：</p><p>DEFAULT，默认值，插入数据时当不填写字段对应的值会使用默认值，如果填写时以填写为准。</p><p>默认值操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认值</span><br><span class="line"># 在创建表时添加默认值</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person5 (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="DDL数据定义语言-数据表字段操作"><a href="#DDL数据定义语言-数据表字段操作" class="headerlink" title="DDL数据定义语言-数据表字段操作"></a>DDL数据定义语言-数据表字段操作</h3><p>在实际开发中，我们创建的数据库一般只满足第一版需求，随着日后的需求不断增加，数据维度不断扩展，还有更多的需求需要添加进来，此时，数据存储的结构就需要随之变化。</p><ol><li>添加表字段</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 注意：</span><br><span class="line"># <span class="number">1.</span> 约束按需求选择添加，可以没有约束，类型必须填写，并只能填写一个类型</span><br><span class="line"># <span class="number">2.</span> 表字段名称不能重复，否则会出现 Duplicate <span class="keyword">column</span> 错误</span><br><span class="line"># <span class="number">3.</span> 如果列名和关键字相同，需要在列名两边加 ``</span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  表名  <span class="keyword">ADD</span>  列名  类型(长度)  [约束];</span><br><span class="line"></span><br><span class="line"># 示例<span class="number">1</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> category <span class="keyword">ADD</span> num <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 示例<span class="number">2</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> category <span class="keyword">ADD</span> `<span class="keyword">desc</span>` <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改表字段</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧列名 新列名 类型(长度) 约束;</span><br><span class="line"></span><br><span class="line"># 示例<span class="number">1</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> category CHANGE `<span class="keyword">desc</span>` description <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>删除表字段</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br><span class="line"></span><br><span class="line"># 示例<span class="number">1</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> category <span class="keyword">DROP</span> num;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除和添加主键</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id,username);</span><br></pre></td></tr></table></figure><h3 id="DML数据操作语言-表记录增、改、删"><a href="#DML数据操作语言-表记录增、改、删" class="headerlink" title="DML数据操作语言-表记录增、改、删"></a>DML数据操作语言-表记录增、改、删</h3><p><strong>增加表记录</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 不指定字段插入：一次性插入一行，并且指定所有列</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..);</span><br><span class="line"></span><br><span class="line"># 指定字段插入：一次性插入一行，并且指定插入列</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表 (字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3.</span>..) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..);</span><br><span class="line"></span><br><span class="line"># 不指定字段插入：一次性添加多条记录</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..), (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..), ...;</span><br><span class="line"></span><br><span class="line"># 指定字段插入：一次性添加多条记录</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表 (字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3.</span>..) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..), (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..)...;</span><br></pre></td></tr></table></figure><p><strong>更新表记录</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 更新所有行</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>值, 字段名<span class="operator">=</span>值, ...;</span><br><span class="line"></span><br><span class="line"># 更新满足条件的行</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>值, 字段名<span class="operator">=</span>值, ... <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><p><strong>删除表记录：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 删除表中的所有数据：主键自增序列不清零</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br><span class="line"># 清空表数据：主键自增序列清零</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;# <span class="keyword">truncate</span></span><br><span class="line"></span><br><span class="line"># 删除表中满足条件的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><p><strong>补充</strong>：</p><p><strong>物理删除</strong>：DELETE FROM 就是物理删除，真的将表数据删除。</p><p><strong>逻辑删除</strong>：数据并没有真的从表中删除，而是将数据添加了一个删除标记。</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E7%89%A9%E7%90%86%E5%88%A0%E9%99%A4vs%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4.png" alt="物理删除vs逻辑删除" style="zoom:80%;" /><h3 id="DQL数据查询语言-简单查询"><a href="#DQL数据查询语言-简单查询" class="headerlink" title="DQL数据查询语言-简单查询"></a>DQL数据查询语言-简单查询</h3><p><strong>SQL条件查询</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><p>WHERE支持的条件运算符：</p><p>1）比较运算符 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span>：判断是否相等</span><br><span class="line"><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&gt;=</span></span><br><span class="line"><span class="operator">&lt;</span></span><br><span class="line"><span class="operator">&lt;=</span></span><br><span class="line"><span class="operator">!=</span>：不等于</span><br><span class="line"><span class="operator">&lt;&gt;</span>：不等于</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">600</span>;</span><br></pre></td></tr></table></figure><p>2）逻辑运算符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AND</span>：与</span><br><span class="line"><span class="keyword">OR</span>：或</span><br><span class="line"><span class="keyword">NOT</span>：非</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;=</span> <span class="number">200</span> <span class="keyword">AND</span> price <span class="operator">&lt;=</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><p>3）LIKE模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">%</span>：表示任意多个任意字符</span><br><span class="line">_：表示任意一个字符</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;%斯&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;__斯&#x27;</span>;</span><br></pre></td></tr></table></figure><p>4）范围查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BETWEEN</span> ... <span class="keyword">AND</span> ... 表示在一个连续的范围内查询</span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">IN</span> 表示在一个非连续的范围内查询</span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">IN</span> (<span class="number">600</span>, <span class="number">800</span>, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>5）空判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IS</span> <span class="keyword">NULL</span>：判断为空</span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> category_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>：判断不为空</span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> category_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="DQL数据查询语言-排序查询"><a href="#DQL数据查询语言-排序查询" class="headerlink" title="DQL数据查询语言-排序查询"></a>DQL数据查询语言-排序查询</h3><p><strong>SQL排序查询</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"># 按照指定的列对查询的结果进行排序，默认排序方式是<span class="keyword">ASC</span></span><br><span class="line"># <span class="keyword">ASC</span>：ascending，表示升序</span><br><span class="line"># <span class="keyword">DESC</span>：descending，表示降序</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>, 列<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>, ...;</span><br></pre></td></tr></table></figure><h3 id="DQL数据查询语言-聚合函数"><a href="#DQL数据查询语言-聚合函数" class="headerlink" title="DQL数据查询语言-聚合函数"></a>DQL数据查询语言-聚合函数</h3><p>成绩表，计算学生成绩平均分？计算学生成绩最大值？计算学生成绩最小值？</p><p>聚合函数又叫组函数、统计函数，通常是对表中的数据进行统计和计算，一般结合分组(GROUP BY)来使用，用于统计和计算分组数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">聚合函数(列名),</span><br><span class="line">...</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>常用的聚合函数</strong>：</p><ul><li>COUNT(col)：表示求指定列的总记录数</li><li>MAX(col)：表示求指定列的最大值</li><li>MIN(col)：表示求指定列的最小值</li><li>SUM(col)：表示求指定列的和</li><li>AVG(col)：表示求指定列的平均值</li></ul><p>注意：</p><ul><li><strong>聚合函数的计算会忽略 NULL 值</strong>。</li><li>例如：求四个产品的价格平均值，如果有一个价格是NULL，则忽略，求其他三个商品的平均值。</li></ul><h3 id="DQL数据查询语言-分组查询"><a href="#DQL数据查询语言-分组查询" class="headerlink" title="DQL数据查询语言-分组查询"></a>DQL数据查询语言-分组查询</h3><p>成绩表，分别计算男生和女生的平均成绩？计算不同班级的学生成绩的平均分？</p><p>分组查询就是将查询结果按照指定字段进行分组，指定字段数据值相同的分为一组。</p><p><strong>分组查询语法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    分组字段...,</span><br><span class="line">    聚合函数(字段)...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段<span class="number">1</span>, 分组字段<span class="number">2.</span>..;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    分组字段...,</span><br><span class="line">    聚合函数(字段)...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段<span class="number">1</span>, 分组字段<span class="number">2.</span>..</span><br><span class="line"><span class="keyword">HAVING</span> 条件表达式;</span><br></pre></td></tr></table></figure><ul><li>GROUP BY 分组字段：是指按照指定列的值对表数据进行分组，列值相同的数据行分为一组。</li><li>分组之后，可以查询每一组的分组字段，或对每一组的指定列的数据进行聚合操作。</li><li>HAVING 条件表达式：用来对分组聚合的结果进行过滤。</li></ul><p><strong>HAVING 与 WHERE 的区别：</strong></p><ul><li><p>HAVING 是对分组聚合之后的结果进行过滤，WHERE 是在分组前对表数据进行过滤。</p><ul><li>WHERE -&gt; GROUP BY -&gt; 聚合 -&gt; HAVING</li></ul></li><li><p>HAVING 后面可以使用聚合函数(统计函数)，WHERE后面不可以使用聚合函数。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意：分组聚合操作时，SELECT之后，除了分组字段和聚合函数可以查询，其他的不能查询（会报错）</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    category_id,</span><br><span class="line">    pname, <span class="comment">-- SQL认为这是查每一组的pname，但是每一组的pname可能有多个，所以不允许查询</span></span><br><span class="line">    <span class="built_in">MAX</span>(price)</span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id;</span><br></pre></td></tr></table></figure><p>如果出现上面的 sql 语句不报错，执行下面的sql，关闭mysql的测试模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.sql_mode <span class="operator">=</span> <span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="DQL数据查询语言-去重查询"><a href="#DQL数据查询语言-去重查询" class="headerlink" title="DQL数据查询语言-去重查询"></a>DQL数据查询语言-去重查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure><blockquote><p>DISTINCT只能写在查询字段的第一个位置</p></blockquote><h3 id="DQL数据查询语言-分页查询"><a href="#DQL数据查询语言-分页查询" class="headerlink" title="DQL数据查询语言-分页查询"></a>DQL数据查询语言-分页查询</h3><p><strong>分页查询语法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">LIMIT M, N;</span><br></pre></td></tr></table></figure><ul><li>M表示开始行索引，默认是0，代表从下标M的位置开始分页</li><li>N表示查询条数，即提取多少条数据</li></ul><p><strong>示例</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例1：获取 product 表中的第一条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product LIMIT <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例2：获取 product 表中下标为2记录开始的2条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product LIMIT <span class="number">2</span>, <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例4：当分页展示的数据不存在时，不报错，只不过查询不到任何数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="string">&#x27;c002&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price</span><br><span class="line">LIMIT <span class="number">25</span>, <span class="number">2</span>; <span class="comment">-- 没有第26行，但是结果不会报错，只是没有查询结果</span></span><br></pre></td></tr></table></figure><p><strong>SQL语句的执行顺序</strong>：</p><ol><li>FROM：<br>首先处理 FROM 子句，构建基础数据集。如果有多个表通过 JOIN 进行关联，则首先计算笛卡尔积，然后应用 JOIN 条件。<br>如果有表别名，此时也会解析并绑定到相应的表上。</li><li>JOINs：<br>根据 JOIN 条件（包括 INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN 等）连接来自 FROM 子句中各个表的数据行。</li><li>ON：<br>应用 ON 子句的条件来筛选出满足连接条件的数据行，将其加入到虚拟表中。</li><li>WHERE：<br>接下来执行 WHERE 子句，对已连接的基础数据集进行行级别的过滤，剔除不符合给定条件的行。</li><li>GROUP BY：<br>如果存在 GROUP BY 子句，则按照指定的列进行分组操作，形成新的分组集合，并对每个分组计算聚合函数值（如 SUM, COUNT, AVG, MIN, MAX 等）。</li><li>HAVING：<br>对分组后的结果集进一步应用 HAVING 子句的条件，这是针对分组后的聚合值的过滤。</li><li>SELECT：<br>执行 SELECT 子句，根据其定义的列表选择列，并按照是否使用了聚合函数决定是否返回每组的汇总值。</li><li>DISTINCT：<br>如果 SELECT 中包含了 DISTINCT 关键字，则在此阶段去除重复的行。</li><li>ORDER BY：<br>最后，对最终的结果集按 ORDER BY 子句指定的列进行排序。</li><li>LIMIT/OFFSET（可选）：<br>如果查询中有 LIMIT 或 OFFSET 子句，最后将结果集按照指定的数量和偏移量进行截断，用于实现分页或者其他类型的行数限制。</li></ol><h2 id="SQL复杂语句查询"><a href="#SQL复杂语句查询" class="headerlink" title="SQL复杂语句查询"></a>SQL复杂语句查询</h2><h3 id="多表关联查询-表之间的3种关联关系】"><a href="#多表关联查询-表之间的3种关联关系】" class="headerlink" title="多表关联查询-表之间的3种关联关系】"></a>多表关联查询-表之间的3种关联关系】</h3><p>实际开发中，一个项目通常需要很多张表才能完成，而这些表之间存在着某些联系。</p><p>表之间的关系可以分为如下 3 种：</p><blockquote><p>假设有 A 和 B 两张表</p></blockquote><p><strong>一对多关系</strong>：A表的一行记录对应B表的多行记录，反过来B表的一行记录只对应A表的一行记录</p><ul><li>举例：商品分类和商品表</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E4%B8%80%E5%AF%B9%E5%A4%9A.png" alt="一对多"></p><p><strong>多对多关系</strong>：A表的一行记录对应B表的多行记录，反过来B表的一行记录也对应A表的多行记录</p><ul><li>举例：学生表和课程表(选课关系)</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%25E4%25B8%2580%25E5%25AF%25B9%25E5%25A4%259A.png"></p><p><strong>一对一关系</strong>：A表的一行记录只对应B表的一行记录，反过来B表的一行记录也只对应A表的一行记录</p><ul><li>举例：员工基础信息表、员工详细信息表</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E4%B8%80%E5%AF%B9%E4%B8%80.png" alt="一对一"></p><h3 id="多表关联查询-外键约束"><a href="#多表关联查询-外键约束" class="headerlink" title="多表关联查询-外键约束"></a>多表关联查询-外键约束</h3><p>假设有两张表A和B，B表的某列的值引用了A表的主键列的值，则B表的这一列称为B表的<strong>外键列</strong>(Foreign Key)，其中A表称为<strong>主表</strong>，B表称为<strong>从表</strong>。</p><blockquote><p>在一对多关联关系建表时，在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键</p></blockquote><p><strong>外键约束语法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> KEY (外键字段) <span class="keyword">REFERENCES</span> 主表名(主键)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例1：新建分类表 category 和 商品表 product</span></span><br><span class="line"># 创建分类表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category (</span><br><span class="line">    cid   <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY, # 分类id</span><br><span class="line">    cname <span class="type">VARCHAR</span>(<span class="number">100</span>) # 分类名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> category;</span><br><span class="line"></span><br><span class="line"># 商品表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    pid         <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    pname       <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    price       <span class="keyword">DOUBLE</span>,</span><br><span class="line">    category_id <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="comment">-- 商品分类id，外键</span></span><br><span class="line">    # <span class="keyword">CONSTRAINT</span> 约束</span><br><span class="line">    # <span class="keyword">REFERENCES</span> 引用</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> KEY (category_id) <span class="keyword">REFERENCES</span> category (cid) # 添加外键约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>外键约束的作用</strong>：</p><ul><li><p>保证插入数据的准确性：从表中外键的值在主表主键中必须有对应的值</p></li><li><p>保证删除数据的完整性：主表的主键值被从表外键引用之后，主表中对应的记录不能被删除</p></li></ul><p><strong>外键约束的缺点</strong>：</p><ul><li>过分强调或者说使用主键／外键会平添开发难度</li><li>添加外键，也会降低数据增删改的性能</li><li><strong>注意：实际开发，很少使用外键约束，而是从代码层面保持表之间的关系</strong></li></ul><p><strong>外键其他操作</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表的约束</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line"><span class="comment">-- 查看表的约束</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products;</span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> products <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY products_ibfk_1;</span><br></pre></td></tr></table></figure><h3 id="多表关联查询-关联查询操作"><a href="#多表关联查询-关联查询操作" class="headerlink" title="多表关联查询-关联查询操作"></a>多表关联查询-关联查询操作</h3><p>笛卡尔积(交叉连接)：将左表的每一行数据和右表的每一行数据分别进行关联，组成新的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> <span class="comment">--左表</span></span><br><span class="line"><span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="comment">--右表; -- CROSS JOIN</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>有条件连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> <span class="comment">--左表</span></span><br><span class="line"><span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="comment">--右表</span></span><br><span class="line"><span class="keyword">ON</span> 连接条件; <span class="comment">-- 比如：ON 表1.字段=表2.字段;</span></span><br></pre></td></tr></table></figure><p><strong>关联查询的语法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> 左表</span><br><span class="line"><span class="keyword">INNER</span><span class="operator">|</span><span class="keyword">LEFT</span><span class="operator">|</span><span class="keyword">RIGHT</span><span class="operator">|</span><span class="keyword">FULL</span> <span class="keyword">JOIN</span> 右表</span><br><span class="line"><span class="keyword">ON</span> 连接条件; <span class="comment">-- 比如：ON 左表.列名 = 右表.列名</span></span><br></pre></td></tr></table></figure><p><strong>关联查询的 4 种分类</strong>：</p><p>1）<strong>内连接：INNER JOIN，简写为 JOIN</strong></p><ul><li><p>返回两张表都满足连接条件的部分(交集)</p></li><li><p>左右两表关联时，满足关联条件的数据，才会出现在最终的关联结果中</p></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E5%86%85%E8%BF%9E%E6%8E%A5.png" alt="内连接"></p><p>2）<strong>左外连接：LEFT OUTER JOIN，简写为 LEFT JOIN</strong></p><ul><li><p>左侧+交集部分</p></li><li><p>左右两表关联时，除满足关联条件的数据会出现在最终的关联结果中，左表中不能和右边表联的数据也会出现，右表侧自动填充为NULL</p></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E5%B7%A6%E8%BF%9E%E6%8E%A5.png" alt="左连接"></p><p>3）<strong>右外连接：RIGHT OUTER JOIN，简写为 RIGHT JOIN</strong></p><ul><li><p>右侧+交集部分</p></li><li><p>左右两表关联时，除满足关联条件的数据会出现在最终的关联结果中，右表中不能和左表关联的数据也会出现，左表侧自动填充为NULL</p></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%25E5%258F%25B3%25E8%25BF%259E%25E6%258E%25A5.png" alt="右连接"></p><p>4）<strong>全外连接：FULL OUTER JOIN，简写为 FULL JOIN</strong></p><blockquote><p>注意：MySQL数据库不支持全连接，需要将左连接和右连接的结果利用 UNION 关键字组合实现全连接的效果。</p></blockquote><ul><li><p>左侧 + 交集部分 + 右则</p></li><li><p>左右两表关联时，除满足关联条件的数据会出现在最终的关联结果中，左右两表不能相互关联的数据也都会出现，对应侧自动填充为NULL</p></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/%E5%85%A8%E8%BF%9E%E6%8E%A5.png" alt="全连接"></p><h3 id="SQL查询时使用AS关键字起别名"><a href="#SQL查询时使用AS关键字起别名" class="headerlink" title="SQL查询时使用AS关键字起别名"></a>SQL查询时使用AS关键字起别名</h3><p>在SQL查询时，可以使用 AS 给表或者字段起别名，AS可以省略</p><p>1）给查询字段和表起别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例1：每个所有分类的所有商品，没有商品的分类和没有分类的商品都不显示</span></span><br><span class="line"><span class="comment">-- 查询字段：分类id、分类名称、商品id、商品名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    category.id <span class="keyword">AS</span> cid, <span class="comment">-- 类别id</span></span><br><span class="line">    category.name <span class="keyword">AS</span> cname, <span class="comment">-- 类别名称</span></span><br><span class="line">    products.id <span class="keyword">AS</span> pid, <span class="comment">-- 商品id</span></span><br><span class="line">    products.name <span class="keyword">AS</span> pname <span class="comment">-- 商品名称</span></span><br><span class="line"><span class="keyword">FROM</span> category c <span class="comment">-- 左表</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> products p <span class="comment">-- 右表</span></span><br><span class="line"><span class="keyword">ON</span> category.id <span class="operator">=</span> products.category_id;</span><br></pre></td></tr></table></figure><h3 id="多表关联查询-自关联查询"><a href="#多表关联查询-自关联查询" class="headerlink" title="多表关联查询-自关联查询"></a>多表关联查询-自关联查询</h3><p>进行关联时，左表和右表是同一个表，这样的连接叫自关联。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个地区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> areas(</span><br><span class="line">    id <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    pid <span class="type">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110000&#x27;</span>, <span class="string">&#x27;北京市&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110100&#x27;</span>, <span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;110000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110101&#x27;</span>, <span class="string">&#x27;东城区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110102&#x27;</span>, <span class="string">&#x27;西城区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110105&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110106&#x27;</span>, <span class="string">&#x27;丰台区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110107&#x27;</span>, <span class="string">&#x27;石景山区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110108&#x27;</span>, <span class="string">&#x27;海淀区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110109&#x27;</span>, <span class="string">&#x27;门头沟区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110111&#x27;</span>, <span class="string">&#x27;房山区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110112&#x27;</span>, <span class="string">&#x27;通州区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110113&#x27;</span>, <span class="string">&#x27;顺义区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110114&#x27;</span>, <span class="string">&#x27;昌平区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110115&#x27;</span>, <span class="string">&#x27;大兴区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110116&#x27;</span>, <span class="string">&#x27;怀柔区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110117&#x27;</span>, <span class="string">&#x27;平谷区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110118&#x27;</span>, <span class="string">&#x27;密云区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `areas` <span class="keyword">VALUES</span> (<span class="string">&#x27;110119&#x27;</span>, <span class="string">&#x27;延庆区&#x27;</span>, <span class="string">&#x27;110100&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例1：查询&#x27;山西省&#x27;下的所有市的信息</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">--   市级地区id、市级地区名称、父级地区id、父级地区名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    c.id,</span><br><span class="line">    c.title,</span><br><span class="line">    c.pid,</span><br><span class="line">    p.title</span><br><span class="line"><span class="keyword">FROM</span> areas c <span class="comment">-- 理解为市表</span></span><br><span class="line"><span class="keyword">JOIN</span> areas p <span class="comment">-- 理解为省表</span></span><br><span class="line"><span class="keyword">ON</span> c.pid <span class="operator">=</span> p.id</span><br><span class="line"><span class="keyword">WHERE</span> p.title <span class="operator">=</span> <span class="string">&#x27;山西省&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：自关联时，需要给表起别名。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 自关联的妙用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales (</span><br><span class="line">    <span class="keyword">month</span> <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 月份</span></span><br><span class="line">    revenue <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="comment">-- 销售额</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="number">1000</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="number">800</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="number">1200</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="number">2000</span>),</span><br><span class="line">    (<span class="number">5</span>, <span class="number">1800</span>),</span><br><span class="line">    (<span class="number">6</span>, <span class="number">5000</span>),</span><br><span class="line">    (<span class="number">7</span>, <span class="number">3000</span>),</span><br><span class="line">    (<span class="number">8</span>, <span class="number">2500</span>),</span><br><span class="line">    (<span class="number">9</span>, <span class="number">1600</span>),</span><br><span class="line">    (<span class="number">10</span>, <span class="number">2200</span>),</span><br><span class="line">    (<span class="number">11</span>, <span class="number">900</span>),</span><br><span class="line">    (<span class="number">12</span>, <span class="number">4600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例：查询每个月的销售额和前一个月的销售额的差值</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">--  月份、当前月销售额、前一个月销售额，当前月销售额和前一个月销售额的差</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.month,</span><br><span class="line">    a.revenue, <span class="comment">-- 当前月销售额</span></span><br><span class="line">    b.revenue, <span class="comment">-- 上个月销售额</span></span><br><span class="line">    a.revenue <span class="operator">-</span> b.revenue <span class="comment">-- 当前月销售额 和 上个月销售额 的差值</span></span><br><span class="line"><span class="keyword">FROM</span> sales a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sales b</span><br><span class="line"><span class="keyword">ON</span> a.month <span class="operator">=</span> b.month <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.month;</span><br></pre></td></tr></table></figure><h3 id="SQL子查询操作"><a href="#SQL子查询操作" class="headerlink" title="SQL子查询操作"></a>SQL子查询操作</h3><blockquote><p>在一个 SELECT 语句中，嵌入了另外一个 SELECT 语句，那么被嵌入的 SELECT 语句称之为子查询语句，外部那个SELECT 语句则称为主查询。</p></blockquote><p><strong>主查询和子查询的关系</strong>：</p><p>1）子查询是嵌入到主查询中</p><p>2）<strong>子查询是辅助主查询的，要么充当条件，要么充当数据源，要么充当查询字段</strong></p><p>3）子查询是可以独立存在的语句，是一条完整的 SELECT 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例1：查询当前商品大于平均价格的商品</span></span><br><span class="line"><span class="comment">-- ① 查询商品的平均价格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ② 查询所有商品</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ③ 将第①步的结果作为第②步的查询条件</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例4：查询不同类型商品的平均价格</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">--  id(分类id)、cname(分类名称)、avg(分类商品平均价格)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    category_id,</span><br><span class="line">    cname,</span><br><span class="line">    avg</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        category_id,</span><br><span class="line">        <span class="built_in">AVG</span>(price) <span class="keyword">AS</span> `avg`</span><br><span class="line">    <span class="keyword">FROM</span> products</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br><span class="line">) a <span class="comment">-- 子查询作用数据源时，必须起别名</span></span><br><span class="line"><span class="keyword">JOIN</span> category b</span><br><span class="line"><span class="keyword">ON</span> a.category_id <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例5：针对 students 表的数据，计算每个同学的Score分数和整体平均分数的差值</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> students) <span class="keyword">AS</span> `avg`,</span><br><span class="line">    Score <span class="operator">-</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> students) <span class="keyword">AS</span> `difference`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h3 id="SQL窗口函数简介"><a href="#SQL窗口函数简介" class="headerlink" title="SQL窗口函数简介"></a>SQL窗口函数简介</h3><p>窗口函数是 MySQL8.0 以后加入的功能，之前需要通过定义临时变量和大量的子查询才能完成的工作，使用窗口函数实现起来更加简洁高效。<strong>同时窗口函数也是面试的高频考点</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例1：针对 students 表的数据，计算每个同学的Score分数和整体平均分数的差值</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `avg`,</span><br><span class="line">    Score <span class="operator">-</span> <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `difference`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><strong>窗口函数的优点</strong>：</p><p>1）<strong>简单</strong></p><ul><li>窗口函数更易于使用。在上面的示例中，与使用聚合函数然后合并结果相比，使用窗口函数的 SQL 语句更加简单。</li></ul><p>2）<strong>快速</strong></p><ul><li>这一点与上一点相关，使用窗口函数比使用替代方法要快得多。当你处理成百上千个千兆字节的数据时，这非常有用。</li></ul><p>3）<strong>多功能性</strong></p><ul><li>最重要的是，窗口函数具有多种功能，比如：添加移动平均线、添加行号和滞后数据等等。</li></ul><h3 id="窗口函数-基本用法"><a href="#窗口函数-基本用法" class="headerlink" title="窗口函数-基本用法"></a>窗口函数-基本用法</h3><p><strong>OVER()关键字</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    字段,</span><br><span class="line">    ...,</span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">window</span> <span class="keyword">function</span><span class="operator">&gt;</span> <span class="keyword">OVER</span>(...)</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;window function&gt;</code> 表示使用的窗口函数，窗口函数可以使用之前已经学过的聚合函数，比如<code>COUNT()</code>、<code>SUM()</code>、<code>AVG()</code>等，也可以是其他函数，比如 ranking 排序函数等，后面的课程中会介绍</li><li><code>OVER(...)</code>的作用就是设置每行数据关联的一组数据范围，<code>OVER()</code>时，每行关联的数据范围都是整张表的数据。</li></ul><p>SQL举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `avg`,</span><br><span class="line">    Score <span class="operator">-</span> <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `difference`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><strong>典型应用场景</strong>：</p><p>1）场景1：<strong>计算每个值和整体平均值的差值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：计算每个学生的 Score 分数和所有学生整体平均分的差值。</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID,</span><br><span class="line">    Name,</span><br><span class="line">    Gender,</span><br><span class="line">    Score,</span><br><span class="line">    <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `AVG_Score`,</span><br><span class="line">    Score <span class="operator">-</span> <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `difference`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>2）场景2：<strong>计算每个值占整体之和的占比</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：计算每个学生的Score分数占所有学生分数之和的百分比</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID,</span><br><span class="line">    Name,</span><br><span class="line">    Gender,</span><br><span class="line">    Score,</span><br><span class="line">    <span class="built_in">SUM</span>(Score) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `sum`,</span><br><span class="line">    <span class="comment">-- 计算百分比：要把 Score / SUM(Score) OVER() 的结果再乘 100</span></span><br><span class="line">    Score <span class="operator">/</span> <span class="built_in">SUM</span>(Score) <span class="keyword">OVER</span>() <span class="operator">*</span> <span class="number">100</span> <span class="keyword">AS</span> `ratio`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h3 id="窗口函数-PARTITION-BY分区"><a href="#窗口函数-PARTITION-BY分区" class="headerlink" title="窗口函数-PARTITION BY分区"></a>窗口函数-PARTITION BY分区</h3><p>如何计算每个学生的 Score 分数和同性别学生平均分的差值？</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1.png" alt="1"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ID, name,Gender,Score<span class="operator">-</span><span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span> (),Score,<span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>()学生平均分 <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><strong>PARTITION BY分区</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 基础语法</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    字段,</span><br><span class="line">    ...,</span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">window</span> <span class="keyword">function</span><span class="operator">&gt;</span> <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> 字段, ...)</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li><code>PARTITION BY 列名, ...</code>的作用是按照指定列的值对整张表的数据进行分区，OVER()中没有PARTITION BY时，整张表就是一个分区。</li><li>分区之后，在处理每行数据时，<code>&lt;window function&gt;</code>是作用在该行数据关联的分区上，不再是整张表上</li></ul><p>SQL举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID,</span><br><span class="line">    Name,</span><br><span class="line">    Gender,</span><br><span class="line">    Score,</span><br><span class="line">    <span class="comment">-- PARTITION BY Gender：按照性别对整张表的数据进行分区，此处会分成2个区</span></span><br><span class="line">    <span class="comment">-- AVG(Score)：处理每行数据时，应用 AVG 对该行关联分区数据中的 Score 求平均</span></span><br><span class="line">    <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Gender) <span class="keyword">AS</span> `Avg`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p><strong>应用示例</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：计算每个学生的 Score 分数和同性别学生平均分的差值</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID,</span><br><span class="line">    Name,</span><br><span class="line">    Gender,</span><br><span class="line">    Score,</span><br><span class="line">    <span class="comment">-- PARTITION BY Gender：按照性别对整张表的数据进行分区，此处会分成2个区</span></span><br><span class="line">    <span class="comment">-- AVG(Score)：处理每行数据时，应用 AVG 对该行关联分区数据中的 Score 求平均</span></span><br><span class="line">    <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Gender) <span class="keyword">AS</span> `Avg`,</span><br><span class="line">    Score <span class="operator">-</span> <span class="built_in">AVG</span>(Score) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Gender) <span class="keyword">AS</span> `difference`</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：计算每人各科分数与对应科目最高分的占比</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score,</span><br><span class="line">    <span class="comment">-- 处理每行数据时，计算相同科目成绩的最高分</span></span><br><span class="line">    <span class="built_in">MAX</span>(score) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> course) <span class="keyword">AS</span> `max`,</span><br><span class="line">    score <span class="operator">/</span> <span class="built_in">MAX</span>(score) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> course) <span class="keyword">AS</span> `ratio`</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure><h3 id="窗口函数-排名函数使用"><a href="#窗口函数-排名函数使用" class="headerlink" title="窗口函数-排名函数使用"></a>窗口函数-排名函数使用</h3><p>如何将 tb_score 中的数据，按照分数从高到低产生一列排名序号？</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240328200534493.png" alt="image-20240328200534493"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score,</span><br><span class="line">    <span class="comment">-- 此处 OVER() 中没有 PARTITION BY，所以整张表就是一个分区</span></span><br><span class="line">    <span class="comment">-- ORDER BY score DESC：按照 score 对每个分区内的数据降序排序</span></span><br><span class="line">    <span class="comment">-- RANK() 窗口函数的作用是对每个分区内的每一行产生一个排名序号</span></span><br><span class="line">    <span class="built_in">DENSE_RANK</span>()  <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">as</span> `rank`</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure><p><strong>排名函数</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    字段,</span><br><span class="line">    ...,</span><br><span class="line">    <span class="operator">&lt;</span>ranking <span class="keyword">function</span><span class="operator">&gt;</span> <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名, ...)</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>OVER() 中可以指定 ORDER BY 按照指定列对每一行关联的分区数据进行排序，然后使用排名函数对分区内的每行数据产生一个排名序号</li></ul><blockquote><p>注意：RANK()产生的排名序号可能会不连续(<strong>当有并列情况时</strong>)</p></blockquote><p><strong>不同的排名函数</strong>：</p><ul><li><code>RANK()</code>：产生的排名序号 ，有并列的情况出现时序号不连续</li><li><code>DENSE_RANK()</code> ：产生的排名序号是连续的，有并列的情况时序号会重复</li><li><code>ROW_NUMBER()</code> ：返回连续唯一的行号，排名序号不会重复</li></ul><p>SQL举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score,</span><br><span class="line">    <span class="comment">-- 可能重复不连续</span></span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">as</span> `rank`,</span><br><span class="line">    <span class="comment">-- 一定连续，可能重复</span></span><br><span class="line">    <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">as</span> `dense_rank`,</span><br><span class="line">    <span class="comment">-- 一定连续，且不重复</span></span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">as</span> `row_number`</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240328201228210.png" alt="image-20240328201228210"></p><p><strong>PARTITION BY和排序函数配合使用</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：按照不同科目，对学生的分数从高到低进行排名(要求：连续可重复)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score,</span><br><span class="line">    <span class="comment">-- 对每个分区内的每一行产生排名序号</span></span><br><span class="line">    <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(</span><br><span class="line">        <span class="comment">-- 将整张表的数据按照科目进行分区</span></span><br><span class="line">        <span class="keyword">PARTITION</span> <span class="keyword">BY</span> course</span><br><span class="line">        <span class="comment">-- 对每个分区内的数据按照score降序排列</span></span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">    ) <span class="keyword">AS</span> `dense_rank`</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240328201240795.png" alt="image-20240328201240795"></p><p><strong>排名函数典型应用</strong>：</p><p>1）场景：<strong>获取指定排名的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：获取每个科目，排名第二的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        name,</span><br><span class="line">        course,</span><br><span class="line">        score,</span><br><span class="line">        <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(</span><br><span class="line">            <span class="keyword">PARTITION</span> <span class="keyword">BY</span> course</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">        ) <span class="keyword">AS</span> `dense_rank`</span><br><span class="line">    <span class="keyword">FROM</span> tb_score</span><br><span class="line">) s</span><br><span class="line"><span class="keyword">WHERE</span> `dense_rank` <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>CTE公用表表达式</strong>：</p><p>CTE(公用表表达式)：Common Table Expresssion，类似于子查询，相当于一张临时表，可以在 CTE 结果的基础上，进行进一步的查询操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> some_name <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">--- your CTE ---</span></span><br><span class="line">    <span class="comment">-- 完整的 SQL 语句</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ... </span><br><span class="line"><span class="keyword">FROM</span> some_name</span><br></pre></td></tr></table></figure><ul><li>需要给CTE起一个名字（上面的例子中使用了<code>some_name</code>)，具体的查询语句写在括号中</li><li>在括号后面，就可以通过<code>SELECT</code> 将CTE的结果当作一张表来使用</li><li>将CTE称为“内部查询”，其后的部分称为“外部查询”</li><li>需要先定义CTE，即在外部查询的<code>SELECT</code>之前定义CTE</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：获取每个科目，排名第二的学生信息</span></span><br><span class="line"><span class="keyword">WITH</span> ranking <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        name,</span><br><span class="line">        course,</span><br><span class="line">        score,</span><br><span class="line">        <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(</span><br><span class="line">            <span class="keyword">PARTITION</span> <span class="keyword">BY</span> course</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">        ) <span class="keyword">AS</span> `dense_rank`</span><br><span class="line">    <span class="keyword">FROM</span> tb_score</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    course,</span><br><span class="line">    score</span><br><span class="line"><span class="keyword">FROM</span> ranking</span><br><span class="line"><span class="keyword">WHERE</span> `dense_rank` <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="窗口函数-自定义-window-frame"><a href="#窗口函数-自定义-window-frame" class="headerlink" title="窗口函数-自定义 window frame"></a>窗口函数-自定义 window frame</h3><p>现有一张某年度的月销量信息表 tb_sales，数据如下：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240331194507672.png" alt="image-20240331194507672"></p><p><strong>分区数据范围和window frame数据范围</strong>：</p><p>在使用窗口函数处理表中的每行数据时，每行数据关联的数据有两种：</p><p>1）<strong>每行数据关联的分区数据</strong></p><ul><li>OVER()中什么都不写时，整张表默认是一个分区</li><li>OVER(PARTITION BY 列名, …)：整张表按照指定的列被进行了分区</li></ul><p>2）<strong>每行数据关联的window frame数据</strong></p><ul><li><code>每行关联的window frame数据范围 &lt;= 每行关联的分区数据范围</code></li><li><code>window frame数据范围是分区数据范围的子集</code></li></ul><p>目前我们所学的窗口函数中，有些窗口函数作用在分区上，有些函数作用在window frame上：</p><ul><li><strong>聚合函数(SUM、AVG、COUNT、MAX、MIN)作用于每行关联的window frame数据上</strong></li><li><strong>排名函数(RANK、DENSE_RANK、ROW_NUMBER)作用于每行关联的分区数据上</strong></li></ul><p><strong>自定义 window frame 范围</strong>：</p><blockquote><p>自定义 window frame 范围有两种方式： <code>ROWS</code> 和 <code>RANGE</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段,</span><br><span class="line">...,</span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">window</span> <span class="keyword">function</span><span class="operator">&gt;</span> <span class="keyword">OVER</span> (</span><br><span class="line">      <span class="keyword">PARTITION</span> <span class="keyword">BY</span> 列名, ...</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名, ...</span><br><span class="line">      [<span class="keyword">ROWS</span><span class="operator">|</span><span class="keyword">RANGE</span>] <span class="keyword">BETWEEN</span> 上限 <span class="keyword">AND</span> 下限</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li><code>PARTITION BY 列名, ...</code>：按照指定的列，对整张表的数据进行分区</li><li><code>ORDER BY 列名, ...</code>：按照指定的列，对每个分区内的数据进行排序</li><li><code>[ROWS|RANGE] BETWEEN 上限 AND 下限</code>：在排序之后的分区数据内，设置每行关联的window frame数据范围</li></ul><p><strong>上限和下限的设置</strong>：</p><ul><li><code>UNBOUNDED PRECEDING</code>：对上限无限制</li><li><code>PRECEDING</code>： 当前行之前的 <strong>n</strong> 行 （ <strong>n</strong> 表示具体数字如：5 <code>PRECEDING</code> ）</li><li><code>CURRENT ROW</code>：仅当前行</li><li><code>FOLLOWING</code>：当前行之后的 <strong>n</strong> 行 （ <strong>n</strong> 表示具体数字如：5 <code>FOLLOWING</code> ）</li><li><code>UNBOUNDED FOLLOWING</code>：对下限无限制</li><li>注意：<strong>上限需要在下限之前</strong>，比如：<code>ROWS BETWEEN CURRENT ROW AND UNBOUNDED PRECEDING</code> 是错误的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：计算截止到每个月的累计销量。1月：1月销量，2月：1月销量+2月销量，3月：1月销量+2月销量+3月销量，依次类推</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    sales,</span><br><span class="line">    <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span>(</span><br><span class="line">        # 按照 <span class="keyword">month</span> 对每个分区(注：此处就一个分区<span class="operator">-</span><span class="operator">&gt;</span>整张表)数据进行排序</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line">        # 指定每行关联分区的 <span class="keyword">window</span> frame 范围</span><br><span class="line">        # UNBOUNDED PRECEDING：上限不限制</span><br><span class="line">        # <span class="keyword">CURRENT</span> <span class="type">ROW</span>：当前行</span><br><span class="line">        <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span></span><br><span class="line">    ) <span class="keyword">AS</span> `running_total`</span><br><span class="line"><span class="keyword">FROM</span> tb_sales;</span><br></pre></td></tr></table></figure><p><strong>window frame定义的简略写法</strong>：</p><p>自定义 window frame 的边界时，如果使用了<code>CURRENT ROW</code>作为上边界或者下边界，可以使用如下简略写法：</p><ul><li><code>ROWS UNBOUNDED PRECEDING</code> 等价于 <code>BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code></li><li><code>ROWS n PRECEDING</code> 等价于 <code>BETWEEN n PRECEDING AND CURRENT ROW</code></li><li><code>ROWS CURRENT ROW</code> 等价于 <code>BETWEEN CURRENT ROW AND CURRENT ROW</code></li><li>注意，简略写法不适合<code>FOLLOWING</code>的情况</li></ul><p><strong>ROWS和RANGE的区别</strong>：</p><p>ROWS和RANGE关键字，都可以用来自定义 windowframe 范围：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> 上限 <span class="keyword">AND</span> 下限</span><br><span class="line"><span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> 上限 <span class="keyword">AND</span> 下限</span><br></pre></td></tr></table></figure><p>但两者区别如下：</p><ul><li><p>ROWS是根据分区数据排序之后，每一行的 row_number 确定每行关联的 window frame 范围的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CURRENT</span> <span class="type">ROW</span>：仅代表当前行</span><br><span class="line"></span><br><span class="line"># 假设某一行数据的 row_number 为<span class="number">5</span>，<span class="keyword">ROWS</span>自定义<span class="keyword">window</span> frame如下：</span><br><span class="line"><span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="number">2</span> FOLLOWING</span><br><span class="line"># 则这一行关联的<span class="keyword">window</span> frame是：<span class="number">5</span><span class="number">-2</span> <span class="operator">&lt;=</span> row_number <span class="operator">&lt;=</span> <span class="number">5</span><span class="operator">+</span><span class="number">2</span> 的数据</span><br></pre></td></tr></table></figure></li><li><p>RANGE是根据分区数据排序之后，每一行的排序列的值确实每行关联的 window frame 范围的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CURRENT</span> <span class="type">ROW</span>: 代表和当前行排序列的值相同的所有行</span><br><span class="line"></span><br><span class="line"># 假设某一行排序列的值为<span class="number">5</span>，RNAGE自定义<span class="keyword">window</span> frame如下：</span><br><span class="line"><span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="number">2</span> FOLLOWING</span><br><span class="line"># 则这一行关联的<span class="keyword">window</span> frame是：<span class="number">5</span><span class="number">-2</span> <span class="operator">&lt;=</span> 排序列的值 <span class="operator">&lt;=</span> <span class="number">5</span><span class="operator">+</span><span class="number">2</span> 的数据</span><br></pre></td></tr></table></figure></li></ul><p><strong>默认的window frame</strong>：</p><p>在 OVER 中只要添加了 ORDER BY，在没有写ROWS或RANGE的情况下，会有一个默认的 window frame范围：</p><ul><li>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：计算截止到每个月的累计销量。1月：1月销量，2月：1月销量+2月销量，3月：1月销量+2月销量+3月销量，依次类推</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    sales,</span><br><span class="line">    <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span>(</span><br><span class="line">        # 按照 <span class="keyword">month</span> 对每个分区(注：此处就一个分区<span class="operator">-</span><span class="operator">&gt;</span>整张表)数据进行排序</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line">        # <span class="keyword">OVER</span> 中添加了 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 之后，默认的 <span class="keyword">window</span> frame 范围</span><br><span class="line">        # <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span></span><br><span class="line">    ) <span class="keyword">AS</span> `running_total`</span><br><span class="line"><span class="keyword">FROM</span> tb_sales;</span><br></pre></td></tr></table></figure><p><strong>PARTITION BY和自定义window frame</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：利用tb_revenue表计算每个商店截止到每个月的累计销售额。1月：1月销量，2月：1月销量+2月销量，3月：1月销量+2月销量+3月销量，依次类推</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    store_id,</span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    revenue,</span><br><span class="line">    <span class="built_in">SUM</span>(revenue) <span class="keyword">OVER</span>(</span><br><span class="line">        # 按照 store_id 对整张表的数据进行分区</span><br><span class="line">        <span class="keyword">PARTITION</span> <span class="keyword">BY</span> store_id</span><br><span class="line">        # 按照 <span class="keyword">month</span> 对每个分区内的数据排序</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line">        # 设置 每行关联的分区 <span class="keyword">window</span> frame 范围</span><br><span class="line">        <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span></span><br><span class="line">    ) <span class="keyword">AS</span> `sum`</span><br><span class="line"><span class="keyword">FROM</span> tb_revenue;</span><br></pre></td></tr></table></figure><h3 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h3><p><strong>SQL语句的执行顺序如下</strong>：</p><blockquote><p>FROM &gt; JOIN &gt; ON &gt; WHERE &gt; GROUP BY &gt; 聚合函数 &gt; HAVING &gt; <strong>窗口函数</strong> &gt; SELECT &gt; DISTINCT  &gt; ORDER BY &gt; LIMIT</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1) FROM</span><br><span class="line">2) JOIN</span><br><span class="line">3) ON</span><br><span class="line">4) WHERE</span><br><span class="line">5) GROUP BY</span><br><span class="line">6) 聚合函数</span><br><span class="line">7) HAVING</span><br><span class="line">8) 窗口函数</span><br><span class="line">9) SELECT</span><br><span class="line">10) DISTINCT【去重】</span><br><span class="line">11) ORDER BY</span><br><span class="line">12) LIMIT</span><br><span class="line"></span><br><span class="line">SELECT ⑨</span><br><span class="line">[DISTINCT] 字段, ⑩</span><br><span class="line">...,</span><br><span class="line">聚合函数(字段), ⑥</span><br><span class="line">窗口函数 ⑧</span><br><span class="line">FROM 表1 ①</span><br><span class="line">JOIN 表2 ②</span><br><span class="line">ON 关联条件 ③</span><br><span class="line">WHERE 条件 ④</span><br><span class="line">GROUP BY 分组字段, ... ⑤</span><br><span class="line">HAVING 条件 ⑦</span><br><span class="line">ORDER BY 排序字段, ... ⑪</span><br><span class="line">LIMIT M, N; ⑫</span><br></pre></td></tr></table></figure><h3 id="不能使用窗口函数的3种情况"><a href="#不能使用窗口函数的3种情况" class="headerlink" title="不能使用窗口函数的3种情况"></a>不能使用窗口函数的3种情况</h3><p><strong>情况1：不能在 WHRER 子句中使用窗口函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：查询出所有拍卖中，最终成交价格高于平均成交价格的拍卖</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- id、final_price(最终成交价格)</span></span><br><span class="line"></span><br><span class="line"># 错误示例</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">final_price</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">WHERE</span> final_price <span class="operator">&gt;</span> <span class="built_in">AVG</span>(final_price) <span class="keyword">OVER</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">final_price</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">WHERE</span> final_price <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">AVG</span>(final_price)</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>情况2：不能在 HAVING 子句中使用窗口函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：查询出国内平均成交价格高于所有拍卖平均成交价格的国家</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- country(国家)、avg(该国家所有拍卖的平均成交价)</span></span><br><span class="line"></span><br><span class="line"># 错误示例</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  country,</span><br><span class="line">  <span class="built_in">AVG</span>(final_price)  <span class="keyword">AS</span> `avg`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(final_price) <span class="operator">&gt;</span> <span class="built_in">AVG</span>(final_price) <span class="keyword">OVER</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 正确写法(子查询)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">country,</span><br><span class="line"><span class="built_in">AVG</span>(final_price) <span class="keyword">AS</span> `avg`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(final_price) <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">AVG</span>(final_price)</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>情况3：不能在 GROUP BY子句中使用窗口函数</strong></p><p>– 需求：将所有的拍卖信息按照浏览次数排序，并均匀分成4组，然后计算每组的最小和最大浏览量<br>– 查询结果字段：<br>–     quartile(分组序号)、min_views(当前组最小浏览量)、max_view(当前组最大浏览量)</p><p>错误示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">NTILE</span>(<span class="number">4</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span>) <span class="keyword">AS</span> `quartile`,</span><br><span class="line">  <span class="built_in">MIN</span>(views) <span class="keyword">AS</span> `min_views`,</span><br><span class="line">  <span class="built_in">MAX</span>(views) <span class="keyword">AS</span> `max_views`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">NTILE</span>(<span class="number">4</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure><p>正确实现(子查询)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：将所有的拍卖信息按照浏览次数排序，并均匀分成4组，然后计算每组的最小和最大浏览量</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- quartile(分组序号)、min_views(当前组最小浏览量)、max_view(当前组最大浏览量)</span></span><br><span class="line"></span><br><span class="line"># 错误示例</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">NTILE</span>(<span class="number">4</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span>) <span class="keyword">AS</span> `quartile`,</span><br><span class="line">  <span class="built_in">MIN</span>(views) <span class="keyword">AS</span> `min_views`,</span><br><span class="line">  <span class="built_in">MAX</span>(views) <span class="keyword">AS</span> `max_views`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">NTILE</span>(<span class="number">4</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span>);</span><br><span class="line"></span><br><span class="line"># 正确实现(子查询)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">quartile,</span><br><span class="line"><span class="built_in">MIN</span>(views) <span class="keyword">AS</span> `min_views`,</span><br><span class="line"><span class="built_in">MAX</span>(views) <span class="keyword">AS</span> `max_views`</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">views,</span><br><span class="line"><span class="built_in">NTILE</span>(<span class="number">4</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span>) <span class="keyword">AS</span> `quartile`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line">) c</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> quartile;</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY和窗口函数配合使用"><a href="#GROUP-BY和窗口函数配合使用" class="headerlink" title="GROUP BY和窗口函数配合使用"></a>GROUP BY和窗口函数配合使用</h3><blockquote><p>GROUP BY和窗口函数配合使用时，<strong>窗口函数处理的分组聚合之后的结果</strong>，不再是原始的表数据。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 练习1</span></span><br><span class="line"><span class="comment">-- 需求：将拍卖数据按国家分组，返回如下信息</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- country(国家)、min(每组最少参与人数)、avg(所有组最少参与人数的平均值)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">country,</span><br><span class="line"><span class="built_in">MIN</span>(participants) <span class="keyword">AS</span> `min`,</span><br><span class="line"><span class="built_in">AVG</span>(<span class="built_in">MIN</span>(participants)) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `avg`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 下面的SQL效果等价于上面的SQL</span></span><br><span class="line"><span class="keyword">WITH</span> temp_tb <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        country,</span><br><span class="line">        <span class="built_in">MIN</span>(participants) <span class="keyword">AS</span> `min`</span><br><span class="line">    <span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">country,</span><br><span class="line">`min`,</span><br><span class="line"><span class="built_in">AVG</span>(`min`) <span class="keyword">OVER</span>() <span class="keyword">AS</span> `avg`</span><br><span class="line"><span class="keyword">FROM</span> temp_tb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序函数使用聚合函数的结果</span></span><br><span class="line"><span class="comment">-- 练习2</span></span><br><span class="line"><span class="comment">-- 需求：按国家进行分组，计算了每个国家的拍卖次数，再根据拍卖次数对国家进行排名</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- country(国家)、count(该国家的拍卖次数)、rank(按拍卖次数的排名)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">country,</span><br><span class="line"><span class="built_in">COUNT</span>(id) <span class="keyword">AS</span> `count`,</span><br><span class="line"><span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(id) <span class="keyword">DESC</span>) <span class="keyword">AS</span> `rank`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对GROUP BY分组后的数据使用PARTITION BY</span></span><br><span class="line"><span class="comment">-- 练习3</span></span><br><span class="line"><span class="comment">-- 需求：将所有的数据按照国家和拍卖结束时间分组，返回如下信息</span></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- country(国家)、ended(拍卖结束时间)、views_sum(该分组浏览量总和)、country_views_sum(分组聚合结果中不同国家拍卖的总浏览量)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">country,</span><br><span class="line">ended,</span><br><span class="line"><span class="built_in">SUM</span>(views) <span class="keyword">AS</span> `views_sum`,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="built_in">SUM</span>(views)) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> country) <span class="keyword">AS</span> `country_views_sum`</span><br><span class="line"><span class="keyword">FROM</span> auction</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country, ended;</span><br></pre></td></tr></table></figure><h2 id="SQL常用内置函数"><a href="#SQL常用内置函数" class="headerlink" title="SQL常用内置函数"></a>SQL常用内置函数</h2><h3 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h3><p>我们在做数据处理和开发的过程中，经常需要利用SQL在MySQL或HIVE、SPARK中使用一些SQL函数，对时间日期类型的数据进行操作。</p><p><strong>时间日期函数分类</strong>：</p><p>1）获取当前时间的函数，比如当前的年月日或时间戳</p><p>2）计算时间差的相关函数，比如两个日期之间相差多少天，一个日期90天后是几月几号</p><p>3）获取年月日的函数，从一个时间中提取具体的年份、月份</p><p>4）时间转换函数，比如将2021-10-05转换为时间戳</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取当前datetime类型的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算指定间隔的时间日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">&#x27;2007-9-27&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">90</span> <span class="keyword">DAY</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例：获取当前时间3个小时以前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">-3</span> <span class="keyword">HOUR</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算两个时间日期之间的天数差</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2021-03-22 09:00:00&#x27;</span>, <span class="string">&#x27;2018-03-20 07:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提取时间日期中的年月日</span></span><br><span class="line"><span class="comment">-- 获取当前日期中的年份</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取2021-10-02 09:00中月份</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;2021-10-02 09:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取时间日期中的日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="string">&#x27;2021-10-02 09:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间戳转字符串</span></span><br><span class="line"><span class="keyword">select</span> FROM_UNIXTIME(<span class="number">1355932800</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> FROM_UNIXTIME(<span class="number">0</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>我们在做数据处理和开发的过程中，经常需要利用SQL在MySQL或HIVE、SPARK中使用一些SQL函数；和时间函数一样，也经常需要对字符串类型的数据进行处理操作。</p><p><strong>字符串函数分类</strong>：</p><p>1）大小写转换、反转</p><p>2）对字符串进行拼接、删除前后缀，或做局部替换</p><p>3）获取局部的子串，字符串的字符个数以及存储长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符串拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;马走日&#x27;</span>, <span class="string">&#x27;象飞田&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="number">10.15</span>, <span class="string">&#x27;%&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从左或右截取n个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;仙人指路，急进中兵&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;仙人指路，急进中兵&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定截取范围，从第一个截取到第五个（包含第一个）</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;字符串&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 从第五个截取到最后</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;字符串&#x27;</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定分隔符拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;^_^&#x27;</span>, <span class="string">&#x27;马走日&#x27;</span>, <span class="string">&#x27;象飞田&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ROUND(X, n)：对 X 进行四舍五入，保留 n 位小数，默认n为0</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.6</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.333</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">2.689</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MOD(X, Y)：求 X 除以 Y 的余数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- FORMAT(X, n)：对 X 进行四舍五入，保留 n 位小数，以##,###,###.###格式显示</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">1001.6</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">123456.333</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">234567.689</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- FLOOR(x)：向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- CEIL(X)：向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">2.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GREATEST(expr1, expr2, expr3, ...)：返回列表中的最大值</span></span><br><span class="line"><span class="keyword">SELECT</span> GREATEST(<span class="number">3</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">8</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEAST(expr1, expr2, expr3, ...)：返回列表中的最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">3</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">8</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h2 id="CASE-WHEN-IF语法"><a href="#CASE-WHEN-IF语法" class="headerlink" title="CASE WHEN,IF语法"></a>CASE WHEN,IF语法</h2><h3 id="简介和基本使用"><a href="#简介和基本使用" class="headerlink" title="简介和基本使用"></a>简介和基本使用</h3><p>CASE WHEN可以用于SQL查询时，进行条件判断操作。功能类似于Python中的if…elif…else判断。</p><p><strong>基础语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN 条件1 THEN 值1</span><br><span class="line">WHEN 条件2 THEN 值2</span><br><span class="line">WHEN 条件3 THEN 值3</span><br><span class="line">...</span><br><span class="line">ELSE 值n</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>查询示例</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：查询所有学生的成绩信息，并将学生的成绩分成5个等级，查询结果中需要有一个学生的成绩等级列，</span></span><br><span class="line"><span class="comment">-- 成绩等级如下：</span></span><br><span class="line"><span class="comment">-- 优秀：90分及以上</span></span><br><span class="line"><span class="comment">-- 良好：80-90，包含80</span></span><br><span class="line"><span class="comment">-- 中等：70-80，包含70</span></span><br><span class="line"><span class="comment">-- 及格：60-70，包含60</span></span><br><span class="line"><span class="comment">-- 不及格：60分以下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- name(姓名)、course(科目)、score(成绩)、grade(成绩等级)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;优秀&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span> <span class="string">&#x27;良好&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&#x27;中等&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;及格&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> `grade`</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure><h3 id="CASE-WHEN配合GROUP-BY进行使用"><a href="#CASE-WHEN配合GROUP-BY进行使用" class="headerlink" title="CASE WHEN配合GROUP BY进行使用"></a>CASE WHEN配合GROUP BY进行使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询结果字段：</span></span><br><span class="line"><span class="comment">-- course(科目)、gte_90(该科目90分以上是学生人数)、lt_90(该科目90分以下的学生人数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    course,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> name</span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> `gte_90`,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&lt;</span> <span class="number">90</span> <span class="keyword">THEN</span> name</span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> `lt_90`</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> course;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    course,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> `gte_90`,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> score <span class="operator">&lt;</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> `lt_90`</span><br><span class="line"><span class="keyword">FROM</span> tb_score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> course;</span><br></pre></td></tr></table></figure><h3 id="IF-语句使用"><a href="#IF-语句使用" class="headerlink" title="IF 语句使用"></a>IF 语句使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：UPDATE 表名 SET 列名=值 [WHERE 条件];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：实现一条update更新商品的价格，要求价格高于3000（包含）的降价10%，低于3000的上涨20%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line"><span class="keyword">SET</span> Price<span class="operator">=</span>IF(Price <span class="operator">&gt;=</span> <span class="number">3000</span>, Price <span class="operator">*</span> <span class="number">0.9</span>, Price <span class="operator">*</span> <span class="number">1.2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：查询所有学生的成绩信息，并将学生的成绩分成5个等级，查询结果中需要有一个学生的成绩等级列，</span></span><br><span class="line"><span class="comment">-- 成绩等级如下：</span></span><br><span class="line"><span class="comment">-- 优秀：90分及以上</span></span><br><span class="line"><span class="comment">-- 良好：80-90，包含80</span></span><br><span class="line"><span class="comment">-- 中等：70-80，包含70</span></span><br><span class="line"><span class="comment">-- 及格：60-70，包含60</span></span><br><span class="line"><span class="comment">-- 不及格：60分以下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,</span><br><span class="line">       IF(score <span class="operator">&gt;=</span> <span class="number">90</span>, <span class="string">&#x27;优秀&#x27;</span>,</span><br><span class="line">          IF(score <span class="operator">&gt;=</span> <span class="number">80</span>, <span class="string">&#x27;良好&#x27;</span>, IF(score <span class="operator">&gt;=</span> <span class="number">70</span>, <span class="string">&#x27;中等&#x27;</span>, IF(score <span class="operator">&gt;=</span> <span class="number">60</span>, <span class="string">&#x27;及格&#x27;</span>, <span class="string">&#x27;不及格&#x27;</span>)))) level</span><br><span class="line"><span class="keyword">FROM</span> tb_score;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 从0到1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring从0到1</title>
      <link href="/year/03/27/spring%E4%BB%8E0%E5%88%B01/"/>
      <url>/year/03/27/spring%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-what-is-Spring"><a href="#1-what-is-Spring" class="headerlink" title="1. what is Spring?"></a>1. what is Spring?</h1><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由“Spring 之父”Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。</p><h2 id="1-1-Spring-的狭义和广义"><a href="#1-1-Spring-的狭义和广义" class="headerlink" title="1.1  Spring 的狭义和广义"></a>1.1  <strong>Spring 的狭义和广义</strong></h2><blockquote><p><strong>此篇主要讲的是侠义</strong></p></blockquote><p><strong>广义的 Spring：Spring 技术栈</strong></p><p>广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。</p><p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p><p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p><p><strong>狭义的 Spring：Spring Framework</strong></p><p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p><p>Spring 框架是一个分层的、面向切面的 Java 应用程序的一站式轻量级解决方案，它是 Spring 技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p><p>Spring 有两个最核心模块： IoC 和 AOP。</p><p><strong>IoC</strong>：Inverse of Control 的简写，译为“控制反转”，指把创建对象过程交给 Spring 进行管理。</p><p><strong>AOP</strong>：Aspect Oriented Programming 的简写，译为“面向切面编程”。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20221207142746771.png" alt="image-20221207142746771"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240327201956949.png" alt="image-20240327201956949"></p><p>上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。</p><p><strong>①Spring Core（核心容器）</strong></p><p>spring core提供了IOC,DI,Bean配置装载创建的核心实现。核心概念： Beans、BeanFactory、BeanDefinitions、ApplicationContext。</p><ul><li><p>spring-core ：IOC和DI的基本实现</p></li><li><p>spring-beans：BeanFactory和Bean的装配管理(BeanFactory)</p></li><li><p>spring-context：Spring context上下文，即IOC容器(AppliactionContext)</p></li><li><p>spring-expression：spring表达式语言</p></li></ul><p><strong>②Spring AOP</strong></p><ul><li>spring-aop：面向切面编程的应用模块，整合ASM，CGLib，JDK Proxy</li><li>spring-aspects：集成AspectJ，AOP应用框架</li><li>spring-instrument：动态Class Loading模块</li></ul><p><strong>③Spring Data Access</strong></p><ul><li>spring-jdbc：spring对JDBC的封装，用于简化jdbc操作</li><li>spring-orm：java对象与数据库数据的映射框架</li><li>spring-oxm：对象与xml文件的映射框架</li><li>spring-jms： Spring对Java Message Service(java消息服务)的封装，用于服务之间相互通信</li><li>spring-tx：spring jdbc事务管理</li></ul><p><strong>④Spring Web</strong></p><ul><li>spring-web：最基础的web支持，建立于spring-context之上，通过servlet或listener来初始化IOC容器</li><li>spring-webmvc：实现web mvc</li><li>spring-websocket：与前端的全双工通信协议</li><li>spring-webflux：Spring 5.0提供的，用于取代传统java servlet，非阻塞式Reactive Web框架，异步，非阻塞，事件驱动的服务</li></ul><p><strong>⑤Spring Message</strong></p><ul><li>Spring-messaging：spring 4.0提供的，为Spring集成一些基础的报文传送服务</li></ul><p><strong>⑥Spring test</strong></p><ul><li>spring-test：集成测试支持，主要是对junit的封装</li></ul><h1 id="2-Spring入门"><a href="#2-Spring入门" class="headerlink" title="2. Spring入门"></a>2. Spring入门</h1><h2 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h2><ul><li><p>JDK：Java19<strong>（Spring6要求JDK最低版本是Java17）</strong></p></li><li><p>Maven：3.8</p></li><li><p>Spring：6.0.2</p></li></ul><h2 id="2-2-idea构建模块"><a href="#2-2-idea构建模块" class="headerlink" title="2.2 idea构建模块"></a>2.2 idea构建模块</h2><p>这里用maven聚合，父模块聚合子模块。在idea中，依次单击 File -&gt; New -&gt; Project -&gt; New Project</p><ol><li><strong>创建父模块</strong></li></ol><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320172328990.png" alt="image-20240320172328990" style="zoom: 67%;" /><ol start="2"><li><strong>创建第一个子工程</strong></li></ol><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320172508634.png" alt="image-20240320172508634" style="zoom:67%;" /><ol start="3"><li><strong>整体项目结构</strong></li></ol><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320172933621.png" alt="image-20240320172933621"></p><h2 id="2-3-程序开发"><a href="#2-3-程序开发" class="headerlink" title="2.3 程序开发"></a>2.3 程序开发</h2><ol><li><strong>依赖引入</strong></li></ol><p><a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a></p><p>在子模块添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>谁便创建一个class写一个方法输出hellowold</strong></li></ol><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320193511402.png" alt="image-20240320193511402" style="zoom:67%;" /><ol start="3"><li><strong>创建配置文件</strong></li></ol><p>在resource目录下可以直接右键新建一个spring配置的xml文件，名字随便取</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320193704085.png" alt="image-20240320193704085" style="zoom: 50%;" /><p>然后在配置文件的benas标签里面添加一个bean</p><p><strong><bean id="user" class="com.gozei.spring6.User"></bean></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">    通过bean标签配置IOC容器所管理的bean</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">        id：设置bean的唯一标识</span></span><br><span class="line"><span class="comment">        class：设置bean所对应类型的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.spring6.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>创建测试类测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载Spring配置文件，对象创建</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">classPathXmlApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)classPathXmlApplicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//调用对象方法</span></span><br><span class="line">        user.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hello成功</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320195432642.png" alt="image-20240320195432642" style="zoom:67%;" /><h2 id="2-4-程序分析"><a href="#2-4-程序分析" class="headerlink" title="2.4 程序分析"></a>2.4 程序分析</h2><ol><li><strong>底层是怎么创建对象的，是通过反射机制调用无参数构造方法吗？</strong></li></ol><p>给user类添加一个无参构造,再运行一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320203402679.png" alt="image-20240320203402679" style="zoom:67%;" /><p>确实是调用的无参构造</p><ol start="2"><li><strong>Spring是如何创建对象的呢？原理是什么？</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dom4j解析beans.xml文件，从中获取class属性值，类的全类名</span></span><br><span class="line"> <span class="comment">// 通过反射机制调用无参数构造方法创建对象</span></span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.gozei.spring6.bean.HelloWorld&quot;</span>);</span><br><span class="line"> <span class="comment">//Object obj = clazz.newInstance();</span></span><br><span class="line"> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>并且把创建好的对象放到了一个map集合（容器）里面</strong></li></ol><p>bean对象最终存储在spring容器中，在spring源码底层就是一个map集合，存储bean的map在<strong>DefaultListableBeanFactory</strong>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>Spring容器加载到Bean类时 , 会把这个类的描述信息, 以包名加类名的方式存到beanDefinitionMap 中,<br>Map&lt;String,BeanDefinition&gt; , 其中 String是Key , 默认是类名首字母小写 , BeanDefinition , 存的是类的定义(描述信息) , 我们通常叫BeanDefinition接口为 : bean的定义对象。</p><h2 id="2-5-启用Log4j2日志框架"><a href="#2-5-启用Log4j2日志框架" class="headerlink" title="2.5 启用Log4j2日志框架"></a>2.5 启用Log4j2日志框架</h2><p>在项目开发中，日志十分的重要，不管是记录运行情况还是定位线上问题，都离不开对日志的分析。日志记录了系统行为的时间、地点、状态等相关信息，能够帮助我们了解并监控系统状态，在发生错误或者接近某种危险状态时能够及时提醒我们处理，同时在系统产生问题时，能够帮助我们快速的定位、诊断并解决问题。</p><ol><li><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> <strong>添加配置文件</strong></p></li></ol><blockquote><p>在类的根路径下提供log4j2.xml配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span></span><br><span class="line"><span class="comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span></span><br><span class="line"><span class="comment">                info：信息，输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">                warn：警告，输出警告的信息</span></span><br><span class="line"><span class="comment">                error：错误，输出错误信息</span></span><br><span class="line"><span class="comment">                fatal：严重错误</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的信息，</span></span><br><span class="line"><span class="comment">            每次大小超过size，</span></span><br><span class="line"><span class="comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span></span><br><span class="line"><span class="comment">            作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span></span><br><span class="line"><span class="comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-IoC容器"><a href="#3-IoC容器" class="headerlink" title="3. IoC容器"></a>3. IoC容器</h1><p>IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</p><p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p><p>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。</p><h2 id="3-1-控制反转（IoC）"><a href="#3-1-控制反转（IoC）" class="headerlink" title="3.1 控制反转（IoC）"></a>3.1 控制反转（IoC）</h2><ul><li><p>控制反转是一种思想。</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p></li><li><p>控制反转，反转的是什么？</p></li><li><ul><li>将对象的创建权利交出去，交给第三方容器负责。</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li></ul></li><li><p>控制反转这种思想如何实现呢？</p></li><li><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h2 id="3-2-依赖注入"><a href="#3-2-依赖注入" class="headerlink" title="3.2 依赖注入"></a>3.2 依赖注入</h2><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p><p><strong>依赖注入：</strong></p><ul><li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set注入</li><li>第二种：构造注入</li></ul><p>所以结论是：IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现。</p><p><strong>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</strong></p><h2 id="3-3-IoC容器在Spring的实现"><a href="#3-3-IoC容器在Spring的实现" class="headerlink" title="3.3 IoC容器在Spring的实现"></a>3.3 IoC容器在Spring的实现</h2><p>Spring 的 IoC 容器就是 IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：</p><p><strong>①BeanFactory</strong></p><p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p><strong>②ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><p><strong>③ApplicationContext的主要实现类</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img005.png" alt="img005"></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h2 id="3-4-基于XML管理Bean"><a href="#3-4-基于XML管理Bean" class="headerlink" title="3.4 基于XML管理Bean"></a>3.4 基于XML管理Bean</h2><h3 id="3-4-1-如何获取bean"><a href="#3-4-1-如何获取bean" class="headerlink" title="3.4.1 如何获取bean"></a>3.4.1 如何获取bean</h3><p>依旧创建一个user类，并且配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="①方式一：根据id获取"><a href="#①方式一：根据id获取" class="headerlink" title="①方式一：根据id获取"></a>①方式一：根据id获取</h4><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载Spring配置文件，对象创建</span></span><br><span class="line">      <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">classPathXmlApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//通过bean标签里面的id获取对象</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)classPathXmlApplicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="comment">//调用对象方法</span></span><br><span class="line">      user.hello();</span><br></pre></td></tr></table></figure><h4 id="②方式二：根据类型获取"><a href="#②方式二：根据类型获取" class="headerlink" title="②方式二：根据类型获取"></a><strong>②方式二：根据类型获取</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)classPathXmlApplicationContext.getBean(User.class);</span><br></pre></td></tr></table></figure><h4 id="③方式三：根据id和类型"><a href="#③方式三：根据id和类型" class="headerlink" title="③方式三：根据id和类型"></a><strong>③方式三：根据id和类型</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> classPathXmlApplicationContext.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br></pre></td></tr></table></figure><h4 id="④注意的地方"><a href="#④注意的地方" class="headerlink" title="④注意的地方"></a>④注意的地方</h4><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><p>当IOC容器中一共配置了两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据类型获取时会抛出异常：</p><blockquote><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type ‘com.gozei.spring6.bean.HelloWorld’ available: expected single matching bean but found 2: helloworldOne,helloworldTwo</p></blockquote><h4 id="⑤扩展知识"><a href="#⑤扩展知识" class="headerlink" title="⑤扩展知识"></a>⑤扩展知识</h4><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是bean唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean不唯一</p></blockquote><p><strong>结论</strong></p><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><p>java中，instanceof运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回true，否则返回false。也就是说：用instanceof关键字做判断时， instanceof 操作符的左右操作必须有继承或实现关系</p><h3 id="3-4-2-依赖注入之setter注入"><a href="#3-4-2-依赖注入之setter注入" class="headerlink" title="3.4.2 依赖注入之setter注入"></a>3.4.2 依赖注入之setter注入</h3><ol><li>整个Person类，<strong>添加get，set方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置bean时为属性赋值</strong></li></ol><p>bean.xml</p><blockquote><p>ps：name属性的值必须和getset方法的名字相关，如果你的get方法是getName，那么属性值最好是name（去掉get把Name的首字母改成小写）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>输出测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//加载Spring配置文件，对象创建</span></span><br><span class="line">       <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">classPathXmlApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//获取对象</span></span><br><span class="line">       <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> classPathXmlApplicationContext.getBean(Person.class);</span><br><span class="line">       System.out.println(person);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240320222424275.png" alt="image-20240320222424275" style="zoom:67%;" /><h3 id="3-4-3-依赖注入之构造器注入"><a href="#3-4-3-依赖注入之构造器注入" class="headerlink" title="3.4.3 依赖注入之构造器注入"></a>3.4.3 依赖注入之构造器注入</h3><ol><li>在person类里面添加有参构造</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是无参构造&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是有参构造&quot;</span>)</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul></blockquote><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBean5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置文件，对象创建</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">classPathXmlApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> classPathXmlApplicationContext.getBean(<span class="string">&quot;person2&quot;</span>,Person.class);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240321160925066.png" alt="image-20240321160925066" style="zoom:67%;" /><p>可以看到调用了构造器</p><h3 id="3-4-4-特殊值处理"><a href="#3-4-4-特殊值处理" class="headerlink" title="3.4.4 特殊值处理"></a>3.4.4 特殊值处理</h3><ol><li><strong>null值</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不能这么写，这样是赋值null字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>xml实体</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在XML文档中表示文本 &quot;3 &lt; 5&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>3 <span class="symbol">&amp;lt;</span> 5<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>CDATA节</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">    这里可以包含任意的文本内容，特殊字符不需要转义</span><br><span class="line">]]&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-5-为对象类型属性赋值"><a href="#3-4-5-为对象类型属性赋值" class="headerlink" title="3.4.5 为对象类型属性赋值"></a>3.4.5 为对象类型属性赋值</h3><p>创建一个部门类和一个员工类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dpt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dpt</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dpt</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//打印部门名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;部门名称：&quot;</span>+dname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Dpt dpt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略getset方法和构造器，记得加。。。。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印员工信息并调用部门方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot; age:&quot;</span>+age);</span><br><span class="line">        dpt.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法一-引用外部bean"><a href="#方法一-引用外部bean" class="headerlink" title="方法一: 引用外部bean"></a>方法一: 引用外部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dpt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开发部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.gozei.spring6.bean.Clazz’ for property ‘clazz’: no matching editors or conversion strategy found </p><p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dpt&quot;</span>/&gt;</span><span class="comment">&lt;!--错误的--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二：内部bean"><a href="#方式二：内部bean" class="headerlink" title="方式二：内部bean"></a>方式二：内部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开发部&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法三：-级联属性赋值"><a href="#方法三：-级联属性赋值" class="headerlink" title="方法三： 级联属性赋值"></a>方法三： 级联属性赋值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开发部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dpt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联属性赋值,更改dpt的name--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打胶部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321194022312.png" alt="image-20240321194022312" style="zoom:67%;" /><h3 id="3-4-6-为数组类型属性赋值"><a href="#3-4-6-为数组类型属性赋值" class="headerlink" title="3.4.6 为数组类型属性赋值"></a>3.4.6 为数组类型属性赋值</h3><ol><li>在emp类添加一个数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">    <span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dpt&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即使是数组将list标签改成array也行</p><ol start="3"><li>测试结果</li></ol><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321195607996.png" alt="image-20240321195607996" style="zoom:67%;" /><h3 id="3-4-7-为集合类型属性赋值"><a href="#3-4-7-为集合类型属性赋值" class="headerlink" title="3.4.7 为集合类型属性赋值"></a>3.4.7 为集合类型属性赋值</h3><h4 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h4><ol><li>在dpt类添加一个List集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Dpt</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Dpt</span><span class="params">(String dname, List&lt;Emp&gt; emps)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.dname = dname;</span><br><span class="line">       <span class="built_in">this</span>.emps = emps;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刀哥&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打火机部&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;虎哥&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dpt&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dpt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dpt2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开发部&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;emps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;emp1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;emp2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果list集合里面的属性类型是Integer或者String，list标签里面可以这样写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dpt3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc2.Dpt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;对策委员会&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empsname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>白子<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>星野<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>铃音<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>若若米<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>黑猫<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321201101843.png" alt="image-20240321201101843" style="zoom:67%;" /><hr><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321201853801.png" alt="image-20240321201853801" style="zoom:67%;" /><h4 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h4><p>创建教师类Teacher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getset构造器。。。。</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个学生类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Teacher&gt; map;</span><br><span class="line">    <span class="comment">//getset构造器。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>bean来</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Teac</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;property name=&quot;</span><span class="attr">teacherId</span>&quot; <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Gozei&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Teac</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;property name=&quot;</span><span class="attr">teacherId</span>&quot; <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haku&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Stude</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;property name=&quot;</span><span class="attr">name</span>&quot; <span class="attr">value</span>=<span class="string">&quot;白子&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>teacher1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacher1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>teacher2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacher2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测</li></ol><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321210322934.png" alt="image-20240321210322934" style="zoom:67%;" /><h3 id="3-4-8-引用集合类型的bean"><a href="#3-4-8-引用集合类型的bean" class="headerlink" title="3.4.8 引用集合类型的bean"></a>3.4.8 引用集合类型的bean</h3><blockquote><p>使用util:list、util:map标签必须引入相应的命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240321220218490.png" alt="image-20240321220218490" style="zoom: 50%;" /><p>bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;mapteacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacher1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacher1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacher2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacher2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;星野&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapteacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;野宫&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapteacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;liststudent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;student2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;student3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;liststudent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试输出</p><p>懒，没有</p><h3 id="3-4-9-p命名空间"><a href="#3-4-9-p命名空间" class="headerlink" title="3.4.9 p命名空间"></a>3.4.9 p命名空间</h3><p>引入p命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;mapteacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacher1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacher1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;teacher2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;teacher2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.com.gozei.iocmap.Student&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;Gozei&quot;</span> <span class="attr">p:map-ref</span>=<span class="string">&quot;mapteacher&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-10-引入外部属性文件"><a href="#3-4-10-引入外部属性文件" class="headerlink" title="3.4.10 引入外部属性文件"></a>3.4.10 引入外部属性文件</h3><p><strong>①加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②创建外部属性文件</strong></p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240322083913359.png" alt="image-20240322083913359" style="zoom:67%;" /><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">你的用户名</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">你的密码</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/你的库名?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>③引入属性文件</strong></p><p>引入context 名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用 <a href="context:property-placeholder">context:property-placeholder</a> 元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>⑤测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ac.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-11-bean的作用域"><a href="#3-4-11-bean的作用域" class="headerlink" title="3.4.11 bean的作用域"></a>3.4.11 bean的作用域</h3><p><strong>①概念</strong></p><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><p><strong>②🍕在bean标签添加scope=singleton</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③测试打印</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240322090823694.png" alt="image-20240322090823694"></p><p>如果是prototype将不会有这句话打印</p><h3 id="3-4-12-bean生命周期"><a href="#3-4-12-bean生命周期" class="headerlink" title="3.4.12 bean生命周期"></a>3.4.12 bean生命周期</h3><p><strong>①具体的生命周期过程</strong></p><ul><li><strong>Bean定义（Bean Definition）：</strong><br>Spring IoC容器通过读取XML配置文件、注解或Java配置类来加载和解析Bean的定义信息，包括Bean的类名、作用域、初始化方法、销毁方法、依赖关系等。</li><li><strong>实例化（Instantiation）：</strong><br>当IoC容器需要创建一个Bean实例时，它会根据Bean的定义信息通过反射机制调用无参数构造函数创建Bean的实例。</li><li><strong>属性赋值（Dependency Injection，DI）：</strong><br>容器接下来会为Bean的所有属性设置值，这通常包括注入其他Bean或者其他类型的值（如基本类型、集合等）。</li><li><strong>BeanPostProcessor前置处理：</strong><br>执行实现了BeanPostProcessor接口的类中的postProcessBeforeInitialization方法。在这个阶段可以对新创建的对象进行额外的加工，例如AOP代理增强、自定义字段赋值等。</li><li><strong>初始化（Initialization）：</strong><br>如果Bean定义中有指定初始化方法（通过init-method属性或者使用@PostConstruct注解的方法），此时将调用该初始化方法。</li><li><strong>Bean后置处理器的后处理 ：</strong><br>调用BeanPostProcessor接口实现类的postProcessAfterInitialization方法，再次提供一次对初始化后的Bean对象进行加工的机会。</li><li><strong>Bean就绪并投入使用：</strong>经过上述所有阶段之后，Bean已经被完全初始化并准备好被应用程序使用。</li><li><strong>容器关闭前的清理（Destruction）</strong>：<br>当Spring容器关闭时，对于单例作用域的Bean（以及某些情况下的其他作用域），容器会执行Bean定义中指定的销毁方法（通过destroy-method属性或者使用@PreDestroy注解的方法），以便进行资源释放或其他清理操作。</li><li><strong>Bean从容器注销（Disposal）：</strong><br>清理完毕后，Bean将从容器中移除，并完成其生命周期。</li></ul><p><strong>②修改类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：1、创建对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：2、依赖注入&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：3、初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：5、销毁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p><p><strong>③配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>destroy-method对于原型（Prototype）作用域的Bean通常不会自动调用，因为这类Bean由容器创建后，其生命周期管理权就交给了客户端代码，而非容器自身。</strong></p></blockquote><p><strong>④测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beanzq.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">    context.close();<span class="comment">//此处调用容器关闭，才能调用destroyMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤bean的后置处理器</strong></p><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p><p>创建bean的后置处理器：整个MyBeanProcessor继承BeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IOC容器中配置后置处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>测试一下</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240322181317788.png" alt="image-20240322181317788" style="zoom: 50%;" /><h3 id="3-4-13-FactoryBean"><a href="#3-4-13-FactoryBean" class="headerlink" title="3.4.13 FactoryBean"></a>3.4.13 <strong>FactoryBean</strong></h3><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><p><strong>创建类UserFactoryBean实现FactoryBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;gozei&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.ioc.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>测试</strong></p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240322200848983.png" alt="image-20240322200848983" style="zoom:67%;" /><h3 id="3-4-14-基于xml自动装配"><a href="#3-4-14-基于xml自动装配" class="headerlink" title="3.4.14 基于xml自动装配"></a>3.4.14 基于xml自动装配</h3><blockquote><p>自动装配：</p><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p></blockquote><ol><li><strong>创建类UserController</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserServiceImpl实现接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserDaoImpl实现接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置bean</strong></li></ol><blockquote><p>使用bean标签的autowire属性设置自动装配效果</p><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usercontroller&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userdaoimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.dao.UserDaoImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userserviceimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.service.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">ans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行测试</strong></li></ol><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240322203102362.png" alt="image-20240322203102362" style="zoom:67%;" /><blockquote><p><strong>自动装配方式：byName</strong></p><p><strong>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usercontroller&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.dao.UserDaoImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.autobean.service.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">ans&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-基于注解管理Bean"><a href="#3-5-基于注解管理Bean" class="headerlink" title="3.5 基于注解管理Bean"></a>3.5 基于注解管理Bean</h2><p>Spring 通过注解实现自动装配的步骤如下：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义 Bean</li><li>依赖注入</li></ol><h3 id="3-5-1-搭建子模块spring6-ioc-annotation"><a href="#3-5-1-搭建子模块spring6-ioc-annotation" class="headerlink" title="3.5.1 搭建子模块spring6-ioc-annotation"></a>3.5.1 搭建子模块spring6-ioc-annotation</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-开启组件扫描"><a href="#3-5-2-开启组件扫描" class="headerlink" title="3.5.2 开启组件扫描"></a>3.5.2 开启组件扫描</h3><p>Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML 配置中，通过 <a href="context:component-scan">context:component-scan</a> 元素开启 Spring Beans的自动扫描功能。开启此功能后，Spring 会自动从扫描指定的包（base-package 属性设置）及其子包下的所有类，如果类上使用了 @Component 注解，就将该类装配到容器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在使用 <a href="context:component-scan">context:component-scan</a> 元素开启自动扫描功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</p><p><strong>情况一：最基本的扫描方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei.spring6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>情况二：指定要排除的组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei.iocannotation&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.gozei.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>情况三：仅扫描指定组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.gozei.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-使用注解定义-Bean"><a href="#3-5-3-使用注解定义-Bean" class="headerlink" title="3.5.3 使用注解定义 Bean"></a>3.5.3 使用注解定义 Bean</h3><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。  使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><h3 id="3-5-4-Autowired注入"><a href="#3-5-4-Autowired注入" class="headerlink" title="3.5.4 @Autowired注入"></a>3.5.4 @Autowired注入</h3><p>单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p><p>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第一处：该注解可以标注在哪里？</p><ul><li><p>构造方法上</p></li><li><p>方法上</p></li><li><p>形参上</p></li><li><p>属性上</p></li><li><p>注解上</p></li></ul></li></ul><ul><li>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</li></ul><h4 id="①-属性注入"><a href="#①-属性注入" class="headerlink" title="① 属性注入"></a>① <strong>属性注入</strong></h4><p>创建UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserDaoImpl实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">        userController.out();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240323102924075.png" alt="image-20240323102924075" style="zoom:67%;" /><h4 id="②-set注入"><a href="#②-set注入" class="headerlink" title="② set注入"></a><strong>② set注入</strong></h4><p>在每个实现类的set方法上面添加@Autowired</p><p>UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userService = userService;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="③-构造方法注入"><a href="#③-构造方法注入" class="headerlink" title="③ 构造方法注入"></a>③ 构造方法注入</h4><p>在每个类的构造方法上面添加注解@Autowired</p><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>修改UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userService = userService;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="④-形参上注入"><a href="#④-形参上注入" class="headerlink" title="④ 形参上注入"></a>④ 形参上注入</h4><p>在每个类的构造方法或者set方法多大参数前面添加@Autowired</p><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(<span class="meta">@Autowired</span> UserService userService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤-只有一个构造函数，无注解"><a href="#⑤-只有一个构造函数，无注解" class="headerlink" title="⑤ 只有一个构造函数，无注解"></a>⑤ 只有一个构造函数，无注解</h4><p>当有参数的构造方法只有一个时，@Autowired注解可以省略。</p><h4 id="⑥-Autowired注解和-Qualifier注解联合"><a href="#⑥-Autowired注解和-Qualifier注解联合" class="headerlink" title="⑥ @Autowired注解和@Qualifier注解联合"></a>⑥ @Autowired注解和@Qualifier注解联合</h4><p>在添加dao层实现类UserOracleImpt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOracleImpt</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is UserOracleImpt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误信息中说：不能装配，UserDao这个Bean的数量等于2，因为实现了两个</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240323103959980.png"></p><p>当然要byName，根据名称进行装配了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li><li>当带参数的构造方法只有一个，@Autowired注解可以省略。（）</li><li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li></ul><h3 id="3-5-5-Resource注入"><a href="#3-5-5-Resource注入" class="headerlink" title="3.5.5 @Resource注入"></a>3.5.5 @Resource注入</h3><p>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-6-Spring全注解开发"><a href="#3-5-6-Spring全注解开发" class="headerlink" title="3.5.6 Spring全注解开发"></a>3.5.6 Spring全注解开发</h3><p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.gozei.iocannotation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnoConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ComponentScan是一个数组，可以添加多个包路径</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">annotationConfigApplicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AnoConfig.class);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">bean</span> <span class="operator">=</span> annotationConfigApplicationContext.getBean(UserController.class);</span><br><span class="line">    bean.out();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-面向切面：AOP"><a href="#4-面向切面：AOP" class="headerlink" title="4. 面向切面：AOP"></a>4. 面向切面：AOP</h1><h2 id="4-1-代理模式"><a href="#4-1-代理模式" class="headerlink" title="4.1 代理模式"></a>4.1 代理模式</h2><p><strong>①介绍</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img016.png" alt="img016" style="zoom:67%;" /><p>使用代理后：</p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img017.png" alt="img017" style="zoom:67%;" /><p><strong>②生活中的代理</strong></p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><p><strong>③相关术语</strong></p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h3 id="4-1-1-静态代理"><a href="#4-1-1-静态代理" class="headerlink" title="4.1.1 静态代理"></a>4.1.1 静态代理</h3><p>整一个普通类写一个求和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddImplt</span> <span class="keyword">implements</span> <span class="title class_">Add</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建静态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Add</span>&#123;</span><br><span class="line">    AddImplt addImplt;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before log&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> addImplt.add(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;after log&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p></blockquote><h3 id="4-1-2-动态代理"><a href="#4-1-2-动态代理" class="headerlink" title="4.1.2 动态代理"></a>4.1.2 动态代理</h3><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img018.png" alt="img018"></p><p>新建生产代理对象的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object  <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                    result = method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">AddImplt</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Add</span> <span class="variable">proxy</span> <span class="operator">=</span> (Add)proxyFactory.getProxy();</span><br><span class="line">        proxy.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意强转getProxy()的返回实例对象别用实现类用他的接口类。因为这里是JDK动态代理，下文会有。</p></blockquote><h2 id="4-2-AOP概念及相关术语"><a href="#4-2-AOP概念及相关术语" class="headerlink" title="4.2 AOP概念及相关术语"></a>4.2 AOP概念及相关术语</h2><h3 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h3 id="4-2-3-相关术语"><a href="#4-2-3-相关术语" class="headerlink" title="4.2.3 相关术语"></a>4.2.3 相关术语</h3><h5 id="①横切关注点"><a href="#①横切关注点" class="headerlink" title="①横切关注点"></a>①横切关注点</h5><p>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img019.png" alt="img019"></p><h5 id="②通知（增强）"><a href="#②通知（增强）" class="headerlink" title="②通知（增强）"></a>②通知（增强）</h5><p><strong>增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。</strong></p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img020.png" alt="img020"></p><h5 id="③切面"><a href="#③切面" class="headerlink" title="③切面"></a>③切面</h5><p>封装通知方法的类。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img021.png" alt="img021"></p><h5 id="④目标"><a href="#④目标" class="headerlink" title="④目标"></a>④目标</h5><p>被代理的目标对象。</p><h5 id="⑤代理"><a href="#⑤代理" class="headerlink" title="⑤代理"></a>⑤代理</h5><p>向目标对象应用通知之后创建的代理对象。</p><h5 id="⑥连接点"><a href="#⑥连接点" class="headerlink" title="⑥连接点"></a>⑥连接点</h5><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。<strong>通俗说，就是spring允许你使用通知的地方</strong></p><h5 id="⑦切入点"><a href="#⑦切入点" class="headerlink" title="⑦切入点"></a>⑦切入点</h5><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p><h3 id="4-2-4-作用"><a href="#4-2-4-作用" class="headerlink" title="4.2.4 作用"></a>4.2.4 作用</h3><ul><li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li><li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li></ul><h2 id="4-3-基于注解的AOP"><a href="#4-3-基于注解的AOP" class="headerlink" title="4.3 基于注解的AOP"></a>4.3 基于注解的AOP</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img023.png" alt="img023"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20221216132844066.png" alt="image-20221216132844066"></p><ul><li>动态代理分为JDK动态代理和cglib动态代理</li><li>当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理</li><li>JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口</li><li>cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</li><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li><li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：是AOP思想的一种实现。本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><h3 id="4-3-1-准备工作"><a href="#4-3-1-准备工作" class="headerlink" title="4.3.1 准备工作"></a>4.3.1 准备工作</h3><p><strong>①添加依赖</strong></p><p>在IOC所需依赖基础上再加入下面依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring aop依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②准备被代理的目标资源</strong></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddImplt</span> <span class="keyword">implements</span> <span class="title class_">Add</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-创建切面类并配置"><a href="#4-3-2-创建切面类并配置" class="headerlink" title="4.3.2 创建切面类并配置"></a>4.3.2 创建切面类并配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* gozei.proxy.AddImplt.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint JoinPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(JoinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* gozei.proxy.AddImplt.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint JoinPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(JoinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* gozei.proxy.AddImplt.add(..))&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint JoinPoint, Throwable ex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> JoinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(JoinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+name+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* gozei.proxy.AddImplt.add(..))&quot;,returning = &quot;re&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint, Object re)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+name+<span class="string">&quot;，返回值：&quot;</span>+re);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* gozei.proxy.AddImplt.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">arounding</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        基于注解的AOP的实现：</span></span><br><span class="line"><span class="comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class="line"><span class="comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class="line"><span class="comment">        3、将切面类通过注解@Aspect标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;gozei.proxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Add</span> <span class="variable">addImplt</span> <span class="operator">=</span> ac.getBean(Add.class);</span><br><span class="line">    <span class="comment">//Add add = ac.getBean(Add.class);</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> addImplt.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240324170228820.png" alt="image-20240324170228820" style="zoom:67%;" /><h3 id="4-3-3-切入点表达式语法"><a href="#4-3-3-切入点表达式语法" class="headerlink" title="4.3.3 切入点表达式语法"></a>4.3.3 切入点表达式语法</h3><ul><li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p></li><li><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p><ul><li>例如：*.Hello匹配com.Hello，不匹配com.gozei.Hello</li></ul></li><li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p></li><li><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p></li><li><p>在类名的部分，可以使用*号代替类名的一部分</p><ul><li>例如：*Service匹配所有名称以Service结尾的类或接口</li></ul></li><li><p>在方法名部分，可以使用*号表示方法名任意</p></li><li><p>在方法名部分，可以使用*号代替方法名的一部分</p><ul><li>例如：*Operation匹配所有方法名以Operation结尾的方法</li></ul></li><li><p>在方法参数列表部分，使用(..)表示参数列表任意</p></li><li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p></li><li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p><ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p><ul><li>例如：execution(public int <em>..<em>Service.</em>(.., int))    正确<br>例如：execution(</em> int *..<em>Service.</em>(.., int))    错误</li></ul></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img025.png" alt="img025"></p><h3 id="4-3-4-重用切入点表达式"><a href="#4-3-4-重用切入点表达式" class="headerlink" title="4.3.4 重用切入点表达式"></a>4.3.4 重用切入点表达式</h3><p><strong>①声明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointCutAdd</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* gozei.proxy.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>②在同一个切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③在不同切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;gozei.proxy.PointCutAdd.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint JoinPoint)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(JoinPoint.getSignature().getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-获取通知的相关信息"><a href="#4-3-5-获取通知的相关信息" class="headerlink" title="4.3.5 获取通知的相关信息"></a>4.3.5 获取通知的相关信息</h3><p><strong>①获取连接点信息</strong></p><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.gozei.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②获取目标方法的返回值</strong></p><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.gozei.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③获取目标方法的异常</strong></p><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* com.gozei.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-切面的优先级"><a href="#4-3-6-切面的优先级" class="headerlink" title="4.3.6 切面的优先级"></a>4.3.6 切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li><p>@Order(较小的数)：优先级高</p></li><li><p>@Order(较大的数)：优先级低</p></li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img026.png" alt="img026"></p><h2 id="4-4-基于XML的AOP"><a href="#4-4-基于XML的AOP" class="headerlink" title="4.4 基于XML的AOP"></a>4.4 基于XML的AOP</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei.aop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">&quot;execution(* gozei.proxy.AddImplt.add(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5. 事务"></a>5. 事务</h1><h2 id="5-1-JdbcTemplate"><a href="#5-1-JdbcTemplate" class="headerlink" title="5.1 JdbcTemplate"></a>5.1 JdbcTemplate</h2><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p><strong>①搭建子模块</strong></p><p>搭建子模块：spring-jdbc-tx</p><p><strong>②加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③创建jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">****</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">****</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/****?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>④配置Spring的配置文件</strong></p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `spring`;</span><br><span class="line"></span><br><span class="line">use `spring`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="5-1-1-实现CURD"><a href="#5-1-1-实现CURD" class="headerlink" title="5.1.1 实现CURD"></a>5.1.1 实现CURD</h3><p><strong>1. 装配 JdbcTemplate</strong></p><p><strong>创建测试类，整合JUnit，注入JdbcTemplate，并且测试增删改功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">                </span><br><span class="line">        <span class="comment">//修改功能</span></span><br><span class="line"><span class="comment">//String sql = &quot;update t_emp set name=? where id=?&quot;;</span></span><br><span class="line">    <span class="comment">//int result = jdbcTemplate.update(sql, &quot;张三gozei&quot;, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除功能</span></span><br><span class="line"><span class="comment">//String sql = &quot;delete from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//int result = jdbcTemplate.update(sql, 1);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240324203352297.png" alt="image-20240324203352297" style="zoom:67%;" /><p><strong>2. 查询数据返回对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成get和set方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询：返回对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//写法一</span></span><br><span class="line"><span class="comment">//        String sql = &quot;select * from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//        Emp empResult = jdbcTemplate.queryForObject(sql,</span></span><br><span class="line"><span class="comment">//                (rs, rowNum) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    Emp emp = new Emp();</span></span><br><span class="line"><span class="comment">//                    emp.setId(rs.getInt(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setName(rs.getString(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setAge(rs.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setSex(rs.getString(&quot;sex&quot;));</span></span><br><span class="line"><span class="comment">//                    return emp;</span></span><br><span class="line"><span class="comment">//                &#125;, 1);</span></span><br><span class="line"><span class="comment">//        System.out.println(empResult);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写法二</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id=?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 查询数据返回list集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 查询返回单个的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-声明式事务概念"><a href="#5-2-声明式事务概念" class="headerlink" title="5.2 声明式事务概念"></a>5.2 声明式事务概念</h2><p><strong>①什么是事务</strong></p><p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p><p><strong>②事务的特性</strong></p><p><strong>A：原子性(Atomicity)</strong></p><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><strong>C：一致性(Consistency)</strong></p><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p><strong>I：隔离性(Isolation)</strong></p><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p><strong>D：持久性(Durability)</strong></p><p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><h3 id="1-编程式事务"><a href="#1-编程式事务" class="headerlink" title="1. 编程式事务"></a>1. 编程式事务</h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p><p>事务功能的相关操作全部通过自己编写代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h3 id="2-声明式事务"><a href="#2-声明式事务" class="headerlink" title="2. 声明式事务"></a>2. 声明式事务</h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h2 id="5-3-基于注解的声明式事务"><a href="#5-3-基于注解的声明式事务" class="headerlink" title="5.3 基于注解的声明式事务"></a>5.3 基于注解的声明式事务</h2><p>准备工作</p><p><strong>①添加配置</strong></p><p>在beans.xml添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gozei.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book` (</span><br><span class="line">  `book_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `book_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图书名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`book_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;斗破苍穹&#x27;</span>,<span class="number">80</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `balance` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;余额（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><strong>③创建组件</strong></p><p>创建BookController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookDaoImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.dao.impl;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>无事务测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookController bookController;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTxByAnnotation</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240325215728461.png"></p><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><ol start="2"><li>添加事物测试</li></ol><h3 id="①添加事务配置"><a href="#①添加事务配置" class="headerlink" title="①添加事务配置"></a>①添加事务配置</h3><p>在spring配置文件中引入tx命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>在Spring的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②添加事务注解"><a href="#②添加事务注解" class="headerlink" title="②添加事务注解"></a>②添加事务注解</h3><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p><strong>在BookServiceImpl的buybook()添加注解@Transactional</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Transactional标识在方法上，则只会影响该方法</p><p>@Transactional标识的类上，则会影响类中所有的方法</p><h3 id="③观察结果"><a href="#③观察结果" class="headerlink" title="③观察结果"></a>③观察结果</h3><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><h3 id="5-3-1-事务属性：只读"><a href="#5-3-1-事务属性：只读" class="headerlink" title="5.3.1 事务属性：只读"></a>5.3.1 事务属性：只读</h3><p><strong>①介绍</strong></p><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③注意</strong></p><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p><h3 id="5-3-2-事务属性：超时"><a href="#5-3-2-事务属性：超时" class="headerlink" title="5.3.2 事务属性：超时"></a>5.3.2 事务属性：超时</h3><p><strong>①介绍</strong></p><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时时间单位秒</span></span><br><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③观察结果</strong></p><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p><h3 id="5-3-4-事务属性：回滚策略"><a href="#5-3-4-事务属性：回滚策略" class="headerlink" title="5.3.4 事务属性：回滚策略"></a>5.3.4 事务属性：回滚策略</h3><p><strong>①介绍</strong></p><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><ul><li><p>rollbackFor属性：需要设置一个Class类型的对象</p></li><li><p>rollbackForClassName属性：需要设置一个字符串类型的全类名</p></li><li><p>noRollbackFor属性：需要设置一个Class类型的对象</p></li><li><p>rollbackFor属性：需要设置一个字符串类型的全类名</p></li></ul><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③观察结果</strong></p><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><h3 id="5-3-5-事务属性：隔离级别"><a href="#5-3-5-事务属性：隔离级别" class="headerlink" title="5.3.5 事务属性：隔离级别"></a>5.3.5 事务属性：隔离级别</h3><p><strong>①介绍</strong></p><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li><p>读未提交：READ UNCOMMITTED</p><p>允许Transaction01读取Transaction02未提交的修改。</p></li><li><p>读已提交：READ COMMITTED、</p><p>要求Transaction01只能读取Transaction02已提交的修改。</p></li><li><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p></li><li><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li></ul><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th>隔离级别</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure><h3 id="5-3-6-事务属性：传播行为"><a href="#5-3-6-事务属性：传播行为" class="headerlink" title="5.3.6 事务属性：传播行为"></a>5.3.6 事务属性：传播行为</h3><p><strong>①介绍</strong></p><p>什么是事务的传播行为？</p><p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li><li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【有就加入，没有就抛异常】</strong></li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong></li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【不支持事务，存在就抛异常】</strong></li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</strong></li></ul><h3 id="5-3-7-全注解配置事务"><a href="#5-3-7-全注解配置事务" class="headerlink" title="5.3.7 全注解配置事务"></a>5.3.7 全注解配置事务</h3><p><strong>①添加配置类</strong>,给ioc添加bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.gozei&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAllAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTxAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookController</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bookController&quot;</span>, BookController.class);</span><br><span class="line">        accountService.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-基于XML的声明式事务"><a href="#5-4-基于XML的声明式事务" class="headerlink" title="5.4 基于XML的声明式事务"></a>5.4 基于XML的声明式事务</h2><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.gozei.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p></blockquote><h1 id="6-资源操作：Resources"><a href="#6-资源操作：Resources" class="headerlink" title="6. 资源操作：Resources"></a>6. 资源操作：Resources</h1><h2 id="6-1-Spring-Resources概述"><a href="#6-1-Spring-Resources概述" class="headerlink" title="6.1 Spring Resources概述"></a>6.1 Spring Resources概述</h2><p>Java的标准java.net.URL类和各种URL前缀的标准处理程序无法满足所有对low-level资源的访问，比如：没有标准化的 URL 实现可用于访问需要从类路径或相对于 ServletContext 获取的资源。并且缺少某些Spring所需要的功能，例如检测某资源是否存在等。<strong>而Spring的Resource声明了访问low-level资源的能力。</strong></p><h2 id="6-2-Resource接口"><a href="#6-2-Resource接口" class="headerlink" title="6.2 Resource接口"></a>6.2 Resource接口</h2><p>Spring 的 Resource 接口位于 org.springframework.core.io 中。 旨在成为一个更强大的接口，用于抽象对低级资源的访问。以下显示了Resource接口定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Resource</span> <span class="keyword">extends</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    URL <span class="title function_">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    URI <span class="title function_">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    File <span class="title function_">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    ReadableByteChannel <span class="title function_">readableChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    Resource <span class="title function_">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getFilename</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Resource接口继承了InputStreamSource接口，提供了很多InputStreamSource所没有的方法。InputStreamSource接口，只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其中一些重要的方法：</strong></p><p>getInputStream(): 找到并打开资源，返回一个InputStream以从资源中读取。预计每次调用都会返回一个新的InputStream()，调用者有责任关闭每个流<br>exists(): 返回一个布尔值，表明某个资源是否以物理形式存在<br>isOpen: 返回一个布尔值，指示此资源是否具有开放流的句柄。如果为true，InputStream就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏。对于所有常规资源实现，返回false，但是InputStreamResource除外。<br>getDescription(): 返回资源的描述，用来输出错误的日志。这通常是完全限定的文件名或资源的实际URL。</p><p><strong>其他方法：</strong></p><p>isReadable(): 表明资源的目录读取是否通过getInputStream()进行读取。<br>isFile(): 表明这个资源是否代表了一个文件系统的文件。<br>getURL(): 返回一个URL句柄，如果资源不能够被解析为URL，将抛出IOException<br>getURI(): 返回一个资源的URI句柄<br>getFile(): 返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出FileNotFoundException<br>lastModified(): 资源最后一次修改的时间戳<br>createRelative(): 创建此资源的相关资源<br>getFilename(): 资源的文件名是什么 例如：最后一部分的文件名 myfile.txt</p><h2 id="6-3-Resource的实现类"><a href="#6-3-Resource的实现类" class="headerlink" title="6.3 Resource的实现类"></a>6.3 Resource的实现类</h2><p>Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</p><h3 id="6-3-1-UrlResource访问网络资源"><a href="#6-3-1-UrlResource访问网络资源" class="headerlink" title="6.3.1 UrlResource访问网络资源"></a>6.3.1 UrlResource访问网络资源</h3><p>Resource的一个实现类，用来访问网络资源，它支持URL的绝对路径。</p><p>http:——该前缀用于访问基于HTTP协议的网络资源。</p><p>ftp:——该前缀用于访问基于FTP协议的网络资源</p><p>file: ——该前缀用于从文件系统中读取资源</p><p><strong>基于HTTP协议的网络资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlResourceDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUrlResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">UrlResource</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">&quot;https://www.bilibili.com/&quot;</span>);</span><br><span class="line">        System.out.println(url.getURL());</span><br><span class="line">        System.out.println(url.getFilename());</span><br><span class="line">        <span class="comment">// 获取资源描述</span></span><br><span class="line">        System.out.println(url.getDescription());</span><br><span class="line">        <span class="comment">//获取资源内容</span></span><br><span class="line">        System.out.println(url.getInputStream().read());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-在项目根路径下创建文件，从文件系统中读取资源"><a href="#6-3-2-在项目根路径下创建文件，从文件系统中读取资源" class="headerlink" title="6.3.2 在项目根路径下创建文件，从文件系统中读取资源"></a>6.3.2 在项目根路径下创建文件，从文件系统中读取资源</h3><p>ClassPathResource 用来访问类加载路径下的资源，相对于其他的 Resource 实现类，其主要优势是方便访问类加载路径里的资源，尤其对于 Web 应用，ClassPathResource 可自动搜索位于 classes 下的资源文件，无须使用绝对路径访问。</p><img src="C:\Users\Gozei\AppData\Roaming\Typora\typora-user-images\image-20240327160559876.png" alt="image-20240327160559876" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUrlResource2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建一个 Resource 对象</span></span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;gozei.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">    <span class="comment">// 获取文件描述</span></span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">    <span class="comment">//获取文件内容</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassPathResource实例可使用ClassPathResource构造器显式地创建，但更多的时候它都是隐式地创建的。当执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含classpath:前缀后，系统会自动创建ClassPathResource对象。</p><h3 id="6-3-3-FileSystemResource-访问文件系统资源"><a href="#6-3-3-FileSystemResource-访问文件系统资源" class="headerlink" title="6.3.3 FileSystemResource 访问文件系统资源"></a>6.3.3 FileSystemResource 访问文件系统资源</h3><p>Spring 提供的 FileSystemResource 类用于访问文件系统资源，使用 FileSystemResource 来访问文件系统资源并没有太大的优势，因为 Java 提供的 File 类也可用于访问文件系统资源。(pass掉)</p><h3 id="6-3-4-ServletContextResource"><a href="#6-3-4-ServletContextResource" class="headerlink" title="6.3.4 ServletContextResource"></a>6.3.4 ServletContextResource</h3><p>这是ServletContext资源的Resource实现，它解释相关Web应用程序根目录中的相对路径。它始终支持流(stream)访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。无论它是在文件系统上扩展还是直接从JAR或其他地方（如数据库）访问，实际上都依赖于Servlet容器。</p><h3 id="6-3-5-InputStreamResource"><a href="#6-3-5-InputStreamResource" class="headerlink" title="6.3.5 InputStreamResource"></a>6.3.5 InputStreamResource</h3><p>InputStreamResource 是给定的输入流(InputStream)的Resource实现。它的使用场景在没有特定的资源实现的时候使用(感觉和@Component 的适用场景很相似)。与其他Resource实现相比，这是已打开资源的描述符。 因此，它的isOpen()方法返回true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。</p><h3 id="6-3-6-ByteArrayResource"><a href="#6-3-6-ByteArrayResource" class="headerlink" title="6.3.6 ByteArrayResource"></a>6.3.6 ByteArrayResource</h3><p>字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。</p><h2 id="6-4-Resource类图"><a href="#6-4-Resource类图" class="headerlink" title="6.4 Resource类图"></a>6.4 Resource类图</h2><p>上述Resource实现类与Resource顶级接口之间的关系可以用下面的UML关系模型来表示</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20221206232920494.png" alt="image-20221206232920494"></p><h2 id="6-5-ResourceLoader-接口"><a href="#6-5-ResourceLoader-接口" class="headerlink" title="6.5 ResourceLoader 接口"></a>6.5 ResourceLoader 接口</h2><p>Spring 提供如下两个标志性接口：</p><p><strong>（1）ResourceLoader ：</strong> 该接口实现类的实例可以获得一个Resource实例。</p><p><strong>（2） ResourceLoaderAware ：</strong> 该接口实现类的实例将获得一个ResourceLoader的引用。</p><p>在ResourceLoader接口里有如下方法：</p><p><strong>（1）Resource getResource（String location）</strong> ： 该接口仅有这个方法，用于返回一个Resource实例。ApplicationContext实现类都实现ResourceLoader接口，因此ApplicationContext可直接获取Resource实例。</p><ol><li><strong>ClassPathXmlApplicationContext获取Resource实例</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line"><span class="comment">//        通过ApplicationContext访问资源</span></span><br><span class="line"><span class="comment">//        ApplicationContext实例获取Resource实例时，</span></span><br><span class="line"><span class="comment">//        默认采用与ApplicationContext相同的资源访问策略</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;gozei.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>FileSystemApplicationContext获取Resource实例</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>();</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;gozei.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring将采用和ApplicationContext相同的策略来访问资源。也就是说，如果ApplicationContext是FileSystemXmlApplicationContext，res就是FileSystemResource实例；如果ApplicationContext是ClassPathXmlApplicationContext，res就是ClassPathResource实例</p><p>当Spring应用需要进行资源访问时，实际上并不需要直接使用Resource实现类，而是调用ResourceLoader实例的getResource()方法来获得资源，ReosurceLoader将会负责选择Reosurce实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开来</p><p>另外，使用ApplicationContext访问资源时，可通过不同前缀指定强制使用指定的ClassPathResource、FileSystemResource等实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;calsspath:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resrouce</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;file:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;http://localhost:8080/beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="6-6-ResourceLoaderAware-接口"><a href="#6-6-ResourceLoaderAware-接口" class="headerlink" title="6.6 ResourceLoaderAware 接口"></a>6.6 ResourceLoaderAware 接口</h2><p>ResourceLoaderAware接口实现类的实例将获得一个ResourceLoader的引用，ResourceLoaderAware接口也提供了一个setResourceLoader()方法，该方法将由Spring容器负责调用，Spring容器会将一个ResourceLoader对象作为该方法的参数传入。</p><p>如果把实现ResourceLoaderAware接口的Bean类部署在Spring容器中，Spring容器会将自身当成ResourceLoader作为setResourceLoader()方法的参数传入。由于ApplicationContext的实现类都实现了ResourceLoader接口，Spring容器自身完全可作为ResorceLoader使用。</p><ol><li><strong>实现ResourceLoaderAware接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现ResourceLoaderAware接口必须实现的方法</span></span><br><span class="line"><span class="comment">//如果把该Bean部署在Spring容器中，该方法将会有Spring容器负责调用。</span></span><br><span class="line"><span class="comment">//SPring容器调用该方法时，Spring会将自身作为参数传给该方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ResourceLoader对象的应用</span></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>注入ioc管理</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> TestResourceBean <span class="title function_">getTestResourceBean</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestResourceBean</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUrlResource3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;gozei.txt&quot;</span>);</span><br><span class="line">       System.out.println(resource.getFilename());</span><br><span class="line">       System.out.println(resource.getDescription());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240327165427192.png"></p><h2 id="6-7-使用Resource-作为属性"><a href="#6-7-使用Resource-作为属性" class="headerlink" title="6.7 使用Resource 作为属性"></a>6.7 使用Resource 作为属性</h2><p>前面介绍了 Spring 提供的资源访问策略，但这些依赖访问策略要么需要使用 Resource 实现类，要么需要使用 ApplicationContext 来获取资源。实际上，当应用程序中的 Bean 实例需要访问资源时，Spring 有更好的解决方法：直接利用依赖注入。从这个意义上来看，Spring 框架不仅充分利用了策略模式来简化资源访问，而且还将策略模式和 IoC 进行充分地结合，最大程度地简化了 Spring 资源访问。</p><p>归纳起来，<strong>如果 Bean 实例需要访问资源，有如下两种解决方案：</strong></p><ul><li><strong>代码中获取 Resource 实例。</strong></li><li><strong>使用依赖注入。</strong></li></ul><p>对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource 所在的位置，不管通过 FileSystemResource 创建实例，还是通过 ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource() 方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让 Spring 为 Bean 实例<strong>依赖注入</strong>资源。</p><ol><li>创建依赖注入类，定义属性和方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">        System.out.println(res.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li> <strong>创建spring配置文件，配置依赖注入</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;resourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gozei.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以使用file:、http:、ftp:等前缀强制Spring采用对应的资源访问策略 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果不采用任何前缀，则Spring将采用与该ApplicationContext相同的资源访问策略来访问资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;res&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:gozei.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">ResourceBean</span> <span class="variable">resourceBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;resourceBean&quot;</span>,ResourceBean.class);</span><br><span class="line">        resourceBean.parse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-8-应用程序上下文和资源路径"><a href="#6-8-应用程序上下文和资源路径" class="headerlink" title="6.8 应用程序上下文和资源路径"></a>6.8 应用程序上下文和资源路径</h2><p>不管以怎样的方式创建ApplicationContext实例，都需要为ApplicationContext指定配置文件，Spring允许使用一份或多分XML配置文件。当程序创建ApplicationContext实例时，通常也是以Resource的方式来访问配置文件的，所以ApplicationContext完全支持ClassPathResource、FileSystemResource、ServletContextResource等资源访问方式。</p><p><strong>ApplicationContext确定资源访问策略通常有两种方法：</strong></p><p><strong>（1）使用ApplicationContext实现类指定访问策略。</strong></p><p><strong>（2）使用前缀指定访问策略。</strong></p><h3 id="6-8-1-ApplicationContext实现类指定访问策略"><a href="#6-8-1-ApplicationContext实现类指定访问策略" class="headerlink" title="6.8.1 ApplicationContext实现类指定访问策略"></a>6.8.1 ApplicationContext实现类指定访问策略</h3><p>创建ApplicationContext对象时，通常可以使用如下实现类：</p><p>（1） ClassPathXMLApplicationContext : 对应使用ClassPathResource进行资源访问。</p><p>（2）FileSystemXmlApplicationContext ： 对应使用FileSystemResource进行资源访问。</p><p>（3）XmlWebApplicationContext ： 对应使用ServletContextResource进行资源访问。</p><p>当使用ApplicationContext的不同实现类时，就意味着Spring使用响应的资源访问策略。</p><p>效果前面已经演示</p><h3 id="6-8-2-使用前缀指定访问策略"><a href="#6-8-2-使用前缀指定访问策略" class="headerlink" title="6.8.2 使用前缀指定访问策略"></a>6.8.2 使用前缀指定访问策略</h3><ol><li>classpath前缀使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 通过搜索文件系统路径下的xml文件创建ApplicationContext，</span></span><br><span class="line"><span class="comment">         * 但通过指定classpath:前缀强制搜索类加载路径</span></span><br><span class="line"><span class="comment">         * classpath:bean.xml</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">        System.out.println(ctx);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;gozei.txt&quot;</span>);</span><br><span class="line">        System.out.println(resource.getFilename());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>classpath通配符使用</strong></li></ol><p>classpath * :前缀提供了加载多个XML配置文件的能力，当使用classpath*:前缀来指定XML配置文件时，系统将搜索类加载路径，找到所有与文件名匹配的文件，分别加载文件中的配置定义，最后合并成一个ApplicationContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean.xml&quot;</span>);</span><br><span class="line">System.out.println(ctx);</span><br></pre></td></tr></table></figure><p>当使用classpath * :前缀时，Spring将会搜索类加载路径下所有满足该规则的配置文件。</p><p>如果不是采用classpath * :前缀，而是改为使用classpath:前缀，Spring则只加载第一个符合条件的XML文件</p><p><strong>注意 ：</strong> </p><p>classpath * : 前缀仅对ApplicationContext有效。实际情况是，创建ApplicationContext时，分别访问多个配置文件(通过ClassLoader的getResource方法实现)。因此，classpath * :前缀不可用于Resource。</p><ol start="3"><li><strong>通配符其他使用</strong></li></ol><p>一次性加载多个配置文件的方式：指定配置文件时使用通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>Spring允许将classpath*:前缀和通配符结合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="7-Spring6国际化"><a href="#7-Spring6国际化" class="headerlink" title="7. Spring6国际化"></a>7. Spring6国际化</h1><p>spring中国际化是通过MessageSource这个接口来支持的</p><p><strong>常见实现类</strong></p><p><strong>ResourceBundleMessageSource</strong></p><p>这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源</p><p><strong>ReloadableResourceBundleMessageSource</strong></p><p>这个功能和第一个类的功能类似，多了定时刷新功能，允许在不重启系统的情况下，更新资源的信息</p><p><strong>StaticMessageSource</strong></p><p>它允许通过编程的方式提供国际化信息，一会我们可以通过这个来实现db中存储国际化信息的功能。</p><p><strong>第一步 创建资源文件</strong></p><p><strong>国际化文件命名格式：基本名称 _ 语言 _ 国家.properties</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240327180025125.png" alt="image-20240327180025125"></p><p>分别在文件添加</p><p><strong>en</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">www.gozei.com</span>=<span class="string">welcome &#123;0&#125;,时间:&#123;1&#125;</span></span><br><span class="line"><span class="comment"># &#123;key值&#125;，后续通过参数转递</span></span><br></pre></td></tr></table></figure><p><strong>zh</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">www.gozei.com</span>=<span class="string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure><p><strong>第二步 创建spring配置文件，配置MessageSource</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>gozei ni hao<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步 创建测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传递动态参数，使用数组形式对应&#123;0&#125; &#123;1&#125;顺序</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;gozei&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//www.gozei.com为资源文件的key值,</span></span><br><span class="line">        <span class="comment">//objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言</span></span><br><span class="line">        String str=context.getMessage(<span class="string">&quot;www.gozei.com&quot;</span>, objs, Locale.CHINA);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-数据校验：Validation"><a href="#8-数据校验：Validation" class="headerlink" title="8. 数据校验：Validation"></a>8. 数据校验：Validation</h1><p>在开发中，我们经常遇到参数校验的需求，比如用户注册的时候，要校验用户名不能为空、用户名长度不超过20个字符、手机号是合法的手机号格式等等。如果使用普通方式，我们会把校验的代码和真正的业务处理逻辑耦合在一起，而且如果未来要新增一种校验逻辑也需要在修改多个地方。而spring validation允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，让代码编写更加方便。Spring Validation其实就是对Hibernate Validator进一步的封装，方便在Spring中使用。</p><p>在Spring中有多种校验的方式</p><p><strong>第一种是通过实现org.springframework.validation.Validator接口，然后在代码中调用这个类</strong></p><p><strong>第二种是按照Bean Validation方式来进行校验，即通过注解的方式。</strong></p><p><strong>第三种是基于方法实现校验</strong></p><p><strong>除此之外，还可以实现自定义校验</strong></p><h2 id="8-1-通过Validator接口实现"><a href="#8-1-通过Validator接口实现" class="headerlink" title="8.1 通过Validator接口实现"></a>8.1 通过Validator接口实现</h2><ol><li><strong>引入相关依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建实体类，定义属性和方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建类实现Validator接口，实现接口方法指定校验规则</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class.equals(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object object, Errors errors)</span> &#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) object;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value &lt; 0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value too old&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义的类，其实就是实现接口中对应的方法，</p><p>supports方法用来表示此校验用在哪个类型上，</p><p>validate是设置校验逻辑的地点，其中ValidationUtils，是Spring封装的校验工具类，帮助快速实现校验。</p><ol start="4"><li><strong>使用上述Validator进行测试</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        person.setAge(-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建Person对应的DataBinder</span></span><br><span class="line">        <span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置校验</span></span><br><span class="line">        binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersonValidator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于Person对象中的属性为空，所以校验不通过</span></span><br><span class="line">        binder.validate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">results</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">        System.out.println(results.getAllErrors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-Bean-Validation注解实现"><a href="#8-2-Bean-Validation注解实现" class="headerlink" title="8.2 Bean Validation注解实现"></a>8.2 Bean Validation注解实现</h2><p>使用Bean Validation校验方式，就是如何将Bean Validation需要使用的javax.validation.ValidatorFactory 和javax.validation.Validator注入到容器中。spring默认有一个实现类LocalValidatorFactoryBean，它实现了上面Bean Validation中的接口，并且也实现了org.springframework.validation.Validator接口。</p><p><strong>第一步 创建配置类，配置LocalValidatorFactoryBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.gozei.spring6.validation.method2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步 创建实体类，使用注解定义校验规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常用注解说明</strong><br>@NotNull    限制必须不为null<br>@NotEmpty    只作用于字符串类型，字符串不为空，并且长度不为0<br>@NotBlank    只作用于字符串类型，字符串不为空，并且trim()后不为空串<br>@DecimalMax(value)    限制必须为一个不大于指定值的数字<br>@DecimalMin(value)    限制必须为一个不小于指定值的数字<br>@Max(value)    限制必须为一个不大于指定值的数字<br>@Min(value)    限制必须为一个不小于指定值的数字<br>@Pattern(value)    限制必须符合指定的正则表达式<br>@Size(max,min)    限制字符长度必须在min到max之间<br>@Email    验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</p><p><strong>第三步 使用两种不同的校验器实现</strong></p><p><strong>（1）使用jakarta.validation.Validator校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">validator</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);</span><br><span class="line">        <span class="keyword">return</span> sets.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）使用org.springframework.validation.Validator校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validaPersonByValidator</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(user, user.getName());</span><br><span class="line">        validator.validate(user, bindException);</span><br><span class="line">        <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService1</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService1.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService2</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService2.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">130</span>);</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validaPersonByValidator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-基于方法实现校验"><a href="#8-3-基于方法实现校验" class="headerlink" title="8.3 基于方法实现校验"></a>8.3 基于方法实现校验</h2><p><strong>第一步 创建配置类，配置MethodValidationPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.gozei.spring6.validation.method3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步 创建实体类，使用注解设置校验规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步 定义Service类，通过注解操作对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        myService.testParams(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-实现自定义校验"><a href="#8-4-实现自定义校验" class="headerlink" title="8.4 实现自定义校验"></a>8.4 实现自定义校验</h2><p><strong>第一步 自定义校验注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能包含空格&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步 编写真正的校验类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gozei.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">                <span class="comment">//null时不进行校验</span></span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//获取默认提示信息</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">defaultConstraintMessageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">                        System.out.println(<span class="string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class="line">                        <span class="comment">//禁用默认提示信息</span></span><br><span class="line">                        context.disableDefaultConstraintViolation();</span><br><span class="line">                        <span class="comment">//设置提示语</span></span><br><span class="line">                        context.buildConstraintViolationWithTemplate(<span class="string">&quot;can not contains blank&quot;</span>).addConstraintViolation();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 从0到1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的lambda</title>
      <link href="/year/03/19/Java%E7%9A%84lambda/"/>
      <url>/year/03/19/Java%E7%9A%84lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="1-函数式编程和命令式编程"><a href="#1-函数式编程和命令式编程" class="headerlink" title="1. 函数式编程和命令式编程"></a>1. 函数式编程和命令式编程</h1><p>​    现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程</p><blockquote><p>ps：此篇着重于介绍Java的Lambda表达式和函数式接口，所以在函数式编程思想上简单概述（我口才不行）。</p></blockquote><p>​    函数式编程（Functional Programming，简称 FP）是一种编程范式，它将计算视为数学函数的求值，并避免使用程序状态以及易变对象。</p><p><strong>命令式编程（Imperative Programming）类比</strong></p><p>​    想象你正在给一个机器人下达指令来烹饪一道菜。在命令式编程中，你会告诉机器人每一个详细的步骤：首先打开冰箱门，然后取出食材，接着切菜，最后烹饪。你需要确保每一个动作都被精确地执行，以确保最终结果符合预期。</p><p><strong>函数式编程（Functional Programming）类比</strong></p><p>​    而在函数式编程中，你只需告诉机器人你想要烹饪的菜品，而不需要具体说明每一个步骤。你关注的是最终结果——一道美味的菜肴，而不是烹饪的具体过程。机器人将使用其内置的知识和程序来完成烹饪任务，而你不需要关心它是如何一步步实现的。</p><p>用代码举个例子说明命令式编程和函数式编程的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令式编程示例：筛选偶数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_evens</span>(<span class="params">numbers</span>):</span><br><span class="line">    evens = []  <span class="comment"># 创建一个空列表用于存储偶数</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 检查数字是否为偶数</span></span><br><span class="line">            evens.append(number)  <span class="comment"># 如果是偶数，添加到列表中</span></span><br><span class="line">    <span class="keyword">return</span> evens</span><br><span class="line"><span class="comment"># 示例数组</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">even_numbers = filter_evens(numbers)</span><br><span class="line"><span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出: [2, 4, 6]</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数式编程示例：筛选偶数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> number % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用高阶函数 filter 和 lambda 表达式.此处我们并不需要关心filter是怎么筛选偶数的，我们只需要把我们的要求number % 2 == 0丢进去就行</span></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">filter</span>(is_even, numbers))</span><br><span class="line"><span class="comment">#使用lambda传第一个参数，效果是一样的</span></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, numbers))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出: [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>说到这为什么我会用py代码来写呢？明明我是来说Java的lambda的，往下面看。</p><h1 id="2-Java的函数式编程"><a href="#2-Java的函数式编程" class="headerlink" title="2. Java的函数式编程"></a>2. Java的函数式编程</h1><p>​    很长的一段时间里，Java一直是面向对象的语言，一切皆对象，如果想要调用一个函数，函数必须属于一个类或对象，然后在使用类或对象进行调用。Java 8开始，引入了函数式编程接口与Lambda表达式，便于开发者写出更少更优雅的代码。这才让java有了函数式编程功能。</p><p>​    <strong>Java为函数式编程引入了三个新的语法概念：Stream类、Lambda表达式和函数接口</strong></p><h2 id="2-1-Lambda表达式"><a href="#2-1-Lambda表达式" class="headerlink" title="2.1 Lambda表达式"></a>2.1 Lambda表达式</h2><p>​    允许你以一种更加简洁的方式表示匿名函数。Lambda 表达式可以用来表示接口的一个实现，而这个接口必须只有一个抽象方法（functional interface）。</p><p>​    下面用java代码来实现筛选偶数的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//筛选偶数</span></span><br><span class="line">Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="comment">//筛选偶数。参数传入你的需求，而不需要管他们为什么能帮你筛选偶数</span></span><br><span class="line">integers.removeIf((Integer i) -&gt; &#123;<span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">0</span>;&#125;);</span><br><span class="line"><span class="comment">//省略模式效果一样</span></span><br><span class="line">integers.removeIf(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">System.out.println(integers);</span><br></pre></td></tr></table></figure><p>​    filter函数第二个参数的语法就是lambda表达式，那么lambda表达式怎么写呢？</p><ul><li>定义格式 ( ) -&gt; { }</li><li>各部分解释<ul><li>() ：重写方法的参数位置</li><li>-&gt; : 将参数传递到方法体中</li><li>{} ：重写方法的方法体  </li></ul></li><li>省略规则<ul><li>重写方法发参数类型可以不写</li><li>如果重写方法只有一个参数，小括号可以不写</li><li>如果方法体中只有一句话，那么所在的大括号可以不写</li><li>如果方法体只有一句话且带return，那么所在的大括号，分号以及return可以不写</li></ul></li></ul><h2 id="2-2-函数接口"><a href="#2-2-函数接口" class="headerlink" title="2.2 函数接口"></a>2.2 函数接口</h2><p>​    在 Java 8 中，如果你有一个只有一个抽象方法的接口（可以有默认或者静态方法），那么它可以被隐式转换为 Lambda 表达式。这样的接口被称为函数式接口。</p><p>来看一下removeIf的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeIf(filter, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Predicate&lt;? super E&gt; filter这个接口长这样</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240319171332178.png" alt="image-20240319171332178"></p><p>在接口上面有一个@FunctionalInterface注解，这就是函数接口，有一个抽象方法，剩下的要么是静态要么是默认方法。</p><p>下面介绍一下Java在1.8中为我们提供的4基本的个函数式接口</p><h4 id="2-2-1-Supplier"><a href="#2-2-1-Supplier" class="headerlink" title="2.2.1 Supplier"></a>2.2.1 Supplier</h4><ol><li>Supplier接口<br>   java.util.function.Supplier<T>接口，它意味着”供给”-&gt;我们想要什么就给什么</li><li>方法:<br>  T get() -&gt; 我们想要什么,get方法就可以返回什么</li><li>需求:<br>   使用Supplier接口作为方法的参数<br>   用Lambda表达式求出int数组中的最大值</li><li>泛型:<br>  &lt;引用数据类型&gt;-&gt; 规定了我们操作的数据是什么类型<br>  &lt;&gt;中只能写引用数据类型,不能写基本数据类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Supplier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">                Arrays.sort(arr);</span><br><span class="line">                <span class="keyword">return</span> arr[arr.length-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        method(()-&gt; &#123;</span><br><span class="line">                <span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">                Arrays.sort(arr);</span><br><span class="line">                <span class="keyword">return</span> arr[arr.length-<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Supplier&lt;Integer&gt; supplier)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> supplier.get();<span class="comment">//让get方法返回一个数组最大值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;max = &quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1684549185987.png" alt="1684549185987"></p><h4 id="2-2-2-Consumer"><a href="#2-2-2-Consumer" class="headerlink" title="2.2.2 Consumer"></a>2.2.2 Consumer</h4><p>java.util.function.Consumer<T>-&gt;消费型接口-&gt;操作<br>  方法:<br>    void accept(T t)，//意为消费一个指定泛型的数据</p><p>“消费”就是”操作”,至于怎么操作,就看重写accept方法之后,方法体怎么写了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        method(s-&gt; System.out.println(s.length()),<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Consumer&lt;String&gt; consumer,String s)</span>&#123;</span><br><span class="line">        consumer.accept(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1706074799342.png" alt="1706074799342"></p><h4 id="2-2-3-Function"><a href="#2-2-3-Function" class="headerlink" title="2.2.3 Function"></a>2.2.3 Function</h4><p>java.util.function.Function&lt;T,R&gt; //接口用来根据一个类型的数据得到另一个类型的数据<br>  方法:<br>     R apply(T t) //根据类型T参数获取类型R的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03Function</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> integer+<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        method(integer -&gt; integer+<span class="string">&quot;&quot;</span>,<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Function&lt;Integer,String&gt; function,Integer number)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> function.apply(number);</span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span> + (s+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1706075113406.png" alt="1706075113406"></p><h4 id="2-2-4-Predicate"><a href="#2-2-4-Predicate" class="headerlink" title="2.2.4 Predicate"></a>2.2.4 Predicate</h4><p>java.util.function.Predicate<T>接口。//判断型接口<br>    boolean test(T t) //用于判断的方法,返回值为boolean型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04Predicate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.length()==<span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(s -&gt; s.length()==<span class="number">7</span>,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Predicate&lt;String&gt; predicate,String s)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> predicate.test(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;test = &quot;</span> + test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Stream流"><a href="#2-3-Stream流" class="headerlink" title="2.3 Stream流"></a>2.3 Stream流</h2><blockquote><p><strong>ps：在Java 8的Stream API中，Stream是不可重复使用的，一旦你对一个Stream进行了终端操作（如forEach、collect、count等），这个Stream就无法再次使用</strong></p></blockquote><p>Stream流中的”流”不是特指”IO流”,它是一种”流式编程”(编程方式),可以看做是”流水线”，一种流式处理。</p><h3 id="2-3-1-Stream流的获取"><a href="#2-3-1-Stream流的获取" class="headerlink" title="2.3.1 Stream流的获取"></a>2.3.1 Stream流的获取</h3><ol><li><p>针对集合:Collection中的方法 </p><p>Stream<E> stream()  </p></li><li><p>针对数组:Stream接口中的静态方法:</p><p>static <T> Stream<T> of(T… values)  </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02Stream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.针对集合:Collection中的方法</span></span><br><span class="line">        <span class="comment">//Stream&lt;E&gt; stream()</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;白子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;亚子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;星野&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        System.out.println(stream);<span class="comment">//输出的都是地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.针对数组:Stream接口中的静态方法:</span></span><br><span class="line">        <span class="comment">//static &lt;T&gt; Stream&lt;T&gt; of(T... values)</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;日奈&quot;</span>, <span class="string">&quot;晴奈&quot;</span>, <span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        System.out.println(stream1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Stream部分的方法"><a href="#2-3-2-Stream部分的方法" class="headerlink" title="2.3.2 Stream部分的方法"></a>2.3.2 Stream部分的方法</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;<span class="comment">//注意:forEach方法是一个[终结方法],使用完之后,Stream流不能用了</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 逐一处理,可以用来遍历</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreach</span><span class="params">()</span> &#123;</span><br><span class="line">       Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>);</span><br><span class="line">       stream1.forEach(s-&gt; System.out.println(s));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream1.count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + count);<span class="comment">//注意:count也是一个终结方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span><span class="comment">//返回一个新的Stream流对象,根据某个条件进行元素过滤</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>,<span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        stream1.filter(s -&gt; s.length()==<span class="number">2</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出白子,黑子，星野</span></span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">limit</span><span class="params">(<span class="type">long</span> maxSize)</span><span class="comment">//获取Stream流对象中的前n个元素,返回一个新的Stream流对象</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前3个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>,<span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        stream1.limit(<span class="number">3</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title function_">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span><span class="comment">//两个流合成一个流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  流合并,是一个静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">concat</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>,<span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;日奈&quot;</span>, <span class="string">&quot;晴奈&quot;</span>, <span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        Stream.concat(stream1, stream2).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="将Stream流变成集合"><a href="#将Stream流变成集合" class="headerlink" title="将Stream流变成集合"></a>将Stream流变成集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流转集合</span></span><br><span class="line"><span class="comment">     *从Stream流对象转成集合对象，使用Stream接口方法collect()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">collect</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;白子&quot;</span>,<span class="string">&quot;黑子&quot;</span>，<span class="string">&quot;星野&quot;</span>,<span class="string">&quot;明日奈&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = stream1.collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;R&gt; <span class="title function_">map</span><span class="params">(Function&lt;T,R&gt; mapper)</span> <span class="comment">//转换流中的数据类型</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 转换流中的类型,将intger转换成string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">()</span> &#123;</span><br><span class="line">       Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">       stream.map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> integer+<span class="string">&quot;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).forEach(s -&gt; System.out.println(s));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-综合一下"><a href="#2-3-3-综合一下" class="headerlink" title="2.3.3 综合一下"></a>2.3.3 综合一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    1. 第一个队伍只要名字为3个字的成员姓名；//filter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    2. 第一个队伍筛选之后只要前2个人；//limit</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    3. 第二个队伍只要姓日的成员姓名；//filter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    4. 第二个队伍筛选之后不要前1个人；//skip</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    5. 将两个队伍合并为一个队伍；//concat</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    6. 打印整个队伍的姓名信息。//forEeach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Stream&lt;String&gt; stream1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class="string">&quot;白子&quot;</span>, <span class="string">&quot;亚子&quot;</span>, <span class="string">&quot;明日奈&quot;</span>, <span class="string">&quot;星野&quot;</span>,<span class="string">&quot;切里诺&quot;</span>,<span class="string">&quot;阿米娅&quot;</span>)).stream().filter(name-&gt;name.length() == <span class="number">3</span>).limit(<span class="number">2</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(Arrays.asList(<span class="string">&quot;日奈&quot;</span>, <span class="string">&quot;真理奈&quot;</span>, <span class="string">&quot;梓&quot;</span>, <span class="string">&quot;日富美&quot;</span>,<span class="string">&quot;水真白&quot;</span>)).stream().filter(name-&gt;name.startsWith(<span class="string">&quot;日&quot;</span>)).limit(<span class="number">1</span>);</span><br><span class="line">Stream.concat(stream1, stream2).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3 方法引用"></a>3 方法引用</h1><blockquote><p><strong>ps：看不懂算了，看懂了取代看不懂的。</strong>什么nt才会写一些可读性贼差的方法引用让我这个菜逼看不懂！！！！</p></blockquote><p>怎么一个方法引用</p><ol><li><p>被引用的方法要写在重写方法里面</p></li><li><p><strong>被引用的方法从参数上,返回值上要和所在重写方法一致</strong>,而且引用的方法最好是操作重写方法的参数值的</p></li><li><p>干掉重写方法的参数;</p><p>干掉 <strong>-&gt;</strong>;</p><p>干掉被引用方法的参数 <strong>-&gt;</strong> 将被引用方法的**.<strong>改成</strong>::**    </p></li></ol><h2 id="3-1-对象名–引用成员方法"><a href="#3-1-对象名–引用成员方法" class="headerlink" title="3.1 对象名–引用成员方法"></a>3.1 对象名–引用成员方法</h2><p>1.使用对象名引用成员方法<br>   格式:    <strong>对象::成员方法名</strong>  </p><p>2.需求:<br>    函数式接口:Supplier<br>        java.util.function.Supplier<T>接口<br>    抽象方法:<br>        T get()。用来获取一个泛型参数指定类型的对象数据。<br>        Supplier接口使用什么泛型,就可以使用get方法获取一个什么类型的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               get为重写方法:无参的,返回值为String</span></span><br><span class="line"><span class="comment">               trim方法在get中:无参的,返回值为String</span></span><br><span class="line"><span class="comment">               考虑使用方法引用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot; abc &quot;</span>.trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(() -&gt; <span class="string">&quot; abc &quot;</span>.trim());<span class="comment">//lambda</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="string">&quot; abc &quot;</span>;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot; abc &quot;</span>)::trim);<span class="comment">//方法引用</span></span><br><span class="line">        method(ss::trim);<span class="comment">//方法引用，这两种方式都属于对象引用方法结果一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Supplier&lt;String&gt; supplier)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-类名–引用静态方法"><a href="#3-2-类名–引用静态方法" class="headerlink" title="3.2 类名–引用静态方法"></a>3.2 类名–引用静态方法</h2><p>格式:<strong>类名::静态成员方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               get:无参,返回值类型为double</span></span><br><span class="line"><span class="comment">               random():无参,返回值类型为double</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.random();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(()-&gt;Math.random());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        method(Math::random);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Supplier&lt;Double&gt; supplier)</span>&#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">aDouble</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;aDouble = &quot;</span> + aDouble);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-类–构造引用"><a href="#3-3-类–构造引用" class="headerlink" title="3.3 类–构造引用"></a>3.3 类–构造引用</h2><p>格式:<strong>构造方法名称::new</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Person&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              apply为重写方法:  有一个String的参数,返回值类型为Person对象</span></span><br><span class="line"><span class="comment">              new Person(s) : 一个String参数的构造,类型为String,返回值类型Person类型</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Person <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;涛哥&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(s -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(s),<span class="string">&quot;金莲&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(Person::<span class="keyword">new</span>,<span class="string">&quot;三上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Function&lt;String,Person&gt; function,String name)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> function.apply(name);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-数组–数组引用"><a href="#3-4-数组–数组引用" class="headerlink" title="3.4 数组–数组引用"></a>3.4 数组–数组引用</h2><p>格式:<strong>数组的数据类型[]::new</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, <span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              apply:重写的方法,参数为Integer型,返回值类型为int[]</span></span><br><span class="line"><span class="comment">              new int[integer]: [integer]看成参数,参数为Integer型,返回值int[]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span>[] apply(Integer integer) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[integer];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(integer-&gt; <span class="keyword">new</span> <span class="title class_">int</span>[integer],<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        method(<span class="type">int</span>[]::<span class="keyword">new</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Function&lt;Integer,<span class="type">int</span>[]&gt; function,Integer len)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = function.apply(len);</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven从0到1</title>
      <link href="/year/02/11/Maven%E4%BB%8E0%E5%88%B01/"/>
      <url>/year/02/11/Maven%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Maven简介（废话）"><a href="#一-Maven简介（废话）" class="headerlink" title="一.Maven简介（废话）"></a>一.Maven简介（废话）</h1><p><a href="https://maven.apache.org/what-is-maven.html">官方链接丢这</a>，也是下载地址</p><h2 id="1-一个依赖管理工具"><a href="#1-一个依赖管理工具" class="headerlink" title="1.一个依赖管理工具"></a>1.一个依赖管理工具</h2><p>①jar 包的规模</p><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。而如果使用 Maven 来引入这些 jar 包只需要配置相对来说极少『<strong>依赖</strong>』。</p><p>②jar包的来源问题</p><p>使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范，避免出现名称，版本等一系列问题。</p><p>③jar包的导入问题</p><p>不用maven构建的javaweb工程懂的都懂，一堆jar包要放在webinf的lib目录下麻烦得要死。在使用Maven之后，通过配置依赖(jar包)的坐标，查找本地仓库中相应jar包，若本地仓库没有，则统一从镜像网站或中央仓库中下载</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021102831531.png" alt="image-20231021102831531"></p><p>④jar包之间的依赖</p><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h2 id="2-一个构建工具"><a href="#2-一个构建工具" class="headerlink" title="2.一个构建工具"></a>2.一个构建工具</h2><p>你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。如果在linux服务器上没有ide环境那么怎么办，所以需要maven这种专门的构建工具。</p><h1 id="二-Maven安装和配置"><a href="#二-Maven安装和配置" class="headerlink" title="二. Maven安装和配置"></a>二. Maven安装和配置</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://maven.apache.org/docs/history.html">装之前先看看与你的java版本是否支持</a>，当然前提是电脑内必须包含java_home环境变量</p><p>本机使用：</p><table><thead><tr><th>工具</th><th>版本</th></tr></thead><tbody><tr><td>Maven</td><td>3.8.8</td></tr><tr><td>JDK</td><td>19</td></tr><tr><td>IDEA</td><td>2022.3</td></tr></tbody></table><p>下载完解压存放到非中文路径，打开根目录可以看到一下</p><p>软件结构：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240304222454975.png" alt="image-20240304222454975"></p><ol><li><p><strong>bin</strong>：含有Maven的运行脚本</p></li><li><p>boot：含有plexus-classworlds类加载器框架</p></li><li><p><strong>conf</strong>：含有Maven的核心配置文件</p></li><li><p>lib：含有Maven运行时所需要的Java类库</p></li><li><p>LICENSE、NOTICE、README.txt：针对Maven版本，第三方软件等简要介绍</p></li></ol><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p>1.配置MAVEN_HOME</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021110938230.png" alt="image-20231021110938230"></p><p>2.配置Path</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_xNL5Fg_ucf.png" alt="image_xNL5Fg_ucf"></p><p>3.命令测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn -v </span><br><span class="line"><span class="comment"># 输出版本信息即可，如果错误，请仔细检查环境变量即可！</span></span><br></pre></td></tr></table></figure><h2 id="3-功能配置"><a href="#3-功能配置" class="headerlink" title="3.功能配置"></a>3.功能配置</h2><p>我们需要需改<strong>maven/conf/settings.xml</strong>配置文件，来修改maven的一些默认配置。我们主要休要修改的有三个配置：</p><p>1.配置本地仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">  | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conf/settings.xml 55行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>此处写你自己选择的本地仓库地址路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置国内阿里镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.配置jdk版本项目构建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-IDEA配置本地Maven软件"><a href="#4-IDEA配置本地Maven软件" class="headerlink" title="4. IDEA配置本地Maven软件"></a>4. IDEA配置本地Maven软件</h2><p><strong>注意：idea工具默认自带maven配置软件</strong>,你可以选择自带也可以选择自己的。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021112046512.png" alt="image-20231021112046512"></p><h1 id="三-基于IDEA创建Maven工程"><a href="#三-基于IDEA创建Maven工程" class="headerlink" title="三. 基于IDEA创建Maven工程"></a>三. 基于IDEA创建Maven工程</h1><h2 id="1-Maven工程的GAVP"><a href="#1-Maven工程的GAVP" class="headerlink" title="1.Maven工程的GAVP"></a>1.Maven工程的GAVP</h2><p>Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。</p><p>GAV遵循一下规则：</p><p>​    1） <strong>GroupID 格式</strong>：com.{公司/BU }.业务线.[子业务线]，最多 4 级。</p><p>​        说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。</p><p>​        正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang</p><p>​    2） <strong>ArtifactID 格式</strong>：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。</p><p>​        正例：tc-client / uic-api / tair-tool / bookstore</p><p>​    3） <strong>Version版本号格式推荐</strong>：主版本号.次版本号.修订号</p><p>​        1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。</p><p>​        2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。</p><p>​        3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。</p><p>​        例如： 初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1等</p><p><strong>Packaging定义规则：</strong></p><p>​    指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！</p><p>​    packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。</p><p>​    packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。</p><p>​    packaging 属性为 pom，代表不会打包，用来做继承的父工程。</p><h2 id="2-构建maven-javase工程"><a href="#2-构建maven-javase工程" class="headerlink" title="2.构建maven javase工程"></a>2.构建maven javase工程</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/1709646000950.png" alt="1709646000950"></p><p>验证maven工程是否创建成功，当创建完毕maven工程之后，idea中会自动打开Maven视图，如下图：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305214139033.png" alt="image-20240305214139033"></p><h2 id="3-构建javaweb工程"><a href="#3-构建javaweb工程" class="headerlink" title="3.构建javaweb工程"></a>3.构建javaweb工程</h2><h3 id="3-1手动创建"><a href="#3-1手动创建" class="headerlink" title="3.1手动创建"></a>3.1手动创建</h3><p>手动创建一个javase工程然后在pom文件下添加打包方式（觉得麻烦直接看下一个）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后设置<strong>web资源路径</strong>和<strong>web.xml路径</strong>（懒不做演示）</p><p>校验一下</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305214752774.png" alt="image-20240305214752774"></p><h3 id="3-2插件创建"><a href="#3-2插件创建" class="headerlink" title="3.2插件创建"></a>3.2插件创建</h3><p>1.安装插件JBLJavaToWeb</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_cHUU_rABB6.png" alt="image_cHUU_rABB6"></p><p>2.右键、使用插件快速补全web项目</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305215218413.png" alt="image-20240305215218413"></p><h3 id="3-3-模板创建"><a href="#3-3-模板创建" class="headerlink" title="3.3.模板创建"></a>3.3.模板创建</h3><p><strong>这种方式生成的web.xml版本很低</strong></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240305215737601.png" alt="image-20240305215737601"></p><h2 id="4-Maven工程项目结构说明"><a href="#4-Maven工程项目结构说明" class="headerlink" title="4.Maven工程项目结构说明"></a>4.Maven工程项目结构说明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|-- pom.xml                               # Maven 项目管理文件 </span><br><span class="line">|-- src</span><br><span class="line">    |-- main                              # 项目主要代码</span><br><span class="line">    |   |-- java                          # Java 源代码目录</span><br><span class="line">    |   |   `-- com/example/myapp         # 开发者代码主目录</span><br><span class="line">    |   |       |-- controller            # 存放 Controller 层代码的目录</span><br><span class="line">    |   |       |-- service               # 存放 Service 层代码的目录</span><br><span class="line">    |   |       |-- dao                   # 存放 DAO 层代码的目录</span><br><span class="line">    |   |       `-- model                 # 存放数据模型的目录</span><br><span class="line">    |   |-- resources                     # 资源目录，存放配置文件、静态资源等</span><br><span class="line">    |   |   |-- log4j.properties          # 日志配置文件</span><br><span class="line">    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件</span><br><span class="line">    |   |   `-- static                    # 存放静态资源的目录</span><br><span class="line">    |   |       |-- css                   # 存放 CSS 文件的目录</span><br><span class="line">    |   |       |-- js                    # 存放 JavaScript 文件的目录</span><br><span class="line">    |   |       `-- images                # 存放图片资源的目录</span><br><span class="line">    |   `-- webapp                        # 存放 WEB 相关配置和资源</span><br><span class="line">    |       |-- WEB-INF                   # 存放 WEB 应用配置文件</span><br><span class="line">    |       |   |-- web.xml               # Web 应用的部署描述文件</span><br><span class="line">    |       |   `-- classes               # 存放编译后的 class 文件</span><br><span class="line">    |       `-- index.html                # Web 应用入口页面</span><br><span class="line">    `-- test                              # 项目测试代码</span><br><span class="line">        |-- java                          # 单元测试目录</span><br><span class="line">        `-- resources                     # 测试资源目录</span><br></pre></td></tr></table></figure><ul><li>  pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。</li><li>  src/main/java：存放项目的 Java 源代码。</li><li>  src/main/resources：存放项目的资源文件，如配置文件、静态资源等。</li><li>  src/main/webapp/WEB-INF：存放 Web 应用的配置文件。</li><li>  src/main/webapp/index.jsp：Web 应用的入口页面。</li><li>  src/test/java：存放项目的测试代码。</li><li>  src/test/resources：存放测试相关的资源文件，如测试配置文件等。</li></ul><h1 id="四-基于IDEA进行Maven工程构建"><a href="#四-基于IDEA进行Maven工程构建" class="headerlink" title="四.基于IDEA进行Maven工程构建"></a>四.基于IDEA进行Maven工程构建</h1><p>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。常见的构建工具包括 Maven、Gradle、Ant 等。</p><h2 id="1-命令方式项目构建"><a href="#1-命令方式项目构建" class="headerlink" title="1.命令方式项目构建"></a>1.命令方式项目构建</h2><p><strong>在需要构建模块的pom.xml文件的目录使用cmd</strong></p><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>mvn compile</td><td align="left">编译项目，生成target文件</td></tr><tr><td>mvn package</td><td align="left">打包项目，生成jar或war文件</td></tr><tr><td>mvn clean</td><td align="left">清理编译或打包后的项目结构</td></tr><tr><td>mvn install</td><td align="left">打包后上传到maven本地仓库</td></tr><tr><td>mvn deploy</td><td align="left">只打包，上传到maven私服仓库</td></tr><tr><td>mvn site</td><td align="left">生成站点</td></tr><tr><td>mvn test</td><td align="left">执行测试源码</td></tr></tbody></table><p>war包打包插件和jdk版本不匹配：pom.xml 添加以下代码即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-可视化方式项目构建"><a href="#2-可视化方式项目构建" class="headerlink" title="2.可视化方式项目构建"></a>2.可视化方式项目构建</h2><p>idea里面直接点右侧maven，然后选择你需要的构建操作</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240306213541330.png" alt="image-20240306213541330"></p><p>注意：打包（package）和安装（install）的区别是什么</p><p>打包是将工程打成jar或war文件，保存在target目录下</p><p>安装是将当前工程所生成的jar或war文件，安装到本地仓库，会按照坐标保存到指定位置</p><h2 id="3-构建生命周期"><a href="#3-构建生命周期" class="headerlink" title="3.构建生命周期"></a>3.构建生命周期</h2><p>当我们执行package命令也会自动执行compile命令。这种行为就是因为构建生命周期产生的！构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！！！<strong>会简化构建过程</strong>。</p><ul><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><pre><code>包含命令：compile -  test - package - install - deploy</code></pre></li></ul><h1 id="五-基于IDEA进行Maven依赖管理"><a href="#五-基于IDEA进行Maven依赖管理" class="headerlink" title="五.基于IDEA进行Maven依赖管理"></a>五.基于IDEA进行Maven依赖管理</h1><p>Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven <strong>仓库自动</strong>下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><h2 id="1-Maven工程核心信息配置"><a href="#1-Maven工程核心信息配置" class="headerlink" title="1.Maven工程核心信息配置"></a>1.Maven工程核心信息配置</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--打包方式</span></span><br><span class="line"><span class="comment">    默认：jar</span></span><br><span class="line"><span class="comment">    jar指的是普通的java项目打包方式！ 项目打成jar包！</span></span><br><span class="line"><span class="comment">    war指的是web项目打包方式！项目打成war包！</span></span><br><span class="line"><span class="comment">    pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar/pom/war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖管理和依赖添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖！</span></span><br><span class="line"><span class="comment">   scope属性是可选的，可以指定依赖生效范围！</span></span><br><span class="line"><span class="comment">   依赖信息查询方式：</span></span><br><span class="line"><span class="comment">      1. maven仓库信息官网 https://mvnrepository.com/</span></span><br><span class="line"><span class="comment">      2. mavensearch插件搜索</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入具体的依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖版本统一提取和维护</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--命名随便,内部制定版本号即可！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用properties声明版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-依赖范围"><a href="#2-依赖范围" class="headerlink" title="2.依赖范围"></a>2.依赖范围</h2><p>通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境</p><table><thead><tr><th>依赖范围</th><th>描述</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>编译依赖范围，scope 元素的缺省值。使用此依赖范围的 Maven 依赖，对于三种 classpath 均有效，即该 Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。</td></tr><tr><td><strong>test</strong></td><td>测试依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath 有效。例如，Junit 依赖只有在测试阶段才需要。</td></tr><tr><td><strong>provided</strong></td><td>已提供依赖范围。使用此依赖范围的 Maven 依赖，只对编译 classpath 和测试 classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，故不需要 Maven 重复引入该依赖。</td></tr><tr><td>runtime</td><td>运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，只有测试、运行阶段才需要实现了 JDBC 接口的驱动。</td></tr><tr><td>system</td><td>系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用。</td></tr><tr><td>import</td><td>导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。</td></tr></tbody></table><h2 id="3-Maven仓库产生LastUpdated文件解决"><a href="#3-Maven仓库产生LastUpdated文件解决" class="headerlink" title="3.Maven仓库产生LastUpdated文件解决"></a>3.Maven仓库产生LastUpdated文件解决</h2><p>Maven在下载仓库中找不到相应资源时（断网或者丢包），会生成一个.lastUpdated为后缀的文件。如果这个.lastUpdated文件存在，那么即使换一个有资源的仓库后，Maven依然不会去下载新资源。</p><p>此时我们需要删除此文件。以下为批量脚本删除，如果仅出现单个文件可以根据坐标手动删除。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cls</span> </span><br><span class="line">@<span class="built_in">ECHO</span> OFF </span><br><span class="line"><span class="built_in">SET</span> CLEAR_PATH=D: </span><br><span class="line"><span class="built_in">SET</span> CLEAR_DIR=D:\maven-repository(本地仓库路径)</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>a </span><br><span class="line"><span class="built_in">TITLE</span> ClearLastUpdated <span class="keyword">For</span> Windows </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:MENU </span><br><span class="line"><span class="built_in">CLS</span></span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>. * * * *  ClearLastUpdated <span class="keyword">For</span> Windows  * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">1</span> 清理*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">2</span> 查看*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">3</span> 退 出 * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>.请输入选择项目的序号： </span><br><span class="line"><span class="built_in">set</span> /p ID= </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">1</span>&quot; <span class="keyword">GOTO</span> cmd1 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">2</span>&quot; <span class="keyword">GOTO</span> cmd2 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">3</span>&quot; <span class="keyword">EXIT</span> </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line">:cmd1 </span><br><span class="line"><span class="built_in">ECHO</span>. 开始清理</span><br><span class="line"><span class="variable">%CLEAR_PATH%</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">del</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:cmd2 </span><br><span class="line"><span class="built_in">ECHO</span>. 查看*.lastUpdated文件</span><br><span class="line"><span class="variable">%CLEAR_PATH%</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br></pre></td></tr></table></figure><p><strong>但是为什么删除后会再次生成</strong></p><p>每次在更新maven项目的时候，每一个jar包路径下的_remote.repositories文件都会同setting.xml中设置的仓库地址id进行判断，如果没有匹配，会自动更新该jar包的相关文件。如果未联网则会出现jar无法发现的错误，此时就又会生成一个.lastUpdated为后缀的文件。导致即使jar存在，maven项目也无法使用该jar的情况。</p><p><strong>所以建议添加一个并且统一一个稳定的国内镜像</strong>，如果之前使用的没有更改过的远程仓库再换成国内镜像，那么建议先把本地仓库里的依赖包全清空，然后让项目重新下载所有依赖。</p><h2 id="4-Maven工程Build构建配置"><a href="#4-Maven工程Build构建配置" class="headerlink" title="4.Maven工程Build构建配置"></a>4.Maven工程Build构建配置</h2><p>默认情况下，构建不需要额外配置，都有对应的缺省配置。当然了，我们也可以在pom.xml定制一些配置，来修改默认构建的行为和产物！</p><p>1.<strong>指定打包命名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认的打包名称：artifactid+verson.打包方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>定义打包名称<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.<strong>指定打包文件</strong></p><p>如果在java文件夹中添加java类，会自动打包编译到classes文件夹下！</p><p>但是在java文件夹中添加xml文件，默认不会被打包！</p><p>默认情况下，按照maven工程结构放置的文件会默认被编译和打包！</p><p>我们可以使用resources标签，指定要打包资源的文件夹要把哪些静态资源打包到 classes根目录下！</p><p>应用场景：mybatis中有时会将用于编写SQL语句的映射文件和mapper接口都写在src/main/java下的某个包中，此时映射文件就不会被打包，如何解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置要打包的资源位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置资源所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置包含的资源类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong>配置依赖插件</strong></p><p>dependencies标签下引入开发需要的jar包！我们可以在build/plugins/plugin标签引入插件！</p><p>常用的插件：修改jdk版本、tomcat插件、mybatis分页插件、mybatis逆向工程插件等等！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- java编译插件，配jdk的编译版本 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六-Maven依赖传递和依赖冲突"><a href="#六-Maven依赖传递和依赖冲突" class="headerlink" title="六.Maven依赖传递和依赖冲突"></a>六.Maven依赖传递和依赖冲突</h1><h2 id="1-Maven依赖传递特性"><a href="#1-Maven依赖传递特性" class="headerlink" title="1. Maven依赖传递特性"></a>1. Maven依赖传递特性</h2><p>假如有Maven项目A，项目B依赖A，项目C依赖B。那么我们可以说 C依赖A。也就是说，依赖的关系为：C—&gt;B—&gt;A， 那么我们执行项目C时，会自动把B、A都下载导入到C项目的jar包文件夹中，这就是依赖的传递性。</p><p><strong>传递的原则</strong></p><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围以及配置</p><ul><li><p>B 依赖 C 时使用 compile 范围：可以传递</p></li><li><p>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</p></li><li><p>B 依赖 C 时，若配置了optional标签，则不能传递</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>依赖冲突（传递的依赖已经存在），依赖不会传递</li></ul><h2 id="2-Maven依赖冲突特性"><a href="#2-Maven依赖冲突特性" class="headerlink" title="2. Maven依赖冲突特性"></a>2. Maven依赖冲突特性</h2><p>当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image_km7_szBRUw.png" alt="image_km7_szBRUw"></p><p>maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐！</p><p><strong>解决依赖冲突（如何选择重复依赖）方式：</strong></p><ol><li><p>自动选择原则</p><ul><li><p>短路优先原则（第一原则）</p><p>A—&gt;B—&gt;C—&gt;D—&gt;E—&gt;X(version 0.0.1)</p><p>A—&gt;F—&gt;X(version 0.0.2)</p><p>则A依赖于X(version 0.0.2)。</p></li><li><p>依赖路径长度相同情况下，则“先声明优先”（第二原则）</p><p>A—&gt;E—&gt;X(version 0.0.1)</p><p>A—&gt;F—&gt;X(version 0.0.2)</p><p>在&lt;depencies&gt;&lt;/depencies&gt;中，先声明的，路径相同，会优先选择！</p></li></ul></li><li><p>手动排除</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用excludes标签配置依赖的排除  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="七-Maven工程继承和聚合关系"><a href="#七-Maven工程继承和聚合关系" class="headerlink" title="七.Maven工程继承和聚合关系"></a>七.Maven工程继承和聚合关系</h1><h2 id="1-Maven工程继承关系"><a href="#1-Maven工程继承关系" class="headerlink" title="1. Maven工程继承关系"></a>1. Maven工程继承关系</h2><p>Maven 继承是指在 Maven 的项目中，让一个项目从另一个项目中继承配置信息的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。能够在父工程中统一管理项目中的依赖信息。</p><ul><li>父工程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gozei.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子工程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父工程的坐标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用父工程依赖统一管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后子工程引用版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Maven工程聚合关系"><a href="#2-Maven工程聚合关系" class="headerlink" title="2. Maven工程聚合关系"></a>2. Maven工程聚合关系</h2><p>Maven 聚合是指将多个项目组织到一个父级项目中，以便一起构建和管理的机制。聚合可以帮助我们更好地管理一组相关的子项目，同时简化它们的构建和部署过程。</p><p>父项目中包含的子项目列表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且通过触发父工程构建命令、引发所有子模块构建！产生反应堆！</p><h1 id="八-Maven私服搭建"><a href="#八-Maven私服搭建" class="headerlink" title="八.Maven私服搭建"></a>八.Maven私服搭建</h1><p>Maven 私服是一种特殊的Maven远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。当然也并不是说私服只能建立在局域网，也有很多公司会直接把私服部署到公网，具体还是得看公司业务的性质是否是保密的等等，因为局域网的话只能在公司用，部署到公网的话员工在家里也可以办公使用。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231021164631791.png" alt="image-20231021164631791"></p><p>私服产品有很多，此处选择最流行的Nexus</p><h2 id="1-Nexus下载安装"><a href="#1-Nexus下载安装" class="headerlink" title="1.Nexus下载安装"></a>1.Nexus下载安装</h2><p>下载地址：<a href="https://help.sonatype.com/repomanager3/product-information/download">https://help.sonatype.com/repomanager3/product-information/download</a></p><p>解压，以管理员身份打开CMD，进入bin目录下，执行./nexus /run命令启动</p><p>访问 Nexus 首页</p><p>首页地址：<a href="http://localhost:8081/%EF%BC%8C8081%E4%B8%BA%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7">http://localhost:8081/，8081为默认端口号</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309230001315.png" alt="image-20240309230001315"></p><h2 id="2-初始设置"><a href="#2-初始设置" class="headerlink" title="2.初始设置"></a>2.初始设置</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img002.e1ac8197.png" alt="img002.e1ac8197"></p><ul><li>用户名：admin</li><li>密码：查看你这里所显示的路径下的文件</li></ul><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031171116756.png" alt="image-20231031171116756"></p><p>然后初始化：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img005.4b81e5ab.png" alt="img005.4b81e5ab"></p><p>匿名登录，启用还是禁用？由于启用匿名登录后，后续操作比较简单，这里我们演示禁用匿名登录的操作：</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031171607378.png" alt="image-20231031171607378"></p><p>最后初始化完成。</p><h2 id="3-Nexus上的各种仓库"><a href="#3-Nexus上的各种仓库" class="headerlink" title="3.Nexus上的各种仓库"></a>3.Nexus上的各种仓库</h2><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img009.7f737ed7.png" alt="img009.7f737ed7"></p><table><thead><tr><th>仓库类型</th><th>说明</th></tr></thead><tbody><tr><td>proxy</td><td>某个远程仓库的代理</td></tr><tr><td>group</td><td>存放：通过 Nexus 获取的第三方 jar 包</td></tr><tr><td>hosted</td><td>存放：本团队其他开发人员部署到 Nexus 的 jar 包</td></tr></tbody></table><table><thead><tr><th>仓库名称</th><th>说明</th></tr></thead><tbody><tr><td>maven-central</td><td>Nexus 对 Maven 中央仓库的代理</td></tr><tr><td>maven-public</td><td>Nexus 默认创建，供开发人员下载使用的组仓库</td></tr><tr><td>maven-releases</td><td>Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 releases 版本</td></tr><tr><td>maven-snapshots</td><td>Nexus 默认创建，供开发人员部署自己 jar 包的宿主仓库 要求 snapshots 版本</td></tr></tbody></table><h2 id="4-通过-Nexus-下载-jar-包"><a href="#4-通过-Nexus-下载-jar-包" class="headerlink" title="4.通过 Nexus 下载 jar 包"></a>4.通过 Nexus 下载 jar 包</h2><p>修改本地maven的核心配置文件settings.xml，把我们原来配置阿里云仓库地址的 mirror 标签改成下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p> url 标签</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309230743361.png" alt="image-20240309230743361"></p><p>把上图中看到的地址复制出来即可。如果我们在前面允许了匿名访问，到这里就够了。但如果我们禁用了匿名访问，那么接下来我们还要继续配置 settings.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>你设置的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要<strong>格外注意</strong>：server 标签内的 id 标签值必须和 mirror 标签中的 id 值一样。</p><p>然后在你的工程使用compile命令就会下载所需jar包在nexus。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/img014.cc0e87c3.png" alt="img014.cc0e87c3"></p><p>若下载速度太慢，可以设置私服中中央仓库的地址为阿里云仓库地址</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20240309232428158.png" alt="image-20240309232428158"></p><p>修改为：<a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20231031175134745.png" alt="image-20231031175134745"></p><h2 id="5-将-jar-包部署到-Nexus"><a href="#5-将-jar-包部署到-Nexus" class="headerlink" title="5.将 jar 包部署到 Nexus"></a>5.将 jar 包部署到 Nexus</h2><p>maven工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这里 snapshotRepository 的 id 标签必须和 settings.xml 中指定的 mirror 标签的 id 属性一致。</p><p>执行部署命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h2 id="6-引用别人部署的-jar-包"><a href="#6-引用别人部署的-jar-包" class="headerlink" title="6.引用别人部署的 jar 包"></a>6.引用别人部署的 jar 包</h2><p>你们公司内部人员写的jar包部署在私服上面，如果你想用就可以这样配置</p><p>maven工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 从0到1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI API 介绍与使用</title>
      <link href="/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/year/03/05/OpenAI-API-%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>前不久非常牛逼的Chatgpt语言模型的开发公司OpenAI开放了他们的chatgpt接口，让个人或者企业开发者可以把chatgpt集成到自己的应用中，这是<a href="https://platform.openai.com/docs/introduction">OpenAI</a>官方文档地址想了解更详细的内容可以自己去看看。（需要魔法上网）</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305192615370.png" alt="image-20230305192615370"></p><p>可以看到有非常多的功能可以给大家体验。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="APIKey"><a href="#APIKey" class="headerlink" title="APIKey"></a>APIKey</h2><p>首先你得有openAI的账号然后去<a href="https://platform.openai.com/account/api-keys">这里</a>复制你的APIKey，至于你有没有账号和能不能进去官网就不是我这篇博客的重点了😎。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305193247741.png" alt="image-20230305193247741"></p><p>然后还要<a href="https://platform.openai.com/account/org-settings">组织标识</a>，后面也有用</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305200248300.png" alt="image-20230305200248300"></p><p>每个账号有18美元的免费额度，会根据你请求的token个数来计费。1000个token，0.002刀，一张图片0.02刀。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方提供两种api，一个是Python，一个是Node.js库。如果你想去用java或者Kotlin等等其他语言就去<a href="https://platform.openai.com/docs/libraries/community-libraries">git社区</a>。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305194643999.png" alt="image-20230305194643999"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openai</span><br><span class="line">npm install openai</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>安装完成之后就可以通过任何语言的HTTP请求来与API交互，这个时候你的APIKey就得用上了，你提交的每一个请求都必须带上key才能成功。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195227479.png" alt="image-20230305195227479"></p><p>展示一个官方给的<a href="https://platform.openai.com/docs/api-reference/chat">聊天请求</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai.com/v1/completions \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">-H &quot;Authorization: Bearer YOUR_API_KEY&quot; \</span><br><span class="line">-d &#x27;&#123;&quot;model&quot;: &quot;text-davinci-003&quot;, &quot;prompt&quot;: &quot;Say this is a test&quot;, &quot;temperature&quot;: 0, &quot;max_tokens&quot;: 7&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305195437766.png" alt="image-20230305195437766"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305201034817.png" alt="image-20230305201034817"></p><p>之后的代码我会用py来演示(毕竟官方就给的py不抄白不抄😎)</p><h2 id="获取模型列表"><a href="#获取模型列表" class="headerlink" title="获取模型列表"></a>获取模型列表</h2><p>列出当前可用的模型，并提供有关每个模型的基本信息，例如所有者和可用性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_key = <span class="string">&quot;YOUR APIKEY&quot;</span></span><br><span class="line">model = openai.Model.<span class="built_in">list</span>()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;organization-owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model-id-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owned_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openai&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;permission&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Create-completion"><a href="#Create-completion" class="headerlink" title="Create completion"></a>Create completion</h2><p>这才是重头戏，直译过来叫创建完成，感觉有点不好听所以就直接用英文了😎。来个<a href="https://platform.openai.com/docs/guides/chat/chat-completions-beta">跳转链接</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230306001026228.png" alt="image-20230306001026228"></p><p>因为官方在这个地方个个参数功能介绍得非常详细，所以我就直接上代码先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">message_log</span>):</span><br><span class="line">    <span class="comment"># 调用openai提供的ChatCompletion API获取chatgpt的应答</span></span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,  <span class="comment"># 必要，模型名字</span></span><br><span class="line">        messages=message_log,   <span class="comment"># 必要，消息内容</span></span><br><span class="line">        <span class="comment"># temperature=1.2,        # 可选，默认为1，0~2，数值越高创造性越强</span></span><br><span class="line">        <span class="comment"># top_p = 0.5,           # 可选，默认为1，0~1，效果类似temperature，不建议都用</span></span><br><span class="line">        <span class="comment"># n = 3,                  # 可选，默认为1，chatgpt对一个提问生成多少个回答</span></span><br><span class="line">        <span class="comment"># stream = True,         # 可选，默认False，设置为True和网页效果类似，需监听事件来解析</span></span><br><span class="line">        <span class="comment"># stop = &#x27;花&#x27;,              # 可选，chatgpt遇到stop里的字符串时停止生成内容（且不返回应答？）</span></span><br><span class="line">        <span class="comment"># max_tokens=4048,        # 可选，默认无穷大，回复的最大长度，如果设置了，需要满足max_tokens+message_tokens&lt;=4096</span></span><br><span class="line">        <span class="comment"># presence_penalty = 2,   # 可选，默认为0，-2~2，越大越允许跑题</span></span><br><span class="line">        <span class="comment"># frequency_penalty = 1.8,  # 可选，默认为0，-2~2，越大越不允许复读机</span></span><br><span class="line">        <span class="comment"># logit_bias = None,      # 可选，默认无，影响特定词汇的生成概率？</span></span><br><span class="line">        <span class="comment"># user = &#x27;xy123&#x27;,              # 可选，默认无，用户名       </span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content) <span class="comment">#这里的response是一个对象，真正要看的内容在choices字典message.content这里</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;you:&quot;</span>)</span><br><span class="line">    send_message(message)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>每个请求参数的后面都有具体功能解释。这里面非常有用的参数是temperature和top_p，可以调整ai回复的创造性。而messages就是你说的话。</p><p>看一下设置1和1.2的对比</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305203111507.png" alt="image-20230305203111507"></p><p>这是1.2，甚至开始偏题</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305204116424.png" alt="image-20230305204116424"></p><h2 id="指令编辑"><a href="#指令编辑" class="headerlink" title="指令编辑"></a>指令编辑</h2><p>为提供的输入、指令和参数创建新的编辑。比如修改错算数错误，修改拼写错误，按需求编辑等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要求改错算术问题1+1=3</span></span><br><span class="line">response = openai.Edit.create(</span><br><span class="line">        model=<span class="string">&quot;text-davinci-edit-001&quot;</span>,</span><br><span class="line">        <span class="built_in">input</span>= <span class="string">&quot;1+1=3&quot;</span>, <span class="comment">#需要编辑的内容</span></span><br><span class="line">        instruction= <span class="string">&quot;Modify calculation error&quot;</span>, <span class="comment">#需求指令</span></span><br><span class="line">    <span class="comment"># n = 1 默认值为 1,要为输入和指令生成的编辑次数。</span></span><br><span class="line">        <span class="comment"># temperature = 1-2 使用什么采样温度，介于 0 和 2 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使其更加集中和确定。</span></span><br><span class="line">    <span class="comment">#更多参数就不阐述了，文档里面写的很详细， 只介绍三个个必须的</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response) <span class="comment">#这里的response是一个对象，真正要看的内容在choices的text里面</span></span><br></pre></td></tr></table></figure><p>修改之后</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305210624754.png"></p><h2 id="生成图像"><a href="#生成图像" class="headerlink" title="生成图像"></a>生成图像</h2><p>给定提示和/或输入图像，模型将生成一个新图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = openai.Image.create(</span><br><span class="line">        prompt = <span class="string">&quot;A cute baby sea otter&quot;</span>, <span class="comment">#图像描述</span></span><br><span class="line">        n = <span class="number">2</span>, <span class="comment">#生成图像个数</span></span><br><span class="line">        size= <span class="string">&quot;1024x1024&quot;</span> <span class="comment">#尺寸</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.data[<span class="number">0</span>].url) <span class="comment">#取第一个</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1678023645</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-Mu2nKUx4IQbrWViTiBomLnBD.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=rTUUzKFFWC3nYwK9L64ix%2BpPpfQ4ZhmmsV2Gl/yl808%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-XyOlvc4QZCyevSx14Zj9BZ2G/user-kQX2PG78JWlwWb5eiLvWCend/img-bbTBG1Jx7jYbMb7XF0QXvs8t.png?st=2023-03-05T12%3A40%3A45Z&amp;se=2023-03-05T14%3A40%3A45Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2023-03-05T01%3A24%3A41Z&amp;ske=2023-03-06T01%3A24%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=TcnlGyhAiO%2B7sSImHVocRku6j5S0M%2BUQWZ%2BkulEjRCI%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>预览一下，得到sea otter一个</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305214824099.png"></p><h2 id="音频-语音转文本"><a href="#音频-语音转文本" class="headerlink" title="音频[语音转文本]"></a>音频[语音转文本]</h2><p>语音到文本API提供了两个端点，基于我们最先进的开源大v2 Whisper模型。</p><p>它们可用于：</p><ul><li><p>将音频翻译并转录为英语。(目前仅支持英文)</p></li><li><p>将音频转录为音频使用的任何语言。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">audio_file= <span class="built_in">open</span>(<span class="string">&quot;1.mp3&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">transcript = openai.Audio.translate(<span class="string">&quot;whisper-1&quot;</span>, audio_file) <span class="comment">#音频翻译并转录</span></span><br><span class="line"><span class="comment"># transcript = openai.Audio.transcribe(&quot;whisper-1&quot;, audio_file) #音频转录</span></span><br><span class="line"><span class="built_in">print</span>(transcript)</span><br></pre></td></tr></table></figure><p>这里转录了一段我室友梦话😎，没有在代码里面解析unicode编码，去网上随便解析了一手</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235327714.png" alt="image-20230305235327714"></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230305235546293.png" alt="image-20230305235546293"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>官方文档里还有部分api就不做演示了，有些功能我自己也没玩明白。如果有兴趣就自己去研究研究文档。体验chatgpt的强大，不得不说这真能打！！人类要大面积失业了！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> ChatGpt </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明日方舟MAA脚本使用</title>
      <link href="/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/year/02/11/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FMAA%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h1><h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h2><p><a href="https://maa.plus/">MaaAssistantArknights</a></p><p>前面是下载链接，后面是使用文档，可以查看模拟器支持。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133112717.png" alt="image-20230211133112717"></p><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h1><p>解压下载文件后点击启动</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133433485.png" alt="image-20230211133433485"></p><p>可以看到最初页面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133517036.png" alt="image-20230211133517036"></p><p>先去<strong>设置里面设置</strong>连接设置，就是你的模拟器名。还有游戏设置里面的客户端类型设置，b服就选择b服，管服就是管服。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133858837.png" alt="image-20230211133858837"></p><p>模拟器建议先看看官方文档里面的<a href="https://maa.plus/docs/1.3-%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%94%AF%E6%8C%81.html">模拟器型号支持</a></p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134225656.png" alt="image-20230211134225656"></p><p>我最开始用的雷电模拟器发现确实有很多问题，最后用的官方推荐的蓝叠。如果里面没有任何一款你用的模拟器你就选择通用模式或者兼容模式</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211133931325.png" alt="image-20230211133931325"></p><h2 id="1-一键长草"><a href="#1-一键长草" class="headerlink" title="1.一键长草"></a>1.一键长草</h2><p>这是最主要也用得最多的功能。点击全选会帮你把除肉鸽和生息演算之外的勾上，毕竟这两个人为要求高。右边可以根据你的需要设置理智药的量或者碎石次数等等。比如最常见的刷土就在关卡指定上面选择1-7。不过这都是些常用的如果打活动需要用到后面的自动战斗。</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211134848657.png"></p><p>最后点下面的link star等待脚本运行</p><h2 id="2-自动肉鸽"><a href="#2-自动肉鸽" class="headerlink" title="2.自动肉鸽"></a>2.自动肉鸽</h2><p>自动肉鸽需要先去设置-&gt;肉鸽设置选择你的肉鸽类型，水月或者愧影。<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135145864.png" alt="image-20230211135145864"></p><p>等等一些需求根据自己设置上。然后依旧点击link star开始脚本</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135523891.png" alt="image-20230211135523891"></p><h2 id="3-生息演算"><a href="#3-生息演算" class="headerlink" title="3.生息演算"></a>3.生息演算</h2><p>生息演算需要在游戏内操作几步。<a href="https://www.bilibili.com/video/BV1py4y1R7bH">图文看不懂的点这里（转载b站）</a></p><p>首先进入生息演算并且开始演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211135954870.png" alt="image-20230211135954870"></p><p>随便选择一个干员（没有练度要求），补充体力后推出</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140030276.png" alt="image-20230211140030276"></p><p>放弃演算</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140137459.png" alt="image-20230211140137459"></p><p>最后勾上生息演算点击开始就行<img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140230394.png" alt="image-20230211140230394"></p><h2 id="4-自动战斗"><a href="#4-自动战斗" class="headerlink" title="4.自动战斗"></a>4.自动战斗</h2><p>自动战斗是打具体关卡，活动用的。</p><p>首先你得先去找到<a href="https://prts.plus/">作业代码</a>，以这里以刷土关的例子</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140705729.png" alt="image-20230211140705729"></p><p>打开然后复制右上角的神秘代码</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140746210.png" alt="image-20230211140746210"></p><p>或者下载原json</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211140840118.png" alt="image-20230211140840118"></p><p>如果你使用神秘代码显示请求网络错误那么建议你下载json文件，然后选择作业文件地址到上面</p><p><img src="https://picgo-1301595386.cos.ap-nanjing.myqcloud.com/picGo/image-20230211141317927.png" alt="image-20230211141317927"></p><p><strong>注意一下，没有助战就勾上自动编队</strong></p><p>不过用了几个作业发现还是有很多问题，比如干员没有部署，或者没有带上。如果一步没有完成脚本可能会卡住，关于这点我不知道是谁的问题。</p><h2 id="5-其他功能"><a href="#5-其他功能" class="headerlink" title="5.其他功能"></a>5.其他功能</h2><p>这里就不太多介绍了，摸索一下都是一眼就能看明白这么用的。本教程本身就很傻瓜，甚至看完下载就不用接着往后面看，看完还说那你能帮帮我吗，这里我建议找我去帮你去医院挂个号。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 明日方舟 </tag>
            
            <tag> MAA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
